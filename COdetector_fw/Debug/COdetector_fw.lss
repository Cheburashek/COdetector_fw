
COdetector_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031a  00802000  00000f22  00000fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000368  0080231a  0080231a  000012d0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a8  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bbe  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cdd  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c83  00000000  00000000  00004d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d0  00000000  00000000  000059f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000123c  00000000  00000000  00005ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010ce  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  000081ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 66 04 	jmp	0x8cc	; 0x8cc <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_22>
  5c:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_23>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_34>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	13 e2       	ldi	r17, 0x23	; 35
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e2 e2       	ldi	r30, 0x22	; 34
  c0:	ff e0       	ldi	r31, 0x0F	; 15
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 31       	cpi	r26, 0x1A	; 26
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	26 e2       	ldi	r18, 0x26	; 38
  d0:	aa e1       	ldi	r26, 0x1A	; 26
  d2:	b3 e2       	ldi	r27, 0x23	; 35
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 38       	cpi	r26, 0x82	; 130
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  e2:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
      - interrupt on complete conversion

   */

   // PORT:
   PORTA.DIRCLR = CFG_ADC_PIN_MASK;             // Input
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f6 e0       	ldi	r31, 0x06	; 6
  f0:	82 83       	std	Z+2, r24	; 0x02
   
   ADCA.CTRLB = ADC_CURRLIMIT_HIGH_gc  |        // High current limit, max. sampling rate 75kSPS
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f2 e0       	ldi	r31, 0x02	; 2
  f6:	92 e6       	ldi	r25, 0x62	; 98
  f8:	91 83       	std	Z+1, r25	; 0x01
                ADC_RESOLUTION_MT12BIT_gc;      // More than 12-bit right adjusted result, when (SAPNUM>0)
                  
   ADCA.CH0.AVGCTRL = ADC_SAMPNUM_32X_gc ;       // Number of samples (averaging) - 16bit
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	94 a7       	std	Z+44, r25	; 0x2c

   ADCA.SAMPCTRL = 0x08;   // For 8Mhz clock only!
  fe:	98 e0       	ldi	r25, 0x08	; 8
 100:	90 87       	std	Z+8, r25	; 0x08
   
   ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	24 83       	std	Z+4, r18	; 0x04
   
   ADC_EN();                                    // Enabling ADC block
 106:	20 81       	ld	r18, Z
 108:	21 60       	ori	r18, 0x01	; 1
 10a:	20 83       	st	Z, r18
   //adcOffCalibration ();
   
   ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;   // Single ended input
 10c:	80 a3       	std	Z+32, r24	; 0x20
   ADCA.CH0.INTCTRL = CFG_PRIO_ADC;                   // From boardCfg.h
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	22 a3       	std	Z+34, r18	; 0x22
   
   
   ADCA.CH0.OFFSETCORR0 = ADC_OFF_MAN_CORR & 0xFF;
 112:	2f ea       	ldi	r18, 0xAF	; 175
 114:	20 a7       	std	Z+40, r18	; 0x28
   ADCA.CH0.OFFSETCORR1 = ADC_OFF_MAN_CORR >> 8;
 116:	11 a6       	std	Z+41, r1	; 0x29
   
   ADCA.CH0.GAINCORR0 = 0x00;
 118:	12 a6       	std	Z+42, r1	; 0x2a
   ADCA.CH0.GAINCORR1 = 0x08;          // Gain correction x1  
 11a:	93 a7       	std	Z+43, r25	; 0x2b
       
   ADCA.CH0.CORRCTRL = 0x01;     // Correction enabled
 11c:	87 a3       	std	Z+39, r24	; 0x27
                               
   ADC_EN();
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
   
   LOG_TXT ( ">>init<<   ADC initialized\n", 28 );
 124:	6c e1       	ldi	r22, 0x1C	; 28
 126:	87 e1       	ldi	r24, 0x17	; 23
 128:	90 e2       	ldi	r25, 0x20	; 32
 12a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 12e:	08 95       	ret

00000130 <adcStartChToGnd>:


//****************************************************************************************
void adcStartChToGnd ( void )
{
   ADCA.CH0.MUXCTRL = CFG_ADC_MUXPOS; 
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	f2 e0       	ldi	r31, 0x02	; 2
 134:	11 a2       	std	Z+33, r1	; 0x21
   DEB_1_SET(); 
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	a0 e6       	ldi	r26, 0x60	; 96
 13a:	b6 e0       	ldi	r27, 0x06	; 6
 13c:	15 96       	adiw	r26, 0x05	; 5
 13e:	8c 93       	st	X, r24
   ADC_START();
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <adcRegisterEndCb>:


//****************************************************************************************
void adcRegisterEndCb ( pfnAdcEnd cb )
{
   convEndCB = cb; 
 148:	80 93 1a 23 	sts	0x231A, r24
 14c:	90 93 1b 23 	sts	0x231B, r25
 150:	08 95       	ret

00000152 <__vector_34>:
}


//****************************************************************************************
ISR ( ADCA_CH0_vect )
{  
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
   DEB_1_CLR();
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	e0 e6       	ldi	r30, 0x60	; 96
 178:	f6 e0       	ldi	r31, 0x06	; 6
 17a:	86 83       	std	Z+6, r24	; 0x06
   if ( NULL != convEndCB )
 17c:	e0 91 1a 23 	lds	r30, 0x231A
 180:	f0 91 1b 23 	lds	r31, 0x231B
 184:	30 97       	sbiw	r30, 0x00	; 0
 186:	39 f0       	breq	.+14     	; 0x196 <__vector_34+0x44>
   {       
      convEndCB (  (uint16_t)ADCA.CH0RES );      
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b2 e0       	ldi	r27, 0x02	; 2
 18c:	50 96       	adiw	r26, 0x10	; 16
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	51 97       	sbiw	r26, 0x11	; 17
 194:	09 95       	icall
   }  
   
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <boardInit>:
      // page 117 in manual (power reduction)!!!
   
   
   
   // Debug LEDs:
   PORTD.DIRSET = PIN5_bm;
 1b8:	e0 e6       	ldi	r30, 0x60	; 96
 1ba:	f6 e0       	ldi	r31, 0x06	; 6
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN6_bm;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN7_bm;   
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	81 83       	std	Z+1, r24	; 0x01
   #elif ( F_CPU == F_CPU_2MHZ )
      LOG_TXT ( ">>clock<<   Clock 2MHZ\n", 24 );
      // Default after restart
      
   #elif ( F_CPU == F_CPU_8MHZ )   
      OSC.CTRL |= OSC_RC8MEN_bm;               // Enabling 32MHz clock
 1c8:	e0 e5       	ldi	r30, 0x50	; 80
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	80 83       	st	Z, r24
      while (!(OSC.STATUS & OSC_RC8MRDY_bm));  // Waiting for clock
 1d2:	81 81       	ldd	r24, Z+1	; 0x01
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <boardInit+0x1a>
      CCP=CCP_IOREG_gc;                          // Protected register
 1d8:	88 ed       	ldi	r24, 0xD8	; 216
 1da:	84 bf       	out	0x34, r24	; 52
      CLK.CTRL = CLK_SCLKSEL_RC8M_gc;            // 8Mhz internal
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	80 93 40 00 	sts	0x0040, r24
      LOG_TXT ( ">>clock<<  Clock 8MHZ\n", 23 );
 1e2:	67 e1       	ldi	r22, 0x17	; 23
 1e4:	83 e3       	ldi	r24, 0x33	; 51
 1e6:	90 e2       	ldi	r25, 0x20	; 32
 1e8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>


   
   // Initializations:
   #ifdef LOG_USARTC0
      serialInitC();
 1ec:	0e 94 a4 02 	call	0x548	; 0x548 <serialInitC>
   #endif  
      
   CFG_GLOBAL_INT_ENABLE();
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
   PRIO_ALL_LEVELS_ENABLE();
 1f6:	e2 ea       	ldi	r30, 0xA2	; 162
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	80 83       	st	Z, r24
   
   spiInit();
 200:	0e 94 06 03 	call	0x60c	; 0x60c <spiInit>
   pdcInit();
 204:	0e 94 2a 01 	call	0x254	; 0x254 <pdcInit>
   adcInit();
 208:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
   timerInit();
 20c:	0e 94 38 04 	call	0x870	; 0x870 <timerInit>
   systemInit();
 210:	0e 94 25 04 	call	0x84a	; 0x84a <systemInit>

   
   LOG_TXT ( ">>init<<   Board initialized\n", 30 );
 214:	6e e1       	ldi	r22, 0x1E	; 30
 216:	8a e4       	ldi	r24, 0x4A	; 74
 218:	90 e2       	ldi	r25, 0x20	; 32
 21a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 21e:	08 95       	ret

00000220 <pdcChipDisable>:

// *************************************************************************
// Function to set callback in SPI.c (end of transmission)
inline static void pdcChipDisable ( void )
{
   SCE_HI();
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	e0 e4       	ldi	r30, 0x40	; 64
 224:	f6 e0       	ldi	r31, 0x06	; 6
 226:	85 83       	std	Z+5, r24	; 0x05
 228:	08 95       	ret

0000022a <pdcSend>:

// *************************************************************************
// Function to send data
static void pdcSend( uint8_t DC, uint8_t data )
{
   SCE_LO();
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	e0 e4       	ldi	r30, 0x40	; 64
 22e:	f6 e0       	ldi	r31, 0x06	; 6
 230:	96 83       	std	Z+6, r25	; 0x06
   
   switch(DC)
 232:	88 23       	and	r24, r24
 234:	29 f0       	breq	.+10     	; 0x240 <pdcSend+0x16>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	39 f4       	brne	.+14     	; 0x248 <pdcSend+0x1e>
   {
      case DC_DATA:
         DC_HI();
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	85 83       	std	Z+5, r24	; 0x05
      break;
 23e:	04 c0       	rjmp	.+8      	; 0x248 <pdcSend+0x1e>
      
      case DC_CMD:
         DC_LO();
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f6 e0       	ldi	r31, 0x06	; 6
 246:	86 83       	std	Z+6, r24	; 0x06
   }
   
   //spiSend( &data, 1 );
   
   // Very, very temporary and bad: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1oneonejedenein
   SPIC.DATA = data;
 248:	e0 ee       	ldi	r30, 0xE0	; 224
 24a:	f8 e0       	ldi	r31, 0x08	; 8
 24c:	63 83       	std	Z+3, r22	; 0x03
   while ( !SPIC.STATUS & SPI_IF_bm ){}
 24e:	82 81       	ldd	r24, Z+2	; 0x02
   (void)SPIC.DATA; 
 250:	83 81       	ldd	r24, Z+3	; 0x03
 252:	08 95       	ret

00000254 <pdcInit>:
}

// *************************************************************************
// Function to configure PDC8544
void pdcInit( void )
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
   spiRegisterTxEndCB ( pdcChipDisable );
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 1e 03 	call	0x63c	; 0x63c <spiRegisterTxEndCB>

// *************************************************************************
// Function to reset PDC8544
static void pdcReset( void )
{   
   RST_LO();
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	e0 e4       	ldi	r30, 0x40	; 64
 266:	f6 e0       	ldi	r31, 0x06	; 6
 268:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	97 e2       	ldi	r25, 0x27	; 39
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <pdcInit+0x1a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <pdcInit+0x20>
 274:	00 00       	nop
   _delay_ms(5);  // TODO: delay not ok
   RST_HI();   
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	97 e2       	ldi	r25, 0x27	; 39
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <pdcInit+0x2a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <pdcInit+0x30>
 284:	00 00       	nop

   pdcReset(); 
   
 
   
   pdcSend( DC_CMD, 0x21 );	// Extended cmd
 286:	61 e2       	ldi	r22, 0x21	; 33
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0xE0 );	// Bias
 28e:	60 ee       	ldi	r22, 0xE0	; 224
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x04 );	// Temp. control
 296:	64 e0       	ldi	r22, 0x04	; 4
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0xCB );	// Set V
 29e:	6b ec       	ldi	r22, 0xCB	; 203
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
 2a6:	60 e2       	ldi	r22, 0x20	; 32
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x0C );	// Normal mode
 2ae:	6c e0       	ldi	r22, 0x0C	; 12
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
   pdcSend( DC_CMD, addr_X );
 2b6:	60 e8       	ldi	r22, 0x80	; 128
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2be:	d0 e4       	ldi	r29, 0x40	; 64
 2c0:	14 e5       	ldi	r17, 0x54	; 84
static void pdcSetRow( uint8_t addr_Y )
{
   if( addr_Y > 5 ){ /*ERROR!!!!!!*/ }
   
   addr_Y += 0x40;	// Adding Set Y address of RAM command
   pdcSend( DC_CMD, addr_Y );
 2c2:	6d 2f       	mov	r22, r29
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
   pdcSend( DC_CMD, addr_X );
 2ca:	60 e8       	ldi	r22, 0x80	; 128
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2d2:	c1 2f       	mov	r28, r17
      pdcSetRow( Y );
      pdcSetCol( 0x00 );
      
      for( X = 0; X < 84; X++)
      {         
         pdcSend( DC_DATA, 0x00 );         
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2dc:	c1 50       	subi	r28, 0x01	; 1
   for( Y = 0; Y < 6; Y++ )
   {      
      pdcSetRow( Y );
      pdcSetCol( 0x00 );
      
      for( X = 0; X < 84; X++)
 2de:	d1 f7       	brne	.-12     	; 0x2d4 <pdcInit+0x80>
 2e0:	df 5f       	subi	r29, 0xFF	; 255
   uint8_t X = 0,
           Y = 0;
   
   pdcSetCol( 0x00 );
   
   for( Y = 0; Y < 6; Y++ )
 2e2:	d6 34       	cpi	r29, 0x46	; 70
 2e4:	71 f7       	brne	.-36     	; 0x2c2 <pdcInit+0x6e>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
   pdcSend( DC_CMD, 0x0C );	// Normal mode

   pdcClearRAM();

   LOG_TXT ( ">>init<<   PDC8544 initialized\n", 32 );   
 2e6:	60 e2       	ldi	r22, 0x20	; 32
 2e8:	88 e6       	ldi	r24, 0x68	; 104
 2ea:	90 e2       	ldi	r25, 0x20	; 32
 2ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <pdcChar>:
// *************************************************************************

// *************************************************************************
// Function to write a single char from a table
void pdcChar( char ch, uint8_t pos_Y, uint8_t pos_X )
{
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	c8 2f       	mov	r28, r24
 300:	d4 2f       	mov	r29, r20
// Function to set Y -> row
static void pdcSetRow( uint8_t addr_Y )
{
   if( addr_Y > 5 ){ /*ERROR!!!!!!*/ }
   
   addr_Y += 0x40;	// Adding Set Y address of RAM command
 302:	60 5c       	subi	r22, 0xC0	; 192
   pdcSend( DC_CMD, addr_Y );
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   //if( ch < 0x20 || ch > 0x7F ){ /*ERROR!!!!!!*/ }
   //if( pos_X > 13 ){ /*ERROR!!!!!!*/ }
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
 30a:	6d 2f       	mov	r22, r29
 30c:	66 0f       	add	r22, r22
 30e:	6d 0f       	add	r22, r29
 310:	66 0f       	add	r22, r22
// Function to set X -> Column x5
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
 312:	60 58       	subi	r22, 0x80	; 128
   pdcSend( DC_CMD, addr_X );
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	a0 97       	sbiw	r28, 0x20	; 32
 31e:	ce 01       	movw	r24, r28
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	c8 0f       	add	r28, r24
 32a:	d9 1f       	adc	r29, r25
 32c:	c8 57       	subi	r28, 0x78	; 120
 32e:	df 4d       	sbci	r29, 0xDF	; 223
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
 330:	10 e0       	ldi	r17, 0x00	; 0
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 332:	69 91       	ld	r22, Y+
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
 33a:	1f 5f       	subi	r17, 0xFF	; 255
 33c:	15 30       	cpi	r17, 0x05	; 5
 33e:	c9 f7       	brne	.-14     	; 0x332 <pdcChar+0x3a>
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
   }
   
   pdcSend( DC_DATA, 0x00 );			// One pixel spacing after char   
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	08 95       	ret

00000350 <pdcLine>:


// *************************************************************************
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	06 2f       	mov	r16, r22
 35a:	ec 01       	movw	r28, r24
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 35c:	10 e0       	ldi	r17, 0x00	; 0
   {      
      if( ch[i] < 0x20 || ch[i] > 0x7F)
 35e:	89 91       	ld	r24, Y+
 360:	90 ee       	ldi	r25, 0xE0	; 224
 362:	98 0f       	add	r25, r24
 364:	90 36       	cpi	r25, 0x60	; 96
 366:	30 f0       	brcs	.+12     	; 0x374 <pdcLine+0x24>
      {
         pdcChar( ' ', pos_Y, i );
 368:	41 2f       	mov	r20, r17
 36a:	60 2f       	mov	r22, r16
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
 372:	04 c0       	rjmp	.+8      	; 0x37c <pdcLine+0x2c>
      }
      else
      {
         pdcChar( ch[i], pos_Y, i );
 374:	41 2f       	mov	r20, r17
 376:	60 2f       	mov	r22, r16
 378:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 37c:	1f 5f       	subi	r17, 0xFF	; 255
 37e:	1e 30       	cpi	r17, 0x0E	; 14
 380:	71 f7       	brne	.-36     	; 0x35e <pdcLine+0xe>
      else
      {
         pdcChar( ch[i], pos_Y, i );
      }
   }
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <pdcUint>:


// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
 38c:	2f 92       	push	r2
 38e:	3f 92       	push	r3
 390:	4f 92       	push	r4
 392:	5f 92       	push	r5
 394:	6f 92       	push	r6
 396:	7f 92       	push	r7
 398:	8f 92       	push	r8
 39a:	9f 92       	push	r9
 39c:	af 92       	push	r10
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <pdcUint+0x26>
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	56 2e       	mov	r5, r22
 3ba:	49 83       	std	Y+1, r20	; 0x01
 3bc:	22 2e       	mov	r2, r18
   uint32_t temp_val = val;
 3be:	6c 01       	movw	r12, r24
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ } 
   
   for( len = 0; temp_val != 0; len++ )
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <pdcUint+0x44>
 3ce:	42 c0       	rjmp	.+132    	; 0x454 <pdcUint+0xc8>

// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
   uint32_t temp_val = val;
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ } 
   
   for( len = 0; temp_val != 0; len++ )
 3d4:	1b 82       	std	Y+3, r1	; 0x03
   {	// Length of input "string"
      temp_val /= 10;
 3d6:	0f 2e       	mov	r0, r31
 3d8:	fa e0       	ldi	r31, 0x0A	; 10
 3da:	8f 2e       	mov	r8, r31
 3dc:	91 2c       	mov	r9, r1
 3de:	a1 2c       	mov	r10, r1
 3e0:	b1 2c       	mov	r11, r1
 3e2:	f0 2d       	mov	r31, r0
 3e4:	a5 01       	movw	r20, r10
 3e6:	94 01       	movw	r18, r8
 3e8:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodsi4>
 3ec:	ca 01       	movw	r24, r20
 3ee:	b9 01       	movw	r22, r18
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ } 
   
   for( len = 0; temp_val != 0; len++ )
 3f0:	2b 81       	ldd	r18, Y+3	; 0x03
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	2b 83       	std	Y+3, r18	; 0x03
 3f6:	61 15       	cp	r22, r1
 3f8:	71 05       	cpc	r23, r1
 3fa:	81 05       	cpc	r24, r1
 3fc:	91 05       	cpc	r25, r1
 3fe:	91 f7       	brne	.-28     	; 0x3e4 <pdcUint+0x58>
 400:	42 2e       	mov	r4, r18
   
   temp_val = val;
   
     
    
   for( k = 1; k <= len; k++ )
 402:	22 23       	and	r18, r18
 404:	41 f1       	breq	.+80     	; 0x456 <pdcUint+0xca>
 406:	31 e0       	ldi	r19, 0x01	; 1
 408:	3a 83       	std	Y+2, r19	; 0x02
   {      
      temp_ch = temp_val % 10;
 40a:	0f 2e       	mov	r0, r31
 40c:	fa e0       	ldi	r31, 0x0A	; 10
 40e:	8f 2e       	mov	r8, r31
 410:	91 2c       	mov	r9, r1
 412:	a1 2c       	mov	r10, r1
 414:	b1 2c       	mov	r11, r1
 416:	f0 2d       	mov	r31, r0
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
 418:	39 80       	ldd	r3, Y+1	; 0x01
 41a:	32 0e       	add	r3, r18
   
     
    
   for( k = 1; k <= len; k++ )
   {      
      temp_ch = temp_val % 10;
 41c:	c7 01       	movw	r24, r14
 41e:	b6 01       	movw	r22, r12
 420:	a5 01       	movw	r20, r10
 422:	94 01       	movw	r18, r8
 424:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodsi4>
 428:	62 2e       	mov	r6, r18
 42a:	73 2e       	mov	r7, r19
 42c:	04 2f       	mov	r16, r20
 42e:	15 2f       	mov	r17, r21
 430:	86 2f       	mov	r24, r22
 432:	43 2d       	mov	r20, r3
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	49 1b       	sub	r20, r25
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
 438:	65 2d       	mov	r22, r5
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
      temp_val /= 10;
 440:	c6 2c       	mov	r12, r6
 442:	d7 2c       	mov	r13, r7
 444:	e0 2e       	mov	r14, r16
 446:	f1 2e       	mov	r15, r17
   
   temp_val = val;
   
     
    
   for( k = 1; k <= len; k++ )
 448:	ea 81       	ldd	r30, Y+2	; 0x02
 44a:	ef 5f       	subi	r30, 0xFF	; 255
 44c:	ea 83       	std	Y+2, r30	; 0x02
 44e:	4e 16       	cp	r4, r30
 450:	28 f7       	brcc	.-54     	; 0x41c <pdcUint+0x90>
 452:	01 c0       	rjmp	.+2      	; 0x456 <pdcUint+0xca>
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ } 
   
   for( len = 0; temp_val != 0; len++ )
 454:	1b 82       	std	Y+3, r1	; 0x03
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
      temp_val /= 10;
   }

   if( len != length )
 456:	fb 81       	ldd	r31, Y+3	; 0x03
 458:	f2 15       	cp	r31, r2
 45a:	b9 f0       	breq	.+46     	; 0x48a <pdcUint+0xfe>
   {      
      for( k = 1; k <= (length - len); k++ )
 45c:	82 2d       	mov	r24, r2
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	7c 01       	movw	r14, r24
 462:	ef 1a       	sub	r14, r31
 464:	f1 08       	sbc	r15, r1
 466:	1e 14       	cp	r1, r14
 468:	1f 04       	cpc	r1, r15
 46a:	7c f4       	brge	.+30     	; 0x48a <pdcUint+0xfe>
 46c:	11 e0       	ldi	r17, 0x01	; 1
      {
         pdcChar( ' ', pos_Y, (pos_X+length-k) );         
 46e:	39 81       	ldd	r19, Y+1	; 0x01
 470:	23 0e       	add	r2, r19
 472:	42 2d       	mov	r20, r2
 474:	41 1b       	sub	r20, r17
 476:	65 2d       	mov	r22, r5
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
      temp_val /= 10;
   }

   if( len != length )
   {      
      for( k = 1; k <= (length - len); k++ )
 47e:	1f 5f       	subi	r17, 0xFF	; 255
 480:	81 2f       	mov	r24, r17
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	e8 16       	cp	r14, r24
 486:	f9 06       	cpc	r15, r25
 488:	a4 f7       	brge	.-24     	; 0x472 <pdcUint+0xe6>
         pdcChar( ' ', pos_Y, (pos_X+length-k) );         
      }
   }
   else{	/*ERROR!!!!!! */ }
   
}
 48a:	23 96       	adiw	r28, 0x03	; 3
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	de bf       	out	0x3e, r29	; 62
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	9f 90       	pop	r9
 4a6:	8f 90       	pop	r8
 4a8:	7f 90       	pop	r7
 4aa:	6f 90       	pop	r6
 4ac:	5f 90       	pop	r5
 4ae:	4f 90       	pop	r4
 4b0:	3f 90       	pop	r3
 4b2:	2f 90       	pop	r2
 4b4:	08 95       	ret

000004b6 <main>:

//****************************************************************************************
int main(void)
{     
   
   boardInit();                        // Board peripherals initialization       
 4b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <boardInit>
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <main+0x4>

000004bc <serialSendC>:

void serialSendC ( const uint8_t* data, uint8_t len )
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
 4bc:	20 91 02 20 	lds	r18, 0x2002
 4c0:	30 91 03 20 	lds	r19, 0x2003
 4c4:	ed e1       	ldi	r30, 0x1D	; 29
 4c6:	f4 e2       	ldi	r31, 0x24	; 36
 4c8:	e2 1b       	sub	r30, r18
 4ca:	f3 0b       	sbc	r31, r19
 4cc:	46 2f       	mov	r20, r22
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	4e 17       	cp	r20, r30
 4d2:	5f 07       	cpc	r21, r31
 4d4:	a4 f5       	brge	.+104    	; 0x53e <serialSendC+0x82>
   {
      for ( uint8_t i = 0; i < len; i++ )
 4d6:	66 23       	and	r22, r22
 4d8:	c9 f0       	breq	.+50     	; 0x50c <serialSendC+0x50>
 4da:	a8 2f       	mov	r26, r24
 4dc:	b9 2f       	mov	r27, r25
 4de:	52 2f       	mov	r21, r18
 4e0:	43 2f       	mov	r20, r19
      {
         *txHead = *data;
 4e2:	9d 91       	ld	r25, X+
 4e4:	e5 2f       	mov	r30, r21
 4e6:	f4 2f       	mov	r31, r20
 4e8:	91 93       	st	Z+, r25
 4ea:	9e 2f       	mov	r25, r30
 4ec:	92 1b       	sub	r25, r18
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 4ee:	96 17       	cp	r25, r22
 4f0:	18 f4       	brcc	.+6      	; 0x4f8 <serialSendC+0x3c>
      {
         *txHead = *data;
         txHead++;
 4f2:	5e 2f       	mov	r21, r30
 4f4:	4f 2f       	mov	r20, r31
 4f6:	f5 cf       	rjmp	.-22     	; 0x4e2 <serialSendC+0x26>
 4f8:	61 50       	subi	r22, 0x01	; 1
 4fa:	86 2f       	mov	r24, r22
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	28 0f       	add	r18, r24
 502:	39 1f       	adc	r19, r25
 504:	20 93 02 20 	sts	0x2002, r18
 508:	30 93 03 20 	sts	0x2003, r19
         data++;                 
      }
      
      if ( (txBuff == txTail) && (TRUE == initFlag) )       // Initial send
 50c:	80 91 00 20 	lds	r24, 0x2000
 510:	90 91 01 20 	lds	r25, 0x2001
 514:	8d 51       	subi	r24, 0x1D	; 29
 516:	93 42       	sbci	r25, 0x23	; 35
 518:	b1 f4       	brne	.+44     	; 0x546 <serialSendC+0x8a>
 51a:	80 91 1c 23 	lds	r24, 0x231C
 51e:	88 23       	and	r24, r24
 520:	91 f0       	breq	.+36     	; 0x546 <serialSendC+0x8a>
      {        
         USARTC0.DATA = *txTail;    // First character sent starts transmission
 522:	80 91 1d 23 	lds	r24, 0x231D
 526:	80 93 c0 08 	sts	0x08C0, r24
         txTail++;
 52a:	80 91 00 20 	lds	r24, 0x2000
 52e:	90 91 01 20 	lds	r25, 0x2001
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	80 93 00 20 	sts	0x2000, r24
 538:	90 93 01 20 	sts	0x2001, r25
 53c:	08 95       	ret
      }                
   }
   else
   {
      // Overflow or data too big  
      DEB_3_SET();    
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	e0 e6       	ldi	r30, 0x60	; 96
 542:	f6 e0       	ldi	r31, 0x06	; 6
 544:	85 83       	std	Z+5, r24	; 0x05
 546:	08 95       	ret

00000548 <serialInitC>:
// Serial on PORTC initialization:
void serialInitC ( void )
{
   // PORTC configuration:
   
   PORTC.REMAP &= ~PORT_USART0_bm;       // Don't remap ports from 0-3 to 4-7   
 548:	e0 e4       	ldi	r30, 0x40	; 64
 54a:	f6 e0       	ldi	r31, 0x06	; 6
 54c:	86 85       	ldd	r24, Z+14	; 0x0e
 54e:	8f 7e       	andi	r24, 0xEF	; 239
 550:	86 87       	std	Z+14, r24	; 0x0e
   PORTC.DIRSET = CFG_TXC0_PIN_MASK;     // Output for Tx (pin must be manually set to output)
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	81 83       	std	Z+1, r24	; 0x01
   PORTC.DIRCLR = CFG_RXC0_PIN_MASK;     // Input for Rx
 556:	94 e0       	ldi	r25, 0x04	; 4
 558:	92 83       	std	Z+2, r25	; 0x02
   
   // CTRLC:
   USARTC0.CTRLC =  ( USART_CMODE_ASYNCHRONOUS_gc |    // Asynchronous transfer mode
 55a:	e0 ec       	ldi	r30, 0xC0	; 192
 55c:	f8 e0       	ldi	r31, 0x08	; 8
 55e:	93 e0       	ldi	r25, 0x03	; 3
 560:	94 83       	std	Z+4, r25	; 0x04
                      USART_PMODE_DISABLED_gc     |    // Parity mode disabled
                      USART_CHSIZE_8BIT_gc        );   // 8b per frame                   
                      
   USARTC0.CTRLC &= ~USART_SBMODE_bm;  // Stop bit disabled
 562:	94 81       	ldd	r25, Z+4	; 0x04
 564:	97 7f       	andi	r25, 0xF7	; 247
 566:	94 83       	std	Z+4, r25	; 0x04
   
   // Baud rate
       
   USARTC0.BAUDCTRLA =  BSEL_BAUD_VAL;           // 8 LSB of BSEL
 568:	99 e8       	ldi	r25, 0x89	; 137
 56a:	96 83       	std	Z+6, r25	; 0x06
   USARTC0.BAUDCTRLB =  BSCALE_BAUD_VAL | ((BSEL_BAUD_VAL >> 8) & 0x0F) ;           // 4 MSB of BSEL and BSCALE    
 56c:	90 ed       	ldi	r25, 0xD0	; 208
 56e:	97 83       	std	Z+7, r25	; 0x07
       
        
   // Priorities from common.h:
   USARTC0.CTRLA = CFG_PRIO_USARTC0;  
 570:	82 83       	std	Z+2, r24	; 0x02
         
   USARTC0.CTRLB |= ( USART_TXEN_bm |    // Transmitter enabled
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	8c 60       	ori	r24, 0x0C	; 12
 576:	83 83       	std	Z+3, r24	; 0x03
                      //USART_RXEN_bm |    // Receiver enabled
                      USART_CLK2X_bm );  // Enabling 2x clock    
                       
   USARTC0.STATUS &= ~USART_TXCIF_bm;    // Clearing tx interrupt flag
 578:	81 81       	ldd	r24, Z+1	; 0x01
 57a:	8f 7b       	andi	r24, 0xBF	; 191
 57c:	81 83       	std	Z+1, r24	; 0x01
   
   LOG_TXT ( ">>init<<   Serial initialized\n", 31 );
 57e:	6f e1       	ldi	r22, 0x1F	; 31
 580:	88 e6       	ldi	r24, 0x68	; 104
 582:	92 e2       	ldi	r25, 0x22	; 34
 584:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   
   initFlag = TRUE;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 1c 23 	sts	0x231C, r24
 58e:	08 95       	ret

00000590 <__vector_25>:

//****************************************************************************************
// Serial Tx complete ISR ( tx flag is cleared automatically):

ISR ( USARTC0_TXC_vect )
{             
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	8f 93       	push	r24
 59c:	9f 93       	push	r25
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
   if ( txTail < txHead )
 5a2:	e0 91 00 20 	lds	r30, 0x2000
 5a6:	f0 91 01 20 	lds	r31, 0x2001
 5aa:	80 91 02 20 	lds	r24, 0x2002
 5ae:	90 91 03 20 	lds	r25, 0x2003
 5b2:	e8 17       	cp	r30, r24
 5b4:	f9 07       	cpc	r31, r25
 5b6:	68 f4       	brcc	.+26     	; 0x5d2 <__vector_25+0x42>
   {
      USARTC0.DATA = *txTail;
 5b8:	80 81       	ld	r24, Z
 5ba:	80 93 c0 08 	sts	0x08C0, r24
      txTail++;      
 5be:	80 91 00 20 	lds	r24, 0x2000
 5c2:	90 91 01 20 	lds	r25, 0x2001
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	80 93 00 20 	sts	0x2000, r24
 5cc:	90 93 01 20 	sts	0x2001, r25
 5d0:	0a c0       	rjmp	.+20     	; 0x5e6 <__vector_25+0x56>
   }
   else // All of data from buffer is send
   {
      txTail = txBuff;
 5d2:	8d e1       	ldi	r24, 0x1D	; 29
 5d4:	93 e2       	ldi	r25, 0x23	; 35
 5d6:	80 93 00 20 	sts	0x2000, r24
 5da:	90 93 01 20 	sts	0x2001, r25
      txHead = txTail;    
 5de:	80 93 02 20 	sts	0x2002, r24
 5e2:	90 93 03 20 	sts	0x2003, r25
   } 
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	0f 90       	pop	r0
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	0f 90       	pop	r0
 5f4:	1f 90       	pop	r1
 5f6:	18 95       	reti

000005f8 <__vector_23>:



//****************************************************************************************
ISR ( USARTC0_RXC_vect )
{   
 5f8:	1f 92       	push	r1
 5fa:	0f 92       	push	r0
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	0f 92       	push	r0
 600:	11 24       	eor	r1, r1
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <spiInit>:
*/


//****************************************************************************************
void spiInit ( void )
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
   
   // Pins as output: 
   PORTC.DIRSET |= ( CFG_RST_PIN_MASK  |
 610:	e0 e4       	ldi	r30, 0x40	; 64
 612:	f6 e0       	ldi	r31, 0x06	; 6
 614:	81 81       	ldd	r24, Z+1	; 0x01
 616:	83 6b       	ori	r24, 0xB3	; 179
 618:	81 83       	std	Z+1, r24	; 0x01
                     CFG_DC_PIN_MASK   |
                     CFG_MOSI_PIN_MASK |
                     CFG_SCK_PIN_MASK  ); 
   
   // Unbuffered mode (simple tx use)
   SPIC.CTRLB = SPI_SSD_bm;      // Slave select disable (master mode) 
 61a:	c0 ee       	ldi	r28, 0xE0	; 224
 61c:	d8 e0       	ldi	r29, 0x08	; 8
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	8c 83       	std	Y+4, r24	; 0x04
   
   // TODO: DMA?
   SPIC.CTRL = ( SPI_CLK2X_bm    |     // Clock Double
 622:	80 e9       	ldi	r24, 0x90	; 144
 624:	88 83       	st	Y, r24
                 SPI_MASTER_bm   );    // Master mode               
   
  // SPIC.INTCTRL = CFG_PRIO_SPI;        // Interrupt level from boardCfg.h     

                                
   LOG_TXT ( ">>init<<   SPI initialized\n", 28 );
 626:	6c e1       	ldi	r22, 0x1C	; 28
 628:	87 e8       	ldi	r24, 0x87	; 135
 62a:	92 e2       	ldi	r25, 0x22	; 34
 62c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   SPI_EN(); // wywalic
 630:	88 81       	ld	r24, Y
 632:	80 64       	ori	r24, 0x40	; 64
 634:	88 83       	st	Y, r24
}
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <spiRegisterTxEndCB>:


//****************************************************************************************
void spiRegisterTxEndCB ( pfnTxEnd cb)
{
   txEndCB = cb;   
 63c:	80 93 1d 24 	sts	0x241D, r24
 640:	90 93 1e 24 	sts	0x241E, r25
 644:	08 95       	ret

00000646 <__vector_22>:
}


//****************************************************************************************
ISR ( SPIC_INT_vect )
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
   // Is there critical section necessary ?
   if ( txTail < txHead )
 668:	80 91 04 20 	lds	r24, 0x2004
 66c:	90 91 05 20 	lds	r25, 0x2005
 670:	20 91 06 20 	lds	r18, 0x2006
 674:	30 91 07 20 	lds	r19, 0x2007
 678:	82 17       	cp	r24, r18
 67a:	93 07       	cpc	r25, r19
 67c:	58 f4       	brcc	.+22     	; 0x694 <__vector_22+0x4e>
   {
      SPIC.DATA = *txTail;
 67e:	fc 01       	movw	r30, r24
 680:	81 91       	ld	r24, Z+
 682:	a0 ee       	ldi	r26, 0xE0	; 224
 684:	b8 e0       	ldi	r27, 0x08	; 8
 686:	13 96       	adiw	r26, 0x03	; 3
 688:	8c 93       	st	X, r24
      txTail++;
 68a:	e0 93 04 20 	sts	0x2004, r30
 68e:	f0 93 05 20 	sts	0x2005, r31
 692:	16 c0       	rjmp	.+44     	; 0x6c0 <__vector_22+0x7a>
   }
   else // All of data from buffer are send
   {
      txTail = txBuff;
 694:	8f e1       	ldi	r24, 0x1F	; 31
 696:	94 e2       	ldi	r25, 0x24	; 36
 698:	80 93 04 20 	sts	0x2004, r24
 69c:	90 93 05 20 	sts	0x2005, r25
      txHead = txTail;
 6a0:	80 93 06 20 	sts	0x2006, r24
 6a4:	90 93 07 20 	sts	0x2007, r25
      
      if ( NULL != txEndCB )
 6a8:	e0 91 1d 24 	lds	r30, 0x241D
 6ac:	f0 91 1e 24 	lds	r31, 0x241E
 6b0:	30 97       	sbiw	r30, 0x00	; 0
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_22+0x70>
      {
         txEndCB();         
 6b4:	09 95       	icall
      }
      
      SPI_DIS();     // Disabling SPI (only tx is used)
 6b6:	e0 ee       	ldi	r30, 0xE0	; 224
 6b8:	f8 e0       	ldi	r31, 0x08	; 8
 6ba:	80 81       	ld	r24, Z
 6bc:	8f 7b       	andi	r24, 0xBF	; 191
 6be:	80 83       	st	Z, r24
   }
 
 6c0:	ff 91       	pop	r31
 6c2:	ef 91       	pop	r30
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <systemMeasEnd>:


//****************************************************************************************
void systemMeasEnd ( uint16_t val )
{
   actMeas = ((((uint32_t)val)*ADC_DIVIDER)/65535);   // For 16b res  
 6e2:	9c 01       	movw	r18, r24
 6e4:	a8 ee       	ldi	r26, 0xE8	; 232
 6e6:	b3 e0       	ldi	r27, 0x03	; 3
 6e8:	0e 94 b5 04 	call	0x96a	; 0x96a <__umulhisi3>
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	3f ef       	ldi	r19, 0xFF	; 255
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodsi4>
 6f8:	20 93 7e 26 	sts	0x267E, r18
 6fc:	30 93 7f 26 	sts	0x267F, r19
 700:	08 95       	ret

00000702 <systemPeriodicRefresh>:
/*****************************************************************************************
   LOCAL FUNCTIONS DEFINITIONS
*/

static void systemPeriodicRefresh ( void )
{   
 702:	af 92       	push	r10
 704:	bf 92       	push	r11
 706:	cf 92       	push	r12
 708:	df 92       	push	r13
 70a:	ef 92       	push	r14
 70c:	ff 92       	push	r15
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	c0 54       	subi	r28, 0x40	; 64
 71c:	d1 09       	sbc	r29, r1
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	de bf       	out	0x3e, r29	; 62
}

//****************************************************************************************
static void systemTimeTickUpdate ( void )
{
   sysTime.sec ++;
 722:	80 91 7d 26 	lds	r24, 0x267D
 726:	8f 5f       	subi	r24, 0xFF	; 255
   if ( sysTime.sec >=60 )  
 728:	8c 33       	cpi	r24, 0x3C	; 60
 72a:	18 f4       	brcc	.+6      	; 0x732 <systemPeriodicRefresh+0x30>
}

//****************************************************************************************
static void systemTimeTickUpdate ( void )
{
   sysTime.sec ++;
 72c:	80 93 7d 26 	sts	0x267D, r24
 730:	07 c0       	rjmp	.+14     	; 0x740 <systemPeriodicRefresh+0x3e>
   if ( sysTime.sec >=60 )  
   { 
      sysTime.sec = 0;
 732:	10 92 7d 26 	sts	0x267D, r1
      sysTime.min ++; 
 736:	ec e7       	ldi	r30, 0x7C	; 124
 738:	f6 e2       	ldi	r31, 0x26	; 38
 73a:	80 81       	ld	r24, Z
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	80 83       	st	Z, r24
   }
   if ( sysTime.min >=60 )
 740:	80 91 7c 26 	lds	r24, 0x267C
 744:	8c 33       	cpi	r24, 0x3C	; 60
 746:	38 f0       	brcs	.+14     	; 0x756 <systemPeriodicRefresh+0x54>
   { 
      sysTime.min = 0;
 748:	10 92 7c 26 	sts	0x267C, r1
      sysTime.hour ++; 
 74c:	eb e7       	ldi	r30, 0x7B	; 123
 74e:	f6 e2       	ldi	r31, 0x26	; 38
 750:	80 81       	ld	r24, Z
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	80 83       	st	Z, r24
   } 
   if ( sysTime.hour >=24 ) 
 756:	80 91 7b 26 	lds	r24, 0x267B
 75a:	88 31       	cpi	r24, 0x18	; 24
 75c:	38 f0       	brcs	.+14     	; 0x76c <systemPeriodicRefresh+0x6a>
   { 
      sysTime.hour = 0;
 75e:	10 92 7b 26 	sts	0x267B, r1
      sysTime.day ++; 
 762:	ea e7       	ldi	r30, 0x7A	; 122
 764:	f6 e2       	ldi	r31, 0x26	; 38
 766:	80 81       	ld	r24, Z
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 83       	st	Z, r24

//****************************************************************************************
static void systemSerialLog ( void )
{
   char strToLog [64];
   uint8_t len =  sprintf ( strToLog, "[%.2u:%.2u:%.2u] %.4u[mV] \n", sysTime.hour, sysTime.min, sysTime.sec, actMeas );
 76c:	80 91 7e 26 	lds	r24, 0x267E
 770:	90 91 7f 26 	lds	r25, 0x267F
 774:	9f 93       	push	r25
 776:	8f 93       	push	r24
 778:	0f 2e       	mov	r0, r31
 77a:	fd e7       	ldi	r31, 0x7D	; 125
 77c:	af 2e       	mov	r10, r31
 77e:	f6 e2       	ldi	r31, 0x26	; 38
 780:	bf 2e       	mov	r11, r31
 782:	f0 2d       	mov	r31, r0
 784:	f5 01       	movw	r30, r10
 786:	80 81       	ld	r24, Z
 788:	1f 92       	push	r1
 78a:	8f 93       	push	r24
 78c:	0f 2e       	mov	r0, r31
 78e:	fc e7       	ldi	r31, 0x7C	; 124
 790:	cf 2e       	mov	r12, r31
 792:	f6 e2       	ldi	r31, 0x26	; 38
 794:	df 2e       	mov	r13, r31
 796:	f0 2d       	mov	r31, r0
 798:	f6 01       	movw	r30, r12
 79a:	80 81       	ld	r24, Z
 79c:	1f 92       	push	r1
 79e:	8f 93       	push	r24
 7a0:	0f 2e       	mov	r0, r31
 7a2:	fb e7       	ldi	r31, 0x7B	; 123
 7a4:	ef 2e       	mov	r14, r31
 7a6:	f6 e2       	ldi	r31, 0x26	; 38
 7a8:	ff 2e       	mov	r15, r31
 7aa:	f0 2d       	mov	r31, r0
 7ac:	f7 01       	movw	r30, r14
 7ae:	80 81       	ld	r24, Z
 7b0:	1f 92       	push	r1
 7b2:	8f 93       	push	r24
 7b4:	83 ea       	ldi	r24, 0xA3	; 163
 7b6:	92 e2       	ldi	r25, 0x22	; 34
 7b8:	9f 93       	push	r25
 7ba:	8f 93       	push	r24
 7bc:	8e 01       	movw	r16, r28
 7be:	0f 5f       	subi	r16, 0xFF	; 255
 7c0:	1f 4f       	sbci	r17, 0xFF	; 255
 7c2:	1f 93       	push	r17
 7c4:	0f 93       	push	r16
 7c6:	0e 94 c4 04 	call	0x988	; 0x988 <sprintf>
   LOG_TXT ( strToLog, len );
 7ca:	68 2f       	mov	r22, r24
 7cc:	c8 01       	movw	r24, r16
 7ce:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
//****************************************************************************************
static void systemDisplayVals ( void )
{
   
   // Time:
   char str[14] = {"              "};
 7d2:	8e e0       	ldi	r24, 0x0E	; 14
 7d4:	e8 e0       	ldi	r30, 0x08	; 8
 7d6:	f0 e2       	ldi	r31, 0x20	; 32
 7d8:	d8 01       	movw	r26, r16
 7da:	01 90       	ld	r0, Z+
 7dc:	0d 92       	st	X+, r0
 7de:	8a 95       	dec	r24
 7e0:	e1 f7       	brne	.-8      	; 0x7da <systemPeriodicRefresh+0xd8>
   sprintf ( str, "%.2u:%.2u:%.2u", sysTime.hour, sysTime.min, sysTime.sec );
 7e2:	f5 01       	movw	r30, r10
 7e4:	80 81       	ld	r24, Z
 7e6:	1f 92       	push	r1
 7e8:	8f 93       	push	r24
 7ea:	f6 01       	movw	r30, r12
 7ec:	80 81       	ld	r24, Z
 7ee:	1f 92       	push	r1
 7f0:	8f 93       	push	r24
 7f2:	f7 01       	movw	r30, r14
 7f4:	80 81       	ld	r24, Z
 7f6:	1f 92       	push	r1
 7f8:	8f 93       	push	r24
 7fa:	8f eb       	ldi	r24, 0xBF	; 191
 7fc:	92 e2       	ldi	r25, 0x22	; 34
 7fe:	9f 93       	push	r25
 800:	8f 93       	push	r24
 802:	1f 93       	push	r17
 804:	0f 93       	push	r16
 806:	0e 94 c4 04 	call	0x988	; 0x988 <sprintf>
   pdcLine( str, 0 );
 80a:	60 e0       	ldi	r22, 0x00	; 0
 80c:	c8 01       	movw	r24, r16
 80e:	0e 94 a8 01 	call	0x350	; 0x350 <pdcLine>
   
   // Measured values:
   pdcUint ( actMeas, LCD_ACTMEAS_POS_Y, 6, 5 );
 812:	80 91 7e 26 	lds	r24, 0x267E
 816:	90 91 7f 26 	lds	r25, 0x267F
 81a:	25 e0       	ldi	r18, 0x05	; 5
 81c:	46 e0       	ldi	r20, 0x06	; 6
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	0e 94 c6 01 	call	0x38c	; 0x38c <pdcUint>
     
   systemTimeTickUpdate();
   systemSerialLog();  
   systemDisplayVals();
   
   adcStartChToGnd();
 824:	0e 94 98 00 	call	0x130	; 0x130 <adcStartChToGnd>
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	de bf       	out	0x3e, r29	; 62
}
 82c:	c0 5c       	subi	r28, 0xC0	; 192
 82e:	df 4f       	sbci	r29, 0xFF	; 255
 830:	cd bf       	out	0x3d, r28	; 61
 832:	de bf       	out	0x3e, r29	; 62
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ff 90       	pop	r15
 83e:	ef 90       	pop	r14
 840:	df 90       	pop	r13
 842:	cf 90       	pop	r12
 844:	bf 90       	pop	r11
 846:	af 90       	pop	r10
 848:	08 95       	ret

0000084a <systemInit>:


//****************************************************************************************
void systemInit ( void ) 
{
   adcRegisterEndCb( systemMeasEnd );      // Registering CB
 84a:	81 e7       	ldi	r24, 0x71	; 113
 84c:	93 e0       	ldi	r25, 0x03	; 3
 84e:	0e 94 a4 00 	call	0x148	; 0x148 <adcRegisterEndCb>
   timerRegisterRtcCB ( systemPeriodicRefresh );
 852:	81 e8       	ldi	r24, 0x81	; 129
 854:	93 e0       	ldi	r25, 0x03	; 3
 856:	0e 94 61 04 	call	0x8c2	; 0x8c2 <timerRegisterRtcCB>
}

//****************************************************************************************
static void systemDisplayBackground ( void )
{
   pdcLine ( "Act:        mV", LCD_ACTMEAS_POS_Y );
 85a:	61 e0       	ldi	r22, 0x01	; 1
 85c:	8e ec       	ldi	r24, 0xCE	; 206
 85e:	92 e2       	ldi	r25, 0x22	; 34
 860:	0e 94 a8 01 	call	0x350	; 0x350 <pdcLine>
   adcRegisterEndCb( systemMeasEnd );      // Registering CB
   timerRegisterRtcCB ( systemPeriodicRefresh );
   
   systemDisplayBackground();
   
   LOG_TXT ( ">>init<<   System initialized\n", 31 );
 864:	6f e1       	ldi	r22, 0x1F	; 31
 866:	8d ed       	ldi	r24, 0xDD	; 221
 868:	92 e2       	ldi	r25, 0x22	; 34
 86a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 86e:	08 95       	ret

00000870 <timerInit>:

void timerInit (void )
{
   // RTC:
   
   if ( !(OSC.CTRL & OSC_RC32KEN_bm) )          // If disabled
 870:	80 91 50 00 	lds	r24, 0x0050
 874:	82 fd       	sbrc	r24, 2
 876:	08 c0       	rjmp	.+16     	; 0x888 <timerInit+0x18>
   {
      OSC.CTRL |= OSC_RC32KEN_bm;               // Enabling 32kHz clock
 878:	e0 e5       	ldi	r30, 0x50	; 80
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	84 60       	ori	r24, 0x04	; 4
 880:	80 83       	st	Z, r24
      while (!(OSC.STATUS & OSC_RC32KRDY_bm));  // Waiting for clock   
 882:	81 81       	ldd	r24, Z+1	; 0x01
 884:	82 ff       	sbrs	r24, 2
 886:	fd cf       	rjmp	.-6      	; 0x882 <timerInit+0x12>
   }   
   
   while ( RTC.STATUS & RTC_SYNCBUSY_bm ){}      // Wait until SYNCBUSY is cleared
 888:	e0 e0       	ldi	r30, 0x00	; 0
 88a:	f4 e0       	ldi	r31, 0x04	; 4
 88c:	81 81       	ldd	r24, Z+1	; 0x01
 88e:	80 fd       	sbrc	r24, 0
 890:	fd cf       	rjmp	.-6      	; 0x88c <timerInit+0x1c>
   RTC.PER = RTC_PERIOD_S * 31,25;                // 32ms period
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	f4 e0       	ldi	r31, 0x04	; 4
 896:	8f e1       	ldi	r24, 0x1F	; 31
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	82 87       	std	Z+10, r24	; 0x0a
 89c:	93 87       	std	Z+11, r25	; 0x0b
   
   RTC.INTCTRL = CFG_PRIO_RTC_OVFL;     // from boardCfg.h
 89e:	83 e0       	ldi	r24, 0x03	; 3
 8a0:	82 83       	std	Z+2, r24	; 0x02
   
   while ( RTC.STATUS & RTC_SYNCBUSY_bm ){}  // Wait until SYNCBUSY is cleared 
 8a2:	81 81       	ldd	r24, Z+1	; 0x01
 8a4:	80 fd       	sbrc	r24, 0
 8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <timerInit+0x32>
   RTC.CTRL = RTC_PRESCALER_DIV1024_gc;      // For 1s resolution
 8a8:	87 e0       	ldi	r24, 0x07	; 7
 8aa:	80 93 00 04 	sts	0x0400, r24

   
   CLK.RTCCTRL = CLK_RTCEN_bm           // RTC source enabled
 8ae:	8d e0       	ldi	r24, 0x0D	; 13
 8b0:	e0 e4       	ldi	r30, 0x40	; 64
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	83 83       	std	Z+3, r24	; 0x03
               | CLK_RTCSRC_RCOSC32_gc;     // 32k ULP for RTC
   


   LOG_TXT ( ">>init<<   Timer initialized\n", 30 );
 8b6:	6e e1       	ldi	r22, 0x1E	; 30
 8b8:	8c ef       	ldi	r24, 0xFC	; 252
 8ba:	92 e2       	ldi	r25, 0x22	; 34
 8bc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 8c0:	08 95       	ret

000008c2 <timerRegisterRtcCB>:


//****************************************************************************************
void timerRegisterRtcCB ( pfnRTC cb )
{
   rtcCB = cb;   
 8c2:	80 93 80 26 	sts	0x2680, r24
 8c6:	90 93 81 26 	sts	0x2681, r25
 8ca:	08 95       	ret

000008cc <__vector_7>:
}


//****************************************************************************************
ISR ( RTC_OVF_vect )
{
 8cc:	1f 92       	push	r1
 8ce:	0f 92       	push	r0
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	0f 92       	push	r0
 8d4:	11 24       	eor	r1, r1
 8d6:	2f 93       	push	r18
 8d8:	3f 93       	push	r19
 8da:	4f 93       	push	r20
 8dc:	5f 93       	push	r21
 8de:	6f 93       	push	r22
 8e0:	7f 93       	push	r23
 8e2:	8f 93       	push	r24
 8e4:	9f 93       	push	r25
 8e6:	af 93       	push	r26
 8e8:	bf 93       	push	r27
 8ea:	ef 93       	push	r30
 8ec:	ff 93       	push	r31
   DEB_2_TGL();
 8ee:	80 e4       	ldi	r24, 0x40	; 64
 8f0:	e0 e6       	ldi	r30, 0x60	; 96
 8f2:	f6 e0       	ldi	r31, 0x06	; 6
 8f4:	87 83       	std	Z+7, r24	; 0x07
   
   if ( NULL != rtcCB )
 8f6:	e0 91 80 26 	lds	r30, 0x2680
 8fa:	f0 91 81 26 	lds	r31, 0x2681
 8fe:	30 97       	sbiw	r30, 0x00	; 0
 900:	09 f0       	breq	.+2      	; 0x904 <__vector_7+0x38>
   {
      rtcCB();
 902:	09 95       	icall
   }
}
 904:	ff 91       	pop	r31
 906:	ef 91       	pop	r30
 908:	bf 91       	pop	r27
 90a:	af 91       	pop	r26
 90c:	9f 91       	pop	r25
 90e:	8f 91       	pop	r24
 910:	7f 91       	pop	r23
 912:	6f 91       	pop	r22
 914:	5f 91       	pop	r21
 916:	4f 91       	pop	r20
 918:	3f 91       	pop	r19
 91a:	2f 91       	pop	r18
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	0f 90       	pop	r0
 922:	1f 90       	pop	r1
 924:	18 95       	reti

00000926 <__udivmodsi4>:
 926:	a1 e2       	ldi	r26, 0x21	; 33
 928:	1a 2e       	mov	r1, r26
 92a:	aa 1b       	sub	r26, r26
 92c:	bb 1b       	sub	r27, r27
 92e:	fd 01       	movw	r30, r26
 930:	0d c0       	rjmp	.+26     	; 0x94c <__udivmodsi4_ep>

00000932 <__udivmodsi4_loop>:
 932:	aa 1f       	adc	r26, r26
 934:	bb 1f       	adc	r27, r27
 936:	ee 1f       	adc	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	a2 17       	cp	r26, r18
 93c:	b3 07       	cpc	r27, r19
 93e:	e4 07       	cpc	r30, r20
 940:	f5 07       	cpc	r31, r21
 942:	20 f0       	brcs	.+8      	; 0x94c <__udivmodsi4_ep>
 944:	a2 1b       	sub	r26, r18
 946:	b3 0b       	sbc	r27, r19
 948:	e4 0b       	sbc	r30, r20
 94a:	f5 0b       	sbc	r31, r21

0000094c <__udivmodsi4_ep>:
 94c:	66 1f       	adc	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	1a 94       	dec	r1
 956:	69 f7       	brne	.-38     	; 0x932 <__udivmodsi4_loop>
 958:	60 95       	com	r22
 95a:	70 95       	com	r23
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	9b 01       	movw	r18, r22
 962:	ac 01       	movw	r20, r24
 964:	bd 01       	movw	r22, r26
 966:	cf 01       	movw	r24, r30
 968:	08 95       	ret

0000096a <__umulhisi3>:
 96a:	a2 9f       	mul	r26, r18
 96c:	b0 01       	movw	r22, r0
 96e:	b3 9f       	mul	r27, r19
 970:	c0 01       	movw	r24, r0
 972:	a3 9f       	mul	r26, r19
 974:	70 0d       	add	r23, r0
 976:	81 1d       	adc	r24, r1
 978:	11 24       	eor	r1, r1
 97a:	91 1d       	adc	r25, r1
 97c:	b2 9f       	mul	r27, r18
 97e:	70 0d       	add	r23, r0
 980:	81 1d       	adc	r24, r1
 982:	11 24       	eor	r1, r1
 984:	91 1d       	adc	r25, r1
 986:	08 95       	ret

00000988 <sprintf>:
 988:	ae e0       	ldi	r26, 0x0E	; 14
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	ea ec       	ldi	r30, 0xCA	; 202
 98e:	f4 e0       	ldi	r31, 0x04	; 4
 990:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__prologue_saves__+0x1c>
 994:	0d 89       	ldd	r16, Y+21	; 0x15
 996:	1e 89       	ldd	r17, Y+22	; 0x16
 998:	86 e0       	ldi	r24, 0x06	; 6
 99a:	8c 83       	std	Y+4, r24	; 0x04
 99c:	09 83       	std	Y+1, r16	; 0x01
 99e:	1a 83       	std	Y+2, r17	; 0x02
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f e7       	ldi	r25, 0x7F	; 127
 9a4:	8d 83       	std	Y+5, r24	; 0x05
 9a6:	9e 83       	std	Y+6, r25	; 0x06
 9a8:	ae 01       	movw	r20, r28
 9aa:	47 5e       	subi	r20, 0xE7	; 231
 9ac:	5f 4f       	sbci	r21, 0xFF	; 255
 9ae:	6f 89       	ldd	r22, Y+23	; 0x17
 9b0:	78 8d       	ldd	r23, Y+24	; 0x18
 9b2:	ce 01       	movw	r24, r28
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <vfprintf>
 9ba:	ef 81       	ldd	r30, Y+7	; 0x07
 9bc:	f8 85       	ldd	r31, Y+8	; 0x08
 9be:	e0 0f       	add	r30, r16
 9c0:	f1 1f       	adc	r31, r17
 9c2:	10 82       	st	Z, r1
 9c4:	2e 96       	adiw	r28, 0x0e	; 14
 9c6:	e4 e0       	ldi	r30, 0x04	; 4
 9c8:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__epilogue_restores__+0x1c>

000009cc <vfprintf>:
 9cc:	ac e0       	ldi	r26, 0x0C	; 12
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	ec ee       	ldi	r30, 0xEC	; 236
 9d2:	f4 e0       	ldi	r31, 0x04	; 4
 9d4:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__prologue_saves__>
 9d8:	7c 01       	movw	r14, r24
 9da:	6b 01       	movw	r12, r22
 9dc:	8a 01       	movw	r16, r20
 9de:	fc 01       	movw	r30, r24
 9e0:	16 82       	std	Z+6, r1	; 0x06
 9e2:	17 82       	std	Z+7, r1	; 0x07
 9e4:	83 81       	ldd	r24, Z+3	; 0x03
 9e6:	81 ff       	sbrs	r24, 1
 9e8:	bd c1       	rjmp	.+890    	; 0xd64 <vfprintf+0x398>
 9ea:	ce 01       	movw	r24, r28
 9ec:	01 96       	adiw	r24, 0x01	; 1
 9ee:	4c 01       	movw	r8, r24
 9f0:	f7 01       	movw	r30, r14
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	f6 01       	movw	r30, r12
 9f6:	93 fd       	sbrc	r25, 3
 9f8:	85 91       	lpm	r24, Z+
 9fa:	93 ff       	sbrs	r25, 3
 9fc:	81 91       	ld	r24, Z+
 9fe:	6f 01       	movw	r12, r30
 a00:	88 23       	and	r24, r24
 a02:	09 f4       	brne	.+2      	; 0xa06 <vfprintf+0x3a>
 a04:	ab c1       	rjmp	.+854    	; 0xd5c <vfprintf+0x390>
 a06:	85 32       	cpi	r24, 0x25	; 37
 a08:	39 f4       	brne	.+14     	; 0xa18 <vfprintf+0x4c>
 a0a:	93 fd       	sbrc	r25, 3
 a0c:	85 91       	lpm	r24, Z+
 a0e:	93 ff       	sbrs	r25, 3
 a10:	81 91       	ld	r24, Z+
 a12:	6f 01       	movw	r12, r30
 a14:	85 32       	cpi	r24, 0x25	; 37
 a16:	29 f4       	brne	.+10     	; 0xa22 <vfprintf+0x56>
 a18:	b7 01       	movw	r22, r14
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 a20:	e7 cf       	rjmp	.-50     	; 0x9f0 <vfprintf+0x24>
 a22:	51 2c       	mov	r5, r1
 a24:	31 2c       	mov	r3, r1
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	20 32       	cpi	r18, 0x20	; 32
 a2a:	a0 f4       	brcc	.+40     	; 0xa54 <vfprintf+0x88>
 a2c:	8b 32       	cpi	r24, 0x2B	; 43
 a2e:	69 f0       	breq	.+26     	; 0xa4a <vfprintf+0x7e>
 a30:	30 f4       	brcc	.+12     	; 0xa3e <vfprintf+0x72>
 a32:	80 32       	cpi	r24, 0x20	; 32
 a34:	59 f0       	breq	.+22     	; 0xa4c <vfprintf+0x80>
 a36:	83 32       	cpi	r24, 0x23	; 35
 a38:	69 f4       	brne	.+26     	; 0xa54 <vfprintf+0x88>
 a3a:	20 61       	ori	r18, 0x10	; 16
 a3c:	2c c0       	rjmp	.+88     	; 0xa96 <vfprintf+0xca>
 a3e:	8d 32       	cpi	r24, 0x2D	; 45
 a40:	39 f0       	breq	.+14     	; 0xa50 <vfprintf+0x84>
 a42:	80 33       	cpi	r24, 0x30	; 48
 a44:	39 f4       	brne	.+14     	; 0xa54 <vfprintf+0x88>
 a46:	21 60       	ori	r18, 0x01	; 1
 a48:	26 c0       	rjmp	.+76     	; 0xa96 <vfprintf+0xca>
 a4a:	22 60       	ori	r18, 0x02	; 2
 a4c:	24 60       	ori	r18, 0x04	; 4
 a4e:	23 c0       	rjmp	.+70     	; 0xa96 <vfprintf+0xca>
 a50:	28 60       	ori	r18, 0x08	; 8
 a52:	21 c0       	rjmp	.+66     	; 0xa96 <vfprintf+0xca>
 a54:	27 fd       	sbrc	r18, 7
 a56:	27 c0       	rjmp	.+78     	; 0xaa6 <vfprintf+0xda>
 a58:	30 ed       	ldi	r19, 0xD0	; 208
 a5a:	38 0f       	add	r19, r24
 a5c:	3a 30       	cpi	r19, 0x0A	; 10
 a5e:	78 f4       	brcc	.+30     	; 0xa7e <vfprintf+0xb2>
 a60:	26 ff       	sbrs	r18, 6
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <vfprintf+0xa4>
 a64:	fa e0       	ldi	r31, 0x0A	; 10
 a66:	5f 9e       	mul	r5, r31
 a68:	30 0d       	add	r19, r0
 a6a:	11 24       	eor	r1, r1
 a6c:	53 2e       	mov	r5, r19
 a6e:	13 c0       	rjmp	.+38     	; 0xa96 <vfprintf+0xca>
 a70:	8a e0       	ldi	r24, 0x0A	; 10
 a72:	38 9e       	mul	r3, r24
 a74:	30 0d       	add	r19, r0
 a76:	11 24       	eor	r1, r1
 a78:	33 2e       	mov	r3, r19
 a7a:	20 62       	ori	r18, 0x20	; 32
 a7c:	0c c0       	rjmp	.+24     	; 0xa96 <vfprintf+0xca>
 a7e:	8e 32       	cpi	r24, 0x2E	; 46
 a80:	21 f4       	brne	.+8      	; 0xa8a <vfprintf+0xbe>
 a82:	26 fd       	sbrc	r18, 6
 a84:	6b c1       	rjmp	.+726    	; 0xd5c <vfprintf+0x390>
 a86:	20 64       	ori	r18, 0x40	; 64
 a88:	06 c0       	rjmp	.+12     	; 0xa96 <vfprintf+0xca>
 a8a:	8c 36       	cpi	r24, 0x6C	; 108
 a8c:	11 f4       	brne	.+4      	; 0xa92 <vfprintf+0xc6>
 a8e:	20 68       	ori	r18, 0x80	; 128
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <vfprintf+0xca>
 a92:	88 36       	cpi	r24, 0x68	; 104
 a94:	41 f4       	brne	.+16     	; 0xaa6 <vfprintf+0xda>
 a96:	f6 01       	movw	r30, r12
 a98:	93 fd       	sbrc	r25, 3
 a9a:	85 91       	lpm	r24, Z+
 a9c:	93 ff       	sbrs	r25, 3
 a9e:	81 91       	ld	r24, Z+
 aa0:	6f 01       	movw	r12, r30
 aa2:	81 11       	cpse	r24, r1
 aa4:	c1 cf       	rjmp	.-126    	; 0xa28 <vfprintf+0x5c>
 aa6:	98 2f       	mov	r25, r24
 aa8:	9f 7d       	andi	r25, 0xDF	; 223
 aaa:	95 54       	subi	r25, 0x45	; 69
 aac:	93 30       	cpi	r25, 0x03	; 3
 aae:	28 f4       	brcc	.+10     	; 0xaba <vfprintf+0xee>
 ab0:	0c 5f       	subi	r16, 0xFC	; 252
 ab2:	1f 4f       	sbci	r17, 0xFF	; 255
 ab4:	ff e3       	ldi	r31, 0x3F	; 63
 ab6:	f9 83       	std	Y+1, r31	; 0x01
 ab8:	0d c0       	rjmp	.+26     	; 0xad4 <vfprintf+0x108>
 aba:	83 36       	cpi	r24, 0x63	; 99
 abc:	31 f0       	breq	.+12     	; 0xaca <vfprintf+0xfe>
 abe:	83 37       	cpi	r24, 0x73	; 115
 ac0:	71 f0       	breq	.+28     	; 0xade <vfprintf+0x112>
 ac2:	83 35       	cpi	r24, 0x53	; 83
 ac4:	09 f0       	breq	.+2      	; 0xac8 <vfprintf+0xfc>
 ac6:	5b c0       	rjmp	.+182    	; 0xb7e <vfprintf+0x1b2>
 ac8:	22 c0       	rjmp	.+68     	; 0xb0e <vfprintf+0x142>
 aca:	f8 01       	movw	r30, r16
 acc:	80 81       	ld	r24, Z
 ace:	89 83       	std	Y+1, r24	; 0x01
 ad0:	0e 5f       	subi	r16, 0xFE	; 254
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	44 24       	eor	r4, r4
 ad6:	43 94       	inc	r4
 ad8:	51 2c       	mov	r5, r1
 ada:	54 01       	movw	r10, r8
 adc:	15 c0       	rjmp	.+42     	; 0xb08 <vfprintf+0x13c>
 ade:	38 01       	movw	r6, r16
 ae0:	f2 e0       	ldi	r31, 0x02	; 2
 ae2:	6f 0e       	add	r6, r31
 ae4:	71 1c       	adc	r7, r1
 ae6:	f8 01       	movw	r30, r16
 ae8:	a0 80       	ld	r10, Z
 aea:	b1 80       	ldd	r11, Z+1	; 0x01
 aec:	26 ff       	sbrs	r18, 6
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <vfprintf+0x12a>
 af0:	65 2d       	mov	r22, r5
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <vfprintf+0x12e>
 af6:	6f ef       	ldi	r22, 0xFF	; 255
 af8:	7f ef       	ldi	r23, 0xFF	; 255
 afa:	c5 01       	movw	r24, r10
 afc:	2c 87       	std	Y+12, r18	; 0x0c
 afe:	0e 94 c3 06 	call	0xd86	; 0xd86 <strnlen>
 b02:	2c 01       	movw	r4, r24
 b04:	83 01       	movw	r16, r6
 b06:	2c 85       	ldd	r18, Y+12	; 0x0c
 b08:	2f 77       	andi	r18, 0x7F	; 127
 b0a:	22 2e       	mov	r2, r18
 b0c:	17 c0       	rjmp	.+46     	; 0xb3c <vfprintf+0x170>
 b0e:	38 01       	movw	r6, r16
 b10:	f2 e0       	ldi	r31, 0x02	; 2
 b12:	6f 0e       	add	r6, r31
 b14:	71 1c       	adc	r7, r1
 b16:	f8 01       	movw	r30, r16
 b18:	a0 80       	ld	r10, Z
 b1a:	b1 80       	ldd	r11, Z+1	; 0x01
 b1c:	26 ff       	sbrs	r18, 6
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x15a>
 b20:	65 2d       	mov	r22, r5
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x15e>
 b26:	6f ef       	ldi	r22, 0xFF	; 255
 b28:	7f ef       	ldi	r23, 0xFF	; 255
 b2a:	c5 01       	movw	r24, r10
 b2c:	2c 87       	std	Y+12, r18	; 0x0c
 b2e:	0e 94 b8 06 	call	0xd70	; 0xd70 <strnlen_P>
 b32:	2c 01       	movw	r4, r24
 b34:	2c 85       	ldd	r18, Y+12	; 0x0c
 b36:	20 68       	ori	r18, 0x80	; 128
 b38:	22 2e       	mov	r2, r18
 b3a:	83 01       	movw	r16, r6
 b3c:	23 fc       	sbrc	r2, 3
 b3e:	1b c0       	rjmp	.+54     	; 0xb76 <vfprintf+0x1aa>
 b40:	83 2d       	mov	r24, r3
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	48 16       	cp	r4, r24
 b46:	59 06       	cpc	r5, r25
 b48:	b0 f4       	brcc	.+44     	; 0xb76 <vfprintf+0x1aa>
 b4a:	b7 01       	movw	r22, r14
 b4c:	80 e2       	ldi	r24, 0x20	; 32
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 b54:	3a 94       	dec	r3
 b56:	f4 cf       	rjmp	.-24     	; 0xb40 <vfprintf+0x174>
 b58:	f5 01       	movw	r30, r10
 b5a:	27 fc       	sbrc	r2, 7
 b5c:	85 91       	lpm	r24, Z+
 b5e:	27 fe       	sbrs	r2, 7
 b60:	81 91       	ld	r24, Z+
 b62:	5f 01       	movw	r10, r30
 b64:	b7 01       	movw	r22, r14
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 b6c:	31 10       	cpse	r3, r1
 b6e:	3a 94       	dec	r3
 b70:	f1 e0       	ldi	r31, 0x01	; 1
 b72:	4f 1a       	sub	r4, r31
 b74:	51 08       	sbc	r5, r1
 b76:	41 14       	cp	r4, r1
 b78:	51 04       	cpc	r5, r1
 b7a:	71 f7       	brne	.-36     	; 0xb58 <vfprintf+0x18c>
 b7c:	e5 c0       	rjmp	.+458    	; 0xd48 <vfprintf+0x37c>
 b7e:	84 36       	cpi	r24, 0x64	; 100
 b80:	11 f0       	breq	.+4      	; 0xb86 <vfprintf+0x1ba>
 b82:	89 36       	cpi	r24, 0x69	; 105
 b84:	39 f5       	brne	.+78     	; 0xbd4 <vfprintf+0x208>
 b86:	f8 01       	movw	r30, r16
 b88:	27 ff       	sbrs	r18, 7
 b8a:	07 c0       	rjmp	.+14     	; 0xb9a <vfprintf+0x1ce>
 b8c:	60 81       	ld	r22, Z
 b8e:	71 81       	ldd	r23, Z+1	; 0x01
 b90:	82 81       	ldd	r24, Z+2	; 0x02
 b92:	93 81       	ldd	r25, Z+3	; 0x03
 b94:	0c 5f       	subi	r16, 0xFC	; 252
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	08 c0       	rjmp	.+16     	; 0xbaa <vfprintf+0x1de>
 b9a:	60 81       	ld	r22, Z
 b9c:	71 81       	ldd	r23, Z+1	; 0x01
 b9e:	88 27       	eor	r24, r24
 ba0:	77 fd       	sbrc	r23, 7
 ba2:	80 95       	com	r24
 ba4:	98 2f       	mov	r25, r24
 ba6:	0e 5f       	subi	r16, 0xFE	; 254
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	2f 76       	andi	r18, 0x6F	; 111
 bac:	b2 2e       	mov	r11, r18
 bae:	97 ff       	sbrs	r25, 7
 bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <vfprintf+0x1f8>
 bb2:	90 95       	com	r25
 bb4:	80 95       	com	r24
 bb6:	70 95       	com	r23
 bb8:	61 95       	neg	r22
 bba:	7f 4f       	sbci	r23, 0xFF	; 255
 bbc:	8f 4f       	sbci	r24, 0xFF	; 255
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	20 68       	ori	r18, 0x80	; 128
 bc2:	b2 2e       	mov	r11, r18
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	a4 01       	movw	r20, r8
 bca:	0e 94 00 07 	call	0xe00	; 0xe00 <__ultoa_invert>
 bce:	a8 2e       	mov	r10, r24
 bd0:	a8 18       	sub	r10, r8
 bd2:	44 c0       	rjmp	.+136    	; 0xc5c <vfprintf+0x290>
 bd4:	85 37       	cpi	r24, 0x75	; 117
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <vfprintf+0x216>
 bd8:	2f 7e       	andi	r18, 0xEF	; 239
 bda:	b2 2e       	mov	r11, r18
 bdc:	2a e0       	ldi	r18, 0x0A	; 10
 bde:	30 e0       	ldi	r19, 0x00	; 0
 be0:	25 c0       	rjmp	.+74     	; 0xc2c <vfprintf+0x260>
 be2:	f2 2f       	mov	r31, r18
 be4:	f9 7f       	andi	r31, 0xF9	; 249
 be6:	bf 2e       	mov	r11, r31
 be8:	8f 36       	cpi	r24, 0x6F	; 111
 bea:	c1 f0       	breq	.+48     	; 0xc1c <vfprintf+0x250>
 bec:	18 f4       	brcc	.+6      	; 0xbf4 <vfprintf+0x228>
 bee:	88 35       	cpi	r24, 0x58	; 88
 bf0:	79 f0       	breq	.+30     	; 0xc10 <vfprintf+0x244>
 bf2:	b4 c0       	rjmp	.+360    	; 0xd5c <vfprintf+0x390>
 bf4:	80 37       	cpi	r24, 0x70	; 112
 bf6:	19 f0       	breq	.+6      	; 0xbfe <vfprintf+0x232>
 bf8:	88 37       	cpi	r24, 0x78	; 120
 bfa:	21 f0       	breq	.+8      	; 0xc04 <vfprintf+0x238>
 bfc:	af c0       	rjmp	.+350    	; 0xd5c <vfprintf+0x390>
 bfe:	2f 2f       	mov	r18, r31
 c00:	20 61       	ori	r18, 0x10	; 16
 c02:	b2 2e       	mov	r11, r18
 c04:	b4 fe       	sbrs	r11, 4
 c06:	0d c0       	rjmp	.+26     	; 0xc22 <vfprintf+0x256>
 c08:	8b 2d       	mov	r24, r11
 c0a:	84 60       	ori	r24, 0x04	; 4
 c0c:	b8 2e       	mov	r11, r24
 c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x256>
 c10:	24 ff       	sbrs	r18, 4
 c12:	0a c0       	rjmp	.+20     	; 0xc28 <vfprintf+0x25c>
 c14:	9f 2f       	mov	r25, r31
 c16:	96 60       	ori	r25, 0x06	; 6
 c18:	b9 2e       	mov	r11, r25
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x25c>
 c1c:	28 e0       	ldi	r18, 0x08	; 8
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	05 c0       	rjmp	.+10     	; 0xc2c <vfprintf+0x260>
 c22:	20 e1       	ldi	r18, 0x10	; 16
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x260>
 c28:	20 e1       	ldi	r18, 0x10	; 16
 c2a:	32 e0       	ldi	r19, 0x02	; 2
 c2c:	f8 01       	movw	r30, r16
 c2e:	b7 fe       	sbrs	r11, 7
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <vfprintf+0x274>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	82 81       	ldd	r24, Z+2	; 0x02
 c38:	93 81       	ldd	r25, Z+3	; 0x03
 c3a:	0c 5f       	subi	r16, 0xFC	; 252
 c3c:	1f 4f       	sbci	r17, 0xFF	; 255
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x280>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	0e 5f       	subi	r16, 0xFE	; 254
 c4a:	1f 4f       	sbci	r17, 0xFF	; 255
 c4c:	a4 01       	movw	r20, r8
 c4e:	0e 94 00 07 	call	0xe00	; 0xe00 <__ultoa_invert>
 c52:	a8 2e       	mov	r10, r24
 c54:	a8 18       	sub	r10, r8
 c56:	fb 2d       	mov	r31, r11
 c58:	ff 77       	andi	r31, 0x7F	; 127
 c5a:	bf 2e       	mov	r11, r31
 c5c:	b6 fe       	sbrs	r11, 6
 c5e:	0b c0       	rjmp	.+22     	; 0xc76 <vfprintf+0x2aa>
 c60:	2b 2d       	mov	r18, r11
 c62:	2e 7f       	andi	r18, 0xFE	; 254
 c64:	a5 14       	cp	r10, r5
 c66:	50 f4       	brcc	.+20     	; 0xc7c <vfprintf+0x2b0>
 c68:	b4 fe       	sbrs	r11, 4
 c6a:	0a c0       	rjmp	.+20     	; 0xc80 <vfprintf+0x2b4>
 c6c:	b2 fc       	sbrc	r11, 2
 c6e:	08 c0       	rjmp	.+16     	; 0xc80 <vfprintf+0x2b4>
 c70:	2b 2d       	mov	r18, r11
 c72:	2e 7e       	andi	r18, 0xEE	; 238
 c74:	05 c0       	rjmp	.+10     	; 0xc80 <vfprintf+0x2b4>
 c76:	7a 2c       	mov	r7, r10
 c78:	2b 2d       	mov	r18, r11
 c7a:	03 c0       	rjmp	.+6      	; 0xc82 <vfprintf+0x2b6>
 c7c:	7a 2c       	mov	r7, r10
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <vfprintf+0x2b6>
 c80:	75 2c       	mov	r7, r5
 c82:	24 ff       	sbrs	r18, 4
 c84:	0d c0       	rjmp	.+26     	; 0xca0 <vfprintf+0x2d4>
 c86:	fe 01       	movw	r30, r28
 c88:	ea 0d       	add	r30, r10
 c8a:	f1 1d       	adc	r31, r1
 c8c:	80 81       	ld	r24, Z
 c8e:	80 33       	cpi	r24, 0x30	; 48
 c90:	11 f4       	brne	.+4      	; 0xc96 <vfprintf+0x2ca>
 c92:	29 7e       	andi	r18, 0xE9	; 233
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x2dc>
 c96:	22 ff       	sbrs	r18, 2
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0x2da>
 c9a:	73 94       	inc	r7
 c9c:	73 94       	inc	r7
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <vfprintf+0x2dc>
 ca0:	82 2f       	mov	r24, r18
 ca2:	86 78       	andi	r24, 0x86	; 134
 ca4:	09 f0       	breq	.+2      	; 0xca8 <vfprintf+0x2dc>
 ca6:	73 94       	inc	r7
 ca8:	23 fd       	sbrc	r18, 3
 caa:	13 c0       	rjmp	.+38     	; 0xcd2 <vfprintf+0x306>
 cac:	20 ff       	sbrs	r18, 0
 cae:	06 c0       	rjmp	.+12     	; 0xcbc <vfprintf+0x2f0>
 cb0:	5a 2c       	mov	r5, r10
 cb2:	73 14       	cp	r7, r3
 cb4:	18 f4       	brcc	.+6      	; 0xcbc <vfprintf+0x2f0>
 cb6:	53 0c       	add	r5, r3
 cb8:	57 18       	sub	r5, r7
 cba:	73 2c       	mov	r7, r3
 cbc:	73 14       	cp	r7, r3
 cbe:	68 f4       	brcc	.+26     	; 0xcda <vfprintf+0x30e>
 cc0:	b7 01       	movw	r22, r14
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	2c 87       	std	Y+12, r18	; 0x0c
 cc8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 ccc:	73 94       	inc	r7
 cce:	2c 85       	ldd	r18, Y+12	; 0x0c
 cd0:	f5 cf       	rjmp	.-22     	; 0xcbc <vfprintf+0x2f0>
 cd2:	73 14       	cp	r7, r3
 cd4:	10 f4       	brcc	.+4      	; 0xcda <vfprintf+0x30e>
 cd6:	37 18       	sub	r3, r7
 cd8:	01 c0       	rjmp	.+2      	; 0xcdc <vfprintf+0x310>
 cda:	31 2c       	mov	r3, r1
 cdc:	24 ff       	sbrs	r18, 4
 cde:	12 c0       	rjmp	.+36     	; 0xd04 <vfprintf+0x338>
 ce0:	b7 01       	movw	r22, r14
 ce2:	80 e3       	ldi	r24, 0x30	; 48
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	2c 87       	std	Y+12, r18	; 0x0c
 ce8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 cec:	2c 85       	ldd	r18, Y+12	; 0x0c
 cee:	22 ff       	sbrs	r18, 2
 cf0:	17 c0       	rjmp	.+46     	; 0xd20 <vfprintf+0x354>
 cf2:	21 ff       	sbrs	r18, 1
 cf4:	03 c0       	rjmp	.+6      	; 0xcfc <vfprintf+0x330>
 cf6:	88 e5       	ldi	r24, 0x58	; 88
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <vfprintf+0x334>
 cfc:	88 e7       	ldi	r24, 0x78	; 120
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	b7 01       	movw	r22, r14
 d02:	0c c0       	rjmp	.+24     	; 0xd1c <vfprintf+0x350>
 d04:	82 2f       	mov	r24, r18
 d06:	86 78       	andi	r24, 0x86	; 134
 d08:	59 f0       	breq	.+22     	; 0xd20 <vfprintf+0x354>
 d0a:	21 fd       	sbrc	r18, 1
 d0c:	02 c0       	rjmp	.+4      	; 0xd12 <vfprintf+0x346>
 d0e:	80 e2       	ldi	r24, 0x20	; 32
 d10:	01 c0       	rjmp	.+2      	; 0xd14 <vfprintf+0x348>
 d12:	8b e2       	ldi	r24, 0x2B	; 43
 d14:	27 fd       	sbrc	r18, 7
 d16:	8d e2       	ldi	r24, 0x2D	; 45
 d18:	b7 01       	movw	r22, r14
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 d20:	a5 14       	cp	r10, r5
 d22:	38 f4       	brcc	.+14     	; 0xd32 <vfprintf+0x366>
 d24:	b7 01       	movw	r22, r14
 d26:	80 e3       	ldi	r24, 0x30	; 48
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 d2e:	5a 94       	dec	r5
 d30:	f7 cf       	rjmp	.-18     	; 0xd20 <vfprintf+0x354>
 d32:	aa 94       	dec	r10
 d34:	f4 01       	movw	r30, r8
 d36:	ea 0d       	add	r30, r10
 d38:	f1 1d       	adc	r31, r1
 d3a:	80 81       	ld	r24, Z
 d3c:	b7 01       	movw	r22, r14
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 d44:	a1 10       	cpse	r10, r1
 d46:	f5 cf       	rjmp	.-22     	; 0xd32 <vfprintf+0x366>
 d48:	33 20       	and	r3, r3
 d4a:	09 f4       	brne	.+2      	; 0xd4e <vfprintf+0x382>
 d4c:	51 ce       	rjmp	.-862    	; 0x9f0 <vfprintf+0x24>
 d4e:	b7 01       	movw	r22, r14
 d50:	80 e2       	ldi	r24, 0x20	; 32
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 ce 06 	call	0xd9c	; 0xd9c <fputc>
 d58:	3a 94       	dec	r3
 d5a:	f6 cf       	rjmp	.-20     	; 0xd48 <vfprintf+0x37c>
 d5c:	f7 01       	movw	r30, r14
 d5e:	86 81       	ldd	r24, Z+6	; 0x06
 d60:	97 81       	ldd	r25, Z+7	; 0x07
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <vfprintf+0x39c>
 d64:	8f ef       	ldi	r24, 0xFF	; 255
 d66:	9f ef       	ldi	r25, 0xFF	; 255
 d68:	2c 96       	adiw	r28, 0x0c	; 12
 d6a:	e2 e1       	ldi	r30, 0x12	; 18
 d6c:	0c 94 77 07 	jmp	0xeee	; 0xeee <__epilogue_restores__>

00000d70 <strnlen_P>:
 d70:	fc 01       	movw	r30, r24
 d72:	05 90       	lpm	r0, Z+
 d74:	61 50       	subi	r22, 0x01	; 1
 d76:	70 40       	sbci	r23, 0x00	; 0
 d78:	01 10       	cpse	r0, r1
 d7a:	d8 f7       	brcc	.-10     	; 0xd72 <strnlen_P+0x2>
 d7c:	80 95       	com	r24
 d7e:	90 95       	com	r25
 d80:	8e 0f       	add	r24, r30
 d82:	9f 1f       	adc	r25, r31
 d84:	08 95       	ret

00000d86 <strnlen>:
 d86:	fc 01       	movw	r30, r24
 d88:	61 50       	subi	r22, 0x01	; 1
 d8a:	70 40       	sbci	r23, 0x00	; 0
 d8c:	01 90       	ld	r0, Z+
 d8e:	01 10       	cpse	r0, r1
 d90:	d8 f7       	brcc	.-10     	; 0xd88 <strnlen+0x2>
 d92:	80 95       	com	r24
 d94:	90 95       	com	r25
 d96:	8e 0f       	add	r24, r30
 d98:	9f 1f       	adc	r25, r31
 d9a:	08 95       	ret

00000d9c <fputc>:
 d9c:	0f 93       	push	r16
 d9e:	1f 93       	push	r17
 da0:	cf 93       	push	r28
 da2:	df 93       	push	r29
 da4:	18 2f       	mov	r17, r24
 da6:	09 2f       	mov	r16, r25
 da8:	eb 01       	movw	r28, r22
 daa:	8b 81       	ldd	r24, Y+3	; 0x03
 dac:	81 fd       	sbrc	r24, 1
 dae:	03 c0       	rjmp	.+6      	; 0xdb6 <fputc+0x1a>
 db0:	8f ef       	ldi	r24, 0xFF	; 255
 db2:	9f ef       	ldi	r25, 0xFF	; 255
 db4:	20 c0       	rjmp	.+64     	; 0xdf6 <fputc+0x5a>
 db6:	82 ff       	sbrs	r24, 2
 db8:	10 c0       	rjmp	.+32     	; 0xdda <fputc+0x3e>
 dba:	4e 81       	ldd	r20, Y+6	; 0x06
 dbc:	5f 81       	ldd	r21, Y+7	; 0x07
 dbe:	2c 81       	ldd	r18, Y+4	; 0x04
 dc0:	3d 81       	ldd	r19, Y+5	; 0x05
 dc2:	42 17       	cp	r20, r18
 dc4:	53 07       	cpc	r21, r19
 dc6:	7c f4       	brge	.+30     	; 0xde6 <fputc+0x4a>
 dc8:	e8 81       	ld	r30, Y
 dca:	f9 81       	ldd	r31, Y+1	; 0x01
 dcc:	9f 01       	movw	r18, r30
 dce:	2f 5f       	subi	r18, 0xFF	; 255
 dd0:	3f 4f       	sbci	r19, 0xFF	; 255
 dd2:	28 83       	st	Y, r18
 dd4:	39 83       	std	Y+1, r19	; 0x01
 dd6:	10 83       	st	Z, r17
 dd8:	06 c0       	rjmp	.+12     	; 0xde6 <fputc+0x4a>
 dda:	e8 85       	ldd	r30, Y+8	; 0x08
 ddc:	f9 85       	ldd	r31, Y+9	; 0x09
 dde:	81 2f       	mov	r24, r17
 de0:	09 95       	icall
 de2:	89 2b       	or	r24, r25
 de4:	29 f7       	brne	.-54     	; 0xdb0 <fputc+0x14>
 de6:	2e 81       	ldd	r18, Y+6	; 0x06
 de8:	3f 81       	ldd	r19, Y+7	; 0x07
 dea:	2f 5f       	subi	r18, 0xFF	; 255
 dec:	3f 4f       	sbci	r19, 0xFF	; 255
 dee:	2e 83       	std	Y+6, r18	; 0x06
 df0:	3f 83       	std	Y+7, r19	; 0x07
 df2:	81 2f       	mov	r24, r17
 df4:	90 2f       	mov	r25, r16
 df6:	df 91       	pop	r29
 df8:	cf 91       	pop	r28
 dfa:	1f 91       	pop	r17
 dfc:	0f 91       	pop	r16
 dfe:	08 95       	ret

00000e00 <__ultoa_invert>:
 e00:	fa 01       	movw	r30, r20
 e02:	aa 27       	eor	r26, r26
 e04:	28 30       	cpi	r18, 0x08	; 8
 e06:	51 f1       	breq	.+84     	; 0xe5c <__ultoa_invert+0x5c>
 e08:	20 31       	cpi	r18, 0x10	; 16
 e0a:	81 f1       	breq	.+96     	; 0xe6c <__ultoa_invert+0x6c>
 e0c:	e8 94       	clt
 e0e:	6f 93       	push	r22
 e10:	6e 7f       	andi	r22, 0xFE	; 254
 e12:	6e 5f       	subi	r22, 0xFE	; 254
 e14:	7f 4f       	sbci	r23, 0xFF	; 255
 e16:	8f 4f       	sbci	r24, 0xFF	; 255
 e18:	9f 4f       	sbci	r25, 0xFF	; 255
 e1a:	af 4f       	sbci	r26, 0xFF	; 255
 e1c:	b1 e0       	ldi	r27, 0x01	; 1
 e1e:	3e d0       	rcall	.+124    	; 0xe9c <__ultoa_invert+0x9c>
 e20:	b4 e0       	ldi	r27, 0x04	; 4
 e22:	3c d0       	rcall	.+120    	; 0xe9c <__ultoa_invert+0x9c>
 e24:	67 0f       	add	r22, r23
 e26:	78 1f       	adc	r23, r24
 e28:	89 1f       	adc	r24, r25
 e2a:	9a 1f       	adc	r25, r26
 e2c:	a1 1d       	adc	r26, r1
 e2e:	68 0f       	add	r22, r24
 e30:	79 1f       	adc	r23, r25
 e32:	8a 1f       	adc	r24, r26
 e34:	91 1d       	adc	r25, r1
 e36:	a1 1d       	adc	r26, r1
 e38:	6a 0f       	add	r22, r26
 e3a:	71 1d       	adc	r23, r1
 e3c:	81 1d       	adc	r24, r1
 e3e:	91 1d       	adc	r25, r1
 e40:	a1 1d       	adc	r26, r1
 e42:	20 d0       	rcall	.+64     	; 0xe84 <__ultoa_invert+0x84>
 e44:	09 f4       	brne	.+2      	; 0xe48 <__ultoa_invert+0x48>
 e46:	68 94       	set
 e48:	3f 91       	pop	r19
 e4a:	2a e0       	ldi	r18, 0x0A	; 10
 e4c:	26 9f       	mul	r18, r22
 e4e:	11 24       	eor	r1, r1
 e50:	30 19       	sub	r19, r0
 e52:	30 5d       	subi	r19, 0xD0	; 208
 e54:	31 93       	st	Z+, r19
 e56:	de f6       	brtc	.-74     	; 0xe0e <__ultoa_invert+0xe>
 e58:	cf 01       	movw	r24, r30
 e5a:	08 95       	ret
 e5c:	46 2f       	mov	r20, r22
 e5e:	47 70       	andi	r20, 0x07	; 7
 e60:	40 5d       	subi	r20, 0xD0	; 208
 e62:	41 93       	st	Z+, r20
 e64:	b3 e0       	ldi	r27, 0x03	; 3
 e66:	0f d0       	rcall	.+30     	; 0xe86 <__ultoa_invert+0x86>
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0x5c>
 e6a:	f6 cf       	rjmp	.-20     	; 0xe58 <__ultoa_invert+0x58>
 e6c:	46 2f       	mov	r20, r22
 e6e:	4f 70       	andi	r20, 0x0F	; 15
 e70:	40 5d       	subi	r20, 0xD0	; 208
 e72:	4a 33       	cpi	r20, 0x3A	; 58
 e74:	18 f0       	brcs	.+6      	; 0xe7c <__ultoa_invert+0x7c>
 e76:	49 5d       	subi	r20, 0xD9	; 217
 e78:	31 fd       	sbrc	r19, 1
 e7a:	40 52       	subi	r20, 0x20	; 32
 e7c:	41 93       	st	Z+, r20
 e7e:	02 d0       	rcall	.+4      	; 0xe84 <__ultoa_invert+0x84>
 e80:	a9 f7       	brne	.-22     	; 0xe6c <__ultoa_invert+0x6c>
 e82:	ea cf       	rjmp	.-44     	; 0xe58 <__ultoa_invert+0x58>
 e84:	b4 e0       	ldi	r27, 0x04	; 4
 e86:	a6 95       	lsr	r26
 e88:	97 95       	ror	r25
 e8a:	87 95       	ror	r24
 e8c:	77 95       	ror	r23
 e8e:	67 95       	ror	r22
 e90:	ba 95       	dec	r27
 e92:	c9 f7       	brne	.-14     	; 0xe86 <__ultoa_invert+0x86>
 e94:	00 97       	sbiw	r24, 0x00	; 0
 e96:	61 05       	cpc	r22, r1
 e98:	71 05       	cpc	r23, r1
 e9a:	08 95       	ret
 e9c:	9b 01       	movw	r18, r22
 e9e:	ac 01       	movw	r20, r24
 ea0:	0a 2e       	mov	r0, r26
 ea2:	06 94       	lsr	r0
 ea4:	57 95       	ror	r21
 ea6:	47 95       	ror	r20
 ea8:	37 95       	ror	r19
 eaa:	27 95       	ror	r18
 eac:	ba 95       	dec	r27
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0xa2>
 eb0:	62 0f       	add	r22, r18
 eb2:	73 1f       	adc	r23, r19
 eb4:	84 1f       	adc	r24, r20
 eb6:	95 1f       	adc	r25, r21
 eb8:	a0 1d       	adc	r26, r0
 eba:	08 95       	ret

00000ebc <__prologue_saves__>:
 ebc:	2f 92       	push	r2
 ebe:	3f 92       	push	r3
 ec0:	4f 92       	push	r4
 ec2:	5f 92       	push	r5
 ec4:	6f 92       	push	r6
 ec6:	7f 92       	push	r7
 ec8:	8f 92       	push	r8
 eca:	9f 92       	push	r9
 ecc:	af 92       	push	r10
 ece:	bf 92       	push	r11
 ed0:	cf 92       	push	r12
 ed2:	df 92       	push	r13
 ed4:	ef 92       	push	r14
 ed6:	ff 92       	push	r15
 ed8:	0f 93       	push	r16
 eda:	1f 93       	push	r17
 edc:	cf 93       	push	r28
 ede:	df 93       	push	r29
 ee0:	cd b7       	in	r28, 0x3d	; 61
 ee2:	de b7       	in	r29, 0x3e	; 62
 ee4:	ca 1b       	sub	r28, r26
 ee6:	db 0b       	sbc	r29, r27
 ee8:	cd bf       	out	0x3d, r28	; 61
 eea:	de bf       	out	0x3e, r29	; 62
 eec:	09 94       	ijmp

00000eee <__epilogue_restores__>:
 eee:	2a 88       	ldd	r2, Y+18	; 0x12
 ef0:	39 88       	ldd	r3, Y+17	; 0x11
 ef2:	48 88       	ldd	r4, Y+16	; 0x10
 ef4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ef6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ef8:	7d 84       	ldd	r7, Y+13	; 0x0d
 efa:	8c 84       	ldd	r8, Y+12	; 0x0c
 efc:	9b 84       	ldd	r9, Y+11	; 0x0b
 efe:	aa 84       	ldd	r10, Y+10	; 0x0a
 f00:	b9 84       	ldd	r11, Y+9	; 0x09
 f02:	c8 84       	ldd	r12, Y+8	; 0x08
 f04:	df 80       	ldd	r13, Y+7	; 0x07
 f06:	ee 80       	ldd	r14, Y+6	; 0x06
 f08:	fd 80       	ldd	r15, Y+5	; 0x05
 f0a:	0c 81       	ldd	r16, Y+4	; 0x04
 f0c:	1b 81       	ldd	r17, Y+3	; 0x03
 f0e:	aa 81       	ldd	r26, Y+2	; 0x02
 f10:	b9 81       	ldd	r27, Y+1	; 0x01
 f12:	ce 0f       	add	r28, r30
 f14:	d1 1d       	adc	r29, r1
 f16:	cd bf       	out	0x3d, r28	; 61
 f18:	de bf       	out	0x3e, r29	; 62
 f1a:	ed 01       	movw	r28, r26
 f1c:	08 95       	ret

00000f1e <_exit>:
 f1e:	f8 94       	cli

00000f20 <__stop_program>:
 f20:	ff cf       	rjmp	.-2      	; 0xf20 <__stop_program>
