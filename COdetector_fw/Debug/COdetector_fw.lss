
COdetector_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00802000  0000098e  00000a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000035f  008022b4  008022b4  00000cd6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b4c  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b17  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b86  00000000  00000000  00004501  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  00005088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001333  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001044  00000000  00000000  0000686b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000078af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_14>
  3c:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_15>
  40:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_16>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_22>
  5c:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_23>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_34>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	12 e2       	ldi	r17, 0x22	; 34
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ee e8       	ldi	r30, 0x8E	; 142
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 3b       	cpi	r26, 0xB4	; 180
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	26 e2       	ldi	r18, 0x26	; 38
  d0:	a4 eb       	ldi	r26, 0xB4	; 180
  d2:	b2 e2       	ldi	r27, 0x22	; 34
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a3 31       	cpi	r26, 0x13	; 19
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  e2:	0c 94 c5 04 	jmp	0x98a	; 0x98a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
      - interrupt on complete conversion

   */

   // PORT:
   PORTA.DIRCLR = CFG_ADC_PIN_MASK;             // Input
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f6 e0       	ldi	r31, 0x06	; 6
  f0:	82 83       	std	Z+2, r24	; 0x02
   
   ADCA.CTRLB = ADC_CURRLIMIT_HIGH_gc  |        // High current limit, max. sampling rate 75kSPS
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f2 e0       	ldi	r31, 0x02	; 2
  f6:	92 e6       	ldi	r25, 0x62	; 98
  f8:	91 83       	std	Z+1, r25	; 0x01
                ADC_RESOLUTION_MT12BIT_gc;      // More than 12-bit right adjusted result, when (SAPNUM>0)
                  
   ADCA.CH0.AVGCTRL = ADC_SAMPNUM_32X_gc ;       // Number of samples (averaging) - 16bit
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	94 a7       	std	Z+44, r25	; 0x2c

   ADCA.PRESCALER = ADC_PRESCALER_DIV4_gc;
  fe:	14 82       	std	Z+4, r1	; 0x04
   
   ADC_EN();                                    // Enabling ADC block
 100:	90 81       	ld	r25, Z
 102:	91 60       	ori	r25, 0x01	; 1
 104:	90 83       	st	Z, r25
   //adcOffCalibration ();
   
   ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;   // Single ended input
 106:	80 a3       	std	Z+32, r24	; 0x20
   ADCA.CH0.INTCTRL = CFG_PRIO_ADC;                   // From boardCfg.h
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	92 a3       	std	Z+34, r25	; 0x22
   
   
   ADCA.CH0.OFFSETCORR0 = ADC_OFF_MAN_CORR & 0xFF;
 10c:	9f ea       	ldi	r25, 0xAF	; 175
 10e:	90 a7       	std	Z+40, r25	; 0x28
   ADCA.CH0.OFFSETCORR1 = ADC_OFF_MAN_CORR >> 8;
 110:	11 a6       	std	Z+41, r1	; 0x29
   
   ADCA.CH0.GAINCORR0 = 0x00;
 112:	12 a6       	std	Z+42, r1	; 0x2a
   ADCA.CH0.GAINCORR1 = 0x08;          // Gain correction x1  
 114:	98 e0       	ldi	r25, 0x08	; 8
 116:	93 a7       	std	Z+43, r25	; 0x2b
       
   ADCA.CH0.CORRCTRL = 0x01;     // Correction enabled
 118:	87 a3       	std	Z+39, r24	; 0x27
                               
   ADC_EN();
 11a:	80 81       	ld	r24, Z
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	80 83       	st	Z, r24
   
   LOG_TXT ( ">>init<<   ADC initialized\n", 28 );
 120:	6c e1       	ldi	r22, 0x1C	; 28
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	90 e2       	ldi	r25, 0x20	; 32
 126:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
 12a:	08 95       	ret

0000012c <adcStartChToGnd>:


//****************************************************************************************
void adcStartChToGnd ( void )
{
   ADCA.CH0.MUXCTRL = CFG_ADC_MUXPOS; 
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	f2 e0       	ldi	r31, 0x02	; 2
 130:	11 a2       	std	Z+33, r1	; 0x21
   DEB_1_SET(); 
 132:	80 e2       	ldi	r24, 0x20	; 32
 134:	a0 e6       	ldi	r26, 0x60	; 96
 136:	b6 e0       	ldi	r27, 0x06	; 6
 138:	15 96       	adiw	r26, 0x05	; 5
 13a:	8c 93       	st	X, r24
   ADC_START();
 13c:	80 81       	ld	r24, Z
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <adcRegisterEndCb>:


//****************************************************************************************
void adcRegisterEndCb ( pfnAdcEnd cb )
{
   convEndCB = cb; 
 144:	80 93 b4 22 	sts	0x22B4, r24
 148:	90 93 b5 22 	sts	0x22B5, r25
 14c:	08 95       	ret

0000014e <__vector_34>:
}


//****************************************************************************************
ISR ( ADCA_CH0_vect )
{  
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
   DEB_1_CLR();
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	e0 e6       	ldi	r30, 0x60	; 96
 174:	f6 e0       	ldi	r31, 0x06	; 6
 176:	86 83       	std	Z+6, r24	; 0x06
   if ( NULL != convEndCB )
 178:	e0 91 b4 22 	lds	r30, 0x22B4
 17c:	f0 91 b5 22 	lds	r31, 0x22B5
 180:	30 97       	sbiw	r30, 0x00	; 0
 182:	39 f0       	breq	.+14     	; 0x192 <__vector_34+0x44>
   {       
      convEndCB (  (uint16_t)ADCA.CH0RES );      
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b2 e0       	ldi	r27, 0x02	; 2
 188:	50 96       	adiw	r26, 0x10	; 16
 18a:	8d 91       	ld	r24, X+
 18c:	9c 91       	ld	r25, X
 18e:	51 97       	sbiw	r26, 0x11	; 17
 190:	09 95       	icall
   }  
   
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <boardInit>:
      // page 117 in manual (power reduction)!!!
   
   
   
   // Debug LEDs:
   PORTD.DIRSET = PIN5_bm;
 1b4:	e0 e6       	ldi	r30, 0x60	; 96
 1b6:	f6 e0       	ldi	r31, 0x06	; 6
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN6_bm;
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN7_bm;   
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	81 83       	std	Z+1, r24	; 0x01
   

   // Clocks:
   #if ( F_CPU == F_CPU_32KHZ )
      OSC.CTRL |= OSC_RC32KEN_bm;               // Enabling 32kHz clock
 1c4:	e0 e5       	ldi	r30, 0x50	; 80
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 83       	st	Z, r24
      while (!(OSC.STATUS & OSC_RC32KRDY_bm));  // Waiting for clock ready
 1ce:	81 81       	ldd	r24, Z+1	; 0x01
 1d0:	82 ff       	sbrs	r24, 2
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <boardInit+0x1a>
      CCP=CCP_IOREG_gc;                         // Protected register
 1d4:	88 ed       	ldi	r24, 0xD8	; 216
 1d6:	84 bf       	out	0x34, r24	; 52
      CLK.CTRL = CLK_SCLKSEL_RC32K_gc;          // 32khz internal
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 40 00 	sts	0x0040, r24
      OSC.CTRL = OSC_RC32KEN_bm;                // Disabling other clocks
 1de:	84 e0       	ldi	r24, 0x04	; 4
 1e0:	80 93 50 00 	sts	0x0050, r24
      LOG_TXT ( ">>clock<<   Clock 32kHZ\n", 25 );
 1e4:	69 e1       	ldi	r22, 0x19	; 25
 1e6:	84 e2       	ldi	r24, 0x24	; 36
 1e8:	90 e2       	ldi	r25, 0x20	; 32
 1ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
   #endif
   
     
   // Initializations:
   #ifdef LOG_USARTC0
      serialInitC();
 1ee:	0e 94 c0 02 	call	0x580	; 0x580 <serialInitC>
   #endif

   spiInit();
 1f2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <spiInit>
   pdcInit();
 1f6:	0e 94 31 01 	call	0x262	; 0x262 <pdcInit>
   adcInit();
 1fa:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
   //timerInit();
  
   CFG_GLOBAL_INT_ENABLE();
 1fe:	8f b7       	in	r24, 0x3f	; 63
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8f bf       	out	0x3f, r24	; 63
   PRIO_ALL_LEVELS_ENABLE();
 204:	e2 ea       	ldi	r30, 0xA2	; 162
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	87 60       	ori	r24, 0x07	; 7
 20c:	80 83       	st	Z, r24
   
   LOG_TXT ( ">>init<<   Board initialized\n", 30 );
 20e:	6e e1       	ldi	r22, 0x1E	; 30
 210:	8d e3       	ldi	r24, 0x3D	; 61
 212:	90 e2       	ldi	r25, 0x20	; 32
 214:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
 218:	08 95       	ret

0000021a <pdcChipDisable>:

// *************************************************************************
// Function to set callback in SPI.c (end of transmission)
static void pdcChipDisable ( void )
{
   SCE_HI();
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	e0 e4       	ldi	r30, 0x40	; 64
 21e:	f6 e0       	ldi	r31, 0x06	; 6
 220:	85 83       	std	Z+5, r24	; 0x05
 222:	08 95       	ret

00000224 <pdcSend>:
}

// *************************************************************************
// Function to send data
static void pdcSend( uint8_t DC, uint8_t data )
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	1f 92       	push	r1
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	69 83       	std	Y+1, r22	; 0x01
   SCE_LO();
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	e0 e4       	ldi	r30, 0x40	; 64
 234:	f6 e0       	ldi	r31, 0x06	; 6
 236:	96 83       	std	Z+6, r25	; 0x06
   
   switch(DC)
 238:	88 23       	and	r24, r24
 23a:	29 f0       	breq	.+10     	; 0x246 <pdcSend+0x22>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	39 f4       	brne	.+14     	; 0x24e <pdcSend+0x2a>
   {
      case DC_DATA:
         DC_HI();
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	85 83       	std	Z+5, r24	; 0x05
      break;
 244:	04 c0       	rjmp	.+8      	; 0x24e <pdcSend+0x2a>
      
      case DC_CMD:
         DC_LO();
 246:	80 e1       	ldi	r24, 0x10	; 16
 248:	e0 e4       	ldi	r30, 0x40	; 64
 24a:	f6 e0       	ldi	r31, 0x06	; 6
 24c:	86 83       	std	Z+6, r24	; 0x06
      break;
   }
   
   spiSend( &data, 1 );
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 91 03 	call	0x722	; 0x722 <spiSend>
   
   //_delay_us(100);	  
     
}
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <pdcInit>:

// *************************************************************************
// Function to configure PDC8544
void pdcInit( void )
{
   spiRegisterTxEndCB ( pdcChipDisable );
 262:	8d e0       	ldi	r24, 0x0D	; 13
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 cb 03 	call	0x796	; 0x796 <spiRegisterTxEndCB>

// *************************************************************************
// Function to reset PDC8544
static void pdcReset( void )
{   
   RST_LO();
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	e0 e4       	ldi	r30, 0x40	; 64
 26e:	f6 e0       	ldi	r31, 0x06	; 6
 270:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	86 e3       	ldi	r24, 0x36	; 54
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <pdcInit+0x12>
 278:	00 c0       	rjmp	.+0      	; 0x27a <pdcInit+0x18>
   _delay_ms(5);  // TODO: delay not ok
   RST_HI();   
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	85 83       	std	Z+5, r24	; 0x05
 27e:	86 e3       	ldi	r24, 0x36	; 54
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <pdcInit+0x1e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <pdcInit+0x24>
   spiRegisterTxEndCB ( pdcChipDisable );

   pdcReset(); 
   
   
   pdcSend( DC_CMD, 0x21 );	// Extended cmd
 286:	61 e2       	ldi	r22, 0x21	; 33
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   pdcSend( DC_CMD, 0xE0 );	// Bias
 28e:	60 ee       	ldi	r22, 0xE0	; 224
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   pdcSend( DC_CMD, 0x04 );	// Temp. control
 296:	64 e0       	ldi	r22, 0x04	; 4
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   pdcSend( DC_CMD, 0xCB );	// Set V
 29e:	6b ec       	ldi	r22, 0xCB	; 203
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
 2a6:	60 e2       	ldi	r22, 0x20	; 32
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   pdcSend( DC_CMD, 0x0C );	// Normal mode
 2ae:	6c e0       	ldi	r22, 0x0C	; 12
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>

   LOG_TXT ( ">>init<<   PDC8544 initialized\n", 32 );   
 2b6:	60 e2       	ldi	r22, 0x20	; 32
 2b8:	8b e5       	ldi	r24, 0x5B	; 91
 2ba:	90 e2       	ldi	r25, 0x20	; 32
 2bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
 2c0:	08 95       	ret

000002c2 <pdcChar>:
// *************************************************************************

// *************************************************************************
// Function to write a single char from a table
void pdcChar( char ch, uint8_t pos_Y, uint8_t pos_X )
{
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	c8 2f       	mov	r28, r24
 2ca:	d4 2f       	mov	r29, r20
// Function to set Y -> row
static void pdcSetRow( uint8_t addr_Y )
{
   if( addr_Y > 5 ){ /*ERROR!!!!!!*/ }
   
   addr_Y += 0x40;	// Adding Set Y address of RAM command
 2cc:	60 5c       	subi	r22, 0xC0	; 192
   pdcSend( DC_CMD, addr_Y );
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   if( ch < 0x20 || ch > 0x7F ){ /*ERROR!!!!!!*/ }
   if( pos_X > 13 ){ /*ERROR!!!!!!*/ }
   if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
 2d4:	6d 2f       	mov	r22, r29
 2d6:	66 0f       	add	r22, r22
 2d8:	6d 0f       	add	r22, r29
 2da:	66 0f       	add	r22, r22
static void pdcSetCol( uint8_t addr_X )
{

   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
 2dc:	60 58       	subi	r22, 0x80	; 128
   pdcSend( DC_CMD, addr_X );
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
 2e4:	83 e3       	ldi	r24, 0x33	; 51
 2e6:	93 e0       	ldi	r25, 0x03	; 3
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <pdcChar+0x26>
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
   _delay_ms (100);
   for( X = 0; X < 5; X++ )
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	a0 97       	sbiw	r28, 0x20	; 32
 2f0:	ce 01       	movw	r24, r28
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	c8 0f       	add	r28, r24
 2fc:	d9 1f       	adc	r29, r25
 2fe:	c5 58       	subi	r28, 0x85	; 133
 300:	df 4d       	sbci	r29, 0xDF	; 223
   if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
   _delay_ms (100);
   for( X = 0; X < 5; X++ )
 302:	10 e0       	ldi	r17, 0x00	; 0
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 304:	69 91       	ld	r22, Y+
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
   if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
   _delay_ms (100);
   for( X = 0; X < 5; X++ )
 30c:	1f 5f       	subi	r17, 0xFF	; 255
 30e:	15 30       	cpi	r17, 0x05	; 5
 310:	c9 f7       	brne	.-14     	; 0x304 <pdcChar+0x42>
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
   }
   
   pdcSend( DC_DATA, 0x00 );			// One pixel spacing after char   
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 12 01 	call	0x224	; 0x224 <pdcSend>
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	08 95       	ret

00000322 <pdcLine>:


// *************************************************************************
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	06 2f       	mov	r16, r22
 32c:	ec 01       	movw	r28, r24
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 32e:	10 e0       	ldi	r17, 0x00	; 0
   {      
      if( ch[i] < 0x20 || ch[i] > 0x7F)
 330:	89 91       	ld	r24, Y+
 332:	90 ee       	ldi	r25, 0xE0	; 224
 334:	98 0f       	add	r25, r24
 336:	90 36       	cpi	r25, 0x60	; 96
 338:	30 f0       	brcs	.+12     	; 0x346 <pdcLine+0x24>
      {
         pdcChar( ' ', pos_Y, i );
 33a:	41 2f       	mov	r20, r17
 33c:	60 2f       	mov	r22, r16
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pdcChar>
 344:	04 c0       	rjmp	.+8      	; 0x34e <pdcLine+0x2c>
      }
      else
      {
         pdcChar( ch[i], pos_Y, i );
 346:	41 2f       	mov	r20, r17
 348:	60 2f       	mov	r22, r16
 34a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pdcChar>
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 34e:	1f 5f       	subi	r17, 0xFF	; 255
 350:	1e 30       	cpi	r17, 0x0E	; 14
 352:	71 f7       	brne	.-36     	; 0x330 <pdcLine+0xe>
      else
      {
         pdcChar( ch[i], pos_Y, i );
      }
   }
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <pdcUint>:


// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
 35e:	2f 92       	push	r2
 360:	3f 92       	push	r3
 362:	4f 92       	push	r4
 364:	5f 92       	push	r5
 366:	6f 92       	push	r6
 368:	7f 92       	push	r7
 36a:	8f 92       	push	r8
 36c:	9f 92       	push	r9
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <pdcUint+0x26>
 384:	1f 92       	push	r1
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	56 2e       	mov	r5, r22
 38c:	49 83       	std	Y+1, r20	; 0x01
 38e:	22 2e       	mov	r2, r18
   uint32_t temp_val = val;
 390:	6c 01       	movw	r12, r24
 392:	e1 2c       	mov	r14, r1
 394:	f1 2c       	mov	r15, r1
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 396:	c1 14       	cp	r12, r1
 398:	d1 04       	cpc	r13, r1
 39a:	e1 04       	cpc	r14, r1
 39c:	f1 04       	cpc	r15, r1
 39e:	09 f4       	brne	.+2      	; 0x3a2 <pdcUint+0x44>
 3a0:	40 c0       	rjmp	.+128    	; 0x422 <pdcUint+0xc4>

// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
   uint32_t temp_val = val;
 3a2:	c7 01       	movw	r24, r14
 3a4:	b6 01       	movw	r22, r12
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 3a6:	1b 82       	std	Y+3, r1	; 0x03
   {	// Length of input "string"
      temp_val /= 10;
 3a8:	0f 2e       	mov	r0, r31
 3aa:	fa e0       	ldi	r31, 0x0A	; 10
 3ac:	8f 2e       	mov	r8, r31
 3ae:	91 2c       	mov	r9, r1
 3b0:	a1 2c       	mov	r10, r1
 3b2:	b1 2c       	mov	r11, r1
 3b4:	f0 2d       	mov	r31, r0
 3b6:	a5 01       	movw	r20, r10
 3b8:	94 01       	movw	r18, r8
 3ba:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 3be:	ca 01       	movw	r24, r20
 3c0:	b9 01       	movw	r22, r18
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 3c2:	2b 81       	ldd	r18, Y+3	; 0x03
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	2b 83       	std	Y+3, r18	; 0x03
 3c8:	61 15       	cp	r22, r1
 3ca:	71 05       	cpc	r23, r1
 3cc:	81 05       	cpc	r24, r1
 3ce:	91 05       	cpc	r25, r1
 3d0:	91 f7       	brne	.-28     	; 0x3b6 <pdcUint+0x58>
 3d2:	42 2e       	mov	r4, r18
      temp_val /= 10;
   }
   
   temp_val = val;
   
   for( k = 1; k <= len; k++ )
 3d4:	22 23       	and	r18, r18
 3d6:	31 f1       	breq	.+76     	; 0x424 <pdcUint+0xc6>
 3d8:	31 e0       	ldi	r19, 0x01	; 1
 3da:	3a 83       	std	Y+2, r19	; 0x02
   {      
      temp_ch = temp_val % 10;
 3dc:	0f 2e       	mov	r0, r31
 3de:	fa e0       	ldi	r31, 0x0A	; 10
 3e0:	8f 2e       	mov	r8, r31
 3e2:	91 2c       	mov	r9, r1
 3e4:	a1 2c       	mov	r10, r1
 3e6:	b1 2c       	mov	r11, r1
 3e8:	f0 2d       	mov	r31, r0
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len/*-k*/) );	//!!?!?!?!?!?!?!??!?!
 3ea:	39 80       	ldd	r3, Y+1	; 0x01
 3ec:	32 0e       	add	r3, r18
   
   temp_val = val;
   
   for( k = 1; k <= len; k++ )
   {      
      temp_ch = temp_val % 10;
 3ee:	c7 01       	movw	r24, r14
 3f0:	b6 01       	movw	r22, r12
 3f2:	a5 01       	movw	r20, r10
 3f4:	94 01       	movw	r18, r8
 3f6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 3fa:	62 2e       	mov	r6, r18
 3fc:	73 2e       	mov	r7, r19
 3fe:	04 2f       	mov	r16, r20
 400:	15 2f       	mov	r17, r21
 402:	86 2f       	mov	r24, r22
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len/*-k*/) );	//!!?!?!?!?!?!?!??!?!
 404:	43 2d       	mov	r20, r3
 406:	65 2d       	mov	r22, r5
 408:	80 5d       	subi	r24, 0xD0	; 208
 40a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pdcChar>
      temp_val /= 10;
 40e:	c6 2c       	mov	r12, r6
 410:	d7 2c       	mov	r13, r7
 412:	e0 2e       	mov	r14, r16
 414:	f1 2e       	mov	r15, r17
      temp_val /= 10;
   }
   
   temp_val = val;
   
   for( k = 1; k <= len; k++ )
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	8a 83       	std	Y+2, r24	; 0x02
 41c:	48 16       	cp	r4, r24
 41e:	38 f7       	brcc	.-50     	; 0x3ee <pdcUint+0x90>
 420:	01 c0       	rjmp	.+2      	; 0x424 <pdcUint+0xc6>
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 422:	1b 82       	std	Y+3, r1	; 0x03
      
      pdcChar( temp_ch, pos_Y, (pos_X+len/*-k*/) );	//!!?!?!?!?!?!?!??!?!
      temp_val /= 10;
   }

   if( len != length )
 424:	eb 81       	ldd	r30, Y+3	; 0x03
 426:	e2 15       	cp	r30, r2
 428:	b1 f0       	breq	.+44     	; 0x456 <pdcUint+0xf8>
   {      
      for( k = 1; k <= (length - len); k++ )
 42a:	82 2d       	mov	r24, r2
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	7c 01       	movw	r14, r24
 430:	ee 1a       	sub	r14, r30
 432:	f1 08       	sbc	r15, r1
 434:	1e 14       	cp	r1, r14
 436:	1f 04       	cpc	r1, r15
 438:	74 f4       	brge	.+28     	; 0x456 <pdcUint+0xf8>
 43a:	11 e0       	ldi	r17, 0x01	; 1
      {
         pdcChar( ' ', pos_Y, (pos_X+length/*-k*/) );         
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	22 0e       	add	r2, r18
 440:	42 2d       	mov	r20, r2
 442:	65 2d       	mov	r22, r5
 444:	80 e2       	ldi	r24, 0x20	; 32
 446:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pdcChar>
      temp_val /= 10;
   }

   if( len != length )
   {      
      for( k = 1; k <= (length - len); k++ )
 44a:	1f 5f       	subi	r17, 0xFF	; 255
 44c:	81 2f       	mov	r24, r17
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	e8 16       	cp	r14, r24
 452:	f9 06       	cpc	r15, r25
 454:	ac f7       	brge	.-22     	; 0x440 <pdcUint+0xe2>
         pdcChar( ' ', pos_Y, (pos_X+length/*-k*/) );         
      }
   }
   else{	/*ERROR!!!!!! */ }
   
}
 456:	23 96       	adiw	r28, 0x03	; 3
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	9f 90       	pop	r9
 472:	8f 90       	pop	r8
 474:	7f 90       	pop	r7
 476:	6f 90       	pop	r6
 478:	5f 90       	pop	r5
 47a:	4f 90       	pop	r4
 47c:	3f 90       	pop	r3
 47e:	2f 90       	pop	r2
 480:	08 95       	ret

00000482 <endOfMeas>:

//****************************************************************************************
static void endOfMeas ( uint16_t val )
{

   measVal = ((((uint32_t)val)*DIVIDER)/65535);   // For 16b res
 482:	9c 01       	movw	r18, r24
 484:	a8 ee       	ldi	r26, 0xE8	; 232
 486:	b3 e0       	ldi	r27, 0x03	; 3
 488:	0e 94 8c 04 	call	0x918	; 0x918 <__umulhisi3>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	3f ef       	ldi	r19, 0xFF	; 255
 490:	40 e0       	ldi	r20, 0x00	; 0
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 498:	20 93 b6 22 	sts	0x22B6, r18
 49c:	30 93 b7 22 	sts	0x22B7, r19

   LOG_UINT ( "Result [mV]:  ", 14, (uint16_t) measVal );
 4a0:	20 91 b6 22 	lds	r18, 0x22B6
 4a4:	30 91 b7 22 	lds	r19, 0x22B7
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	6e e0       	ldi	r22, 0x0E	; 14
 4ae:	8b e5       	ldi	r24, 0x5B	; 91
 4b0:	92 e2       	ldi	r25, 0x22	; 34
 4b2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <serialLogUintC>
   pdcUint ( measVal, 0, 0, 1 );
 4b6:	80 91 b6 22 	lds	r24, 0x22B6
 4ba:	90 91 b7 22 	lds	r25, 0x22B7
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	40 e0       	ldi	r20, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	0e 94 af 01 	call	0x35e	; 0x35e <pdcUint>
 4c8:	08 95       	ret

000004ca <main>:

//****************************************************************************************
int main(void)
{     
   
   boardInit();                        // Board peripherals initialization       
 4ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <boardInit>
   adcRegisterEndCb( endOfMeas );      // Registering CB
 4ce:	81 e4       	ldi	r24, 0x41	; 65
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	0e 94 a2 00 	call	0x144	; 0x144 <adcRegisterEndCb>

   pdcLine( "Heszek!       ", 2 );
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	8a e6       	ldi	r24, 0x6A	; 106
 4da:	92 e2       	ldi	r25, 0x22	; 34
 4dc:	0e 94 91 01 	call	0x322	; 0x322 <pdcLine>



//****************************************************************************************
int main(void)
{     
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	01 96       	adiw	r24, 0x01	; 1

   pdcLine( "Heszek!       ", 2 );

   while(1){
      
      for ( uint32_t i = 0; i < 1000; i++ ){}         
 4e6:	88 3e       	cpi	r24, 0xE8	; 232
 4e8:	23 e0       	ldi	r18, 0x03	; 3
 4ea:	92 07       	cpc	r25, r18
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <main+0x1a>
      
      adcStartChToGnd();
 4ee:	0e 94 96 00 	call	0x12c	; 0x12c <adcStartChToGnd>
      
   }
 4f2:	f6 cf       	rjmp	.-20     	; 0x4e0 <main+0x16>

000004f4 <serialSendC>:

void serialSendC ( const uint8_t* data, uint8_t len )
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
 4f4:	20 91 02 20 	lds	r18, 0x2002
 4f8:	30 91 03 20 	lds	r19, 0x2003
 4fc:	e9 eb       	ldi	r30, 0xB9	; 185
 4fe:	f3 e2       	ldi	r31, 0x23	; 35
 500:	e2 1b       	sub	r30, r18
 502:	f3 0b       	sbc	r31, r19
 504:	46 2f       	mov	r20, r22
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	4e 17       	cp	r20, r30
 50a:	5f 07       	cpc	r21, r31
 50c:	a4 f5       	brge	.+104    	; 0x576 <serialSendC+0x82>
   {
      for ( uint8_t i = 0; i < len; i++ )
 50e:	66 23       	and	r22, r22
 510:	c9 f0       	breq	.+50     	; 0x544 <serialSendC+0x50>
 512:	a8 2f       	mov	r26, r24
 514:	b9 2f       	mov	r27, r25
 516:	52 2f       	mov	r21, r18
 518:	43 2f       	mov	r20, r19
      {
         *txHead = *data;
 51a:	9d 91       	ld	r25, X+
 51c:	e5 2f       	mov	r30, r21
 51e:	f4 2f       	mov	r31, r20
 520:	91 93       	st	Z+, r25
 522:	9e 2f       	mov	r25, r30
 524:	92 1b       	sub	r25, r18
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 526:	96 17       	cp	r25, r22
 528:	18 f4       	brcc	.+6      	; 0x530 <serialSendC+0x3c>
      {
         *txHead = *data;
         txHead++;
 52a:	5e 2f       	mov	r21, r30
 52c:	4f 2f       	mov	r20, r31
 52e:	f5 cf       	rjmp	.-22     	; 0x51a <serialSendC+0x26>
 530:	61 50       	subi	r22, 0x01	; 1
 532:	86 2f       	mov	r24, r22
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	28 0f       	add	r18, r24
 53a:	39 1f       	adc	r19, r25
 53c:	20 93 02 20 	sts	0x2002, r18
 540:	30 93 03 20 	sts	0x2003, r19
         data++;                 
      }
      
      if ( (txBuff == txTail) && (TRUE == initFlag) )       // Initial send
 544:	80 91 00 20 	lds	r24, 0x2000
 548:	90 91 01 20 	lds	r25, 0x2001
 54c:	89 5b       	subi	r24, 0xB9	; 185
 54e:	92 42       	sbci	r25, 0x22	; 34
 550:	b1 f4       	brne	.+44     	; 0x57e <serialSendC+0x8a>
 552:	80 91 b8 22 	lds	r24, 0x22B8
 556:	88 23       	and	r24, r24
 558:	91 f0       	breq	.+36     	; 0x57e <serialSendC+0x8a>
      {        
         USARTC0.DATA = *txTail;    // First character sent starts transmission
 55a:	80 91 b9 22 	lds	r24, 0x22B9
 55e:	80 93 c0 08 	sts	0x08C0, r24
         txTail++;
 562:	80 91 00 20 	lds	r24, 0x2000
 566:	90 91 01 20 	lds	r25, 0x2001
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	80 93 00 20 	sts	0x2000, r24
 570:	90 93 01 20 	sts	0x2001, r25
 574:	08 95       	ret
      }                
   }
   else
   {
      // Overflow or data too big  
      DEB_3_SET();    
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	e0 e6       	ldi	r30, 0x60	; 96
 57a:	f6 e0       	ldi	r31, 0x06	; 6
 57c:	85 83       	std	Z+5, r24	; 0x05
 57e:	08 95       	ret

00000580 <serialInitC>:
// Serial on PORTC initialization:
void serialInitC ( void )
{
   // PORTC configuration:
   
   PORTC.REMAP &= ~PORT_USART0_bm;       // Don't remap ports from 0-3 to 4-7   
 580:	e0 e4       	ldi	r30, 0x40	; 64
 582:	f6 e0       	ldi	r31, 0x06	; 6
 584:	86 85       	ldd	r24, Z+14	; 0x0e
 586:	8f 7e       	andi	r24, 0xEF	; 239
 588:	86 87       	std	Z+14, r24	; 0x0e
   PORTC.DIRSET = CFG_TXC0_PIN_MASK;     // Output for Tx (pin must be manually set to output)
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	81 83       	std	Z+1, r24	; 0x01
   PORTC.DIRCLR = CFG_RXC0_PIN_MASK;     // Input for Rx
 58e:	94 e0       	ldi	r25, 0x04	; 4
 590:	92 83       	std	Z+2, r25	; 0x02
   
   // CTRLC:
   USARTC0.CTRLC =  ( USART_CMODE_ASYNCHRONOUS_gc |    // Asynchronous transfer mode
 592:	e0 ec       	ldi	r30, 0xC0	; 192
 594:	f8 e0       	ldi	r31, 0x08	; 8
 596:	93 e0       	ldi	r25, 0x03	; 3
 598:	94 83       	std	Z+4, r25	; 0x04
                      USART_PMODE_DISABLED_gc     |    // Parity mode disabled
                      USART_CHSIZE_8BIT_gc        );   // 8b per frame                   
                      
   USARTC0.CTRLC &= ~USART_SBMODE_bm;  // Stop bit disabled
 59a:	94 81       	ldd	r25, Z+4	; 0x04
 59c:	97 7f       	andi	r25, 0xF7	; 247
 59e:	94 83       	std	Z+4, r25	; 0x04
   
   // Baud rate
       
   USARTC0.BAUDCTRLA =  BSEL_BAUD_VAL;           // 8 LSB of BSEL
 5a0:	96 e1       	ldi	r25, 0x16	; 22
 5a2:	96 83       	std	Z+6, r25	; 0x06
   USARTC0.BAUDCTRLB =  BSCALE_BAUD_VAL | ((BSEL_BAUD_VAL >> 8) & 0x0F) ;           // 4 MSB of BSEL and BSCALE    
 5a4:	90 eb       	ldi	r25, 0xB0	; 176
 5a6:	97 83       	std	Z+7, r25	; 0x07
       
        
   // Priorities from common.h:
   USARTC0.CTRLA = CFG_PRIO_USARTC0;  
 5a8:	82 83       	std	Z+2, r24	; 0x02
         
   USARTC0.CTRLB |= ( USART_TXEN_bm |    // Transmitter enabled
 5aa:	83 81       	ldd	r24, Z+3	; 0x03
 5ac:	8c 60       	ori	r24, 0x0C	; 12
 5ae:	83 83       	std	Z+3, r24	; 0x03
                      //USART_RXEN_bm |    // Receiver enabled
                      USART_CLK2X_bm );  // Enabling 2x clock    
                       
   USARTC0.STATUS &= ~USART_TXCIF_bm;    // Clearing tx interrupt flag
 5b0:	81 81       	ldd	r24, Z+1	; 0x01
 5b2:	8f 7b       	andi	r24, 0xBF	; 191
 5b4:	81 83       	std	Z+1, r24	; 0x01
   
   LOG_TXT ( ">>init<<   Serial initialized\n", 31 );
 5b6:	6f e1       	ldi	r22, 0x1F	; 31
 5b8:	89 e7       	ldi	r24, 0x79	; 121
 5ba:	92 e2       	ldi	r25, 0x22	; 34
 5bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
   
   initFlag = TRUE;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 b8 22 	sts	0x22B8, r24
 5c6:	08 95       	ret

000005c8 <serialLogUintC>:


//****************************************************************************************
// TODO: modify this
void serialLogUintC ( uint8_t* txt, uint8_t len, uint32_t val )
{
 5c8:	6f 92       	push	r6
 5ca:	7f 92       	push	r7
 5cc:	8f 92       	push	r8
 5ce:	9f 92       	push	r9
 5d0:	af 92       	push	r10
 5d2:	bf 92       	push	r11
 5d4:	cf 92       	push	r12
 5d6:	df 92       	push	r13
 5d8:	ef 92       	push	r14
 5da:	ff 92       	push	r15
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	2a 97       	sbiw	r28, 0x0a	; 10
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	8c 01       	movw	r16, r24
 5f0:	66 2e       	mov	r6, r22
 5f2:	49 01       	movw	r8, r18
 5f4:	5a 01       	movw	r10, r20
   char temp[10];
      
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
 5f6:	21 15       	cp	r18, r1
 5f8:	31 05       	cpc	r19, r1
 5fa:	41 05       	cpc	r20, r1
 5fc:	51 05       	cpc	r21, r1
 5fe:	b9 f0       	breq	.+46     	; 0x62e <serialLogUintC+0x66>
 600:	ca 01       	movw	r24, r20
 602:	b9 01       	movw	r22, r18
 604:	71 2c       	mov	r7, r1
   }
   else
   {     
      while ( tempVal ) 
      {
         tempVal /= 10;
 606:	0f 2e       	mov	r0, r31
 608:	fa e0       	ldi	r31, 0x0A	; 10
 60a:	cf 2e       	mov	r12, r31
 60c:	d1 2c       	mov	r13, r1
 60e:	e1 2c       	mov	r14, r1
 610:	f1 2c       	mov	r15, r1
 612:	f0 2d       	mov	r31, r0
 614:	a7 01       	movw	r20, r14
 616:	96 01       	movw	r18, r12
 618:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 61c:	ca 01       	movw	r24, r20
 61e:	b9 01       	movw	r22, r18
         numLen++;      
 620:	73 94       	inc	r7
   {
      numLen = 1;
   }
   else
   {     
      while ( tempVal ) 
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	41 05       	cpc	r20, r1
 628:	51 05       	cpc	r21, r1
 62a:	a1 f7       	brne	.-24     	; 0x614 <serialLogUintC+0x4c>
 62c:	02 c0       	rjmp	.+4      	; 0x632 <serialLogUintC+0x6a>
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
   {
      numLen = 1;
 62e:	77 24       	eor	r7, r7
 630:	73 94       	inc	r7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 632:	4a e0       	ldi	r20, 0x0A	; 10
 634:	be 01       	movw	r22, r28
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	c4 01       	movw	r24, r8
 63c:	0e 94 9b 04 	call	0x936	; 0x936 <__utoa_ncheck>
   }
   
      
   (void) utoa ( (unsigned int)val, temp, 10 );
   
   serialSendC ( (const uint8_t*) txt, len );
 640:	66 2d       	mov	r22, r6
 642:	c8 01       	movw	r24, r16
 644:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
   serialSendC ( (const uint8_t*) temp, numLen );
 648:	67 2d       	mov	r22, r7
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
   serialSendC ( (const uint8_t*) "\n", 2 );
 652:	62 e0       	ldi	r22, 0x02	; 2
 654:	8b e3       	ldi	r24, 0x3B	; 59
 656:	90 e2       	ldi	r25, 0x20	; 32
 658:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
   
}
 65c:	2a 96       	adiw	r28, 0x0a	; 10
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	de bf       	out	0x3e, r29	; 62
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	df 90       	pop	r13
 670:	cf 90       	pop	r12
 672:	bf 90       	pop	r11
 674:	af 90       	pop	r10
 676:	9f 90       	pop	r9
 678:	8f 90       	pop	r8
 67a:	7f 90       	pop	r7
 67c:	6f 90       	pop	r6
 67e:	08 95       	ret

00000680 <__vector_25>:

//****************************************************************************************
// Serial Tx complete ISR ( tx flag is cleared automatically):

ISR ( USARTC0_TXC_vect )
{             
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
   if ( txTail < txHead )
 692:	e0 91 00 20 	lds	r30, 0x2000
 696:	f0 91 01 20 	lds	r31, 0x2001
 69a:	80 91 02 20 	lds	r24, 0x2002
 69e:	90 91 03 20 	lds	r25, 0x2003
 6a2:	e8 17       	cp	r30, r24
 6a4:	f9 07       	cpc	r31, r25
 6a6:	68 f4       	brcc	.+26     	; 0x6c2 <__vector_25+0x42>
   {
      USARTC0.DATA = *txTail;
 6a8:	80 81       	ld	r24, Z
 6aa:	80 93 c0 08 	sts	0x08C0, r24
      txTail++;      
 6ae:	80 91 00 20 	lds	r24, 0x2000
 6b2:	90 91 01 20 	lds	r25, 0x2001
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	80 93 00 20 	sts	0x2000, r24
 6bc:	90 93 01 20 	sts	0x2001, r25
 6c0:	0a c0       	rjmp	.+20     	; 0x6d6 <__vector_25+0x56>
   }
   else // All of data from buffer is send
   {
      txTail = txBuff;
 6c2:	89 eb       	ldi	r24, 0xB9	; 185
 6c4:	92 e2       	ldi	r25, 0x22	; 34
 6c6:	80 93 00 20 	sts	0x2000, r24
 6ca:	90 93 01 20 	sts	0x2001, r25
      txHead = txTail;    
 6ce:	80 93 02 20 	sts	0x2002, r24
 6d2:	90 93 03 20 	sts	0x2003, r25
   } 
}
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <__vector_23>:



//****************************************************************************************
ISR ( USARTC0_RXC_vect )
{   
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	0f 90       	pop	r0
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	0f 90       	pop	r0
 6f8:	1f 90       	pop	r1
 6fa:	18 95       	reti

000006fc <spiInit>:
//****************************************************************************************
void spiInit ( void )
{
   
   // Pins as output: 
   PORTC.DIRSET |= ( CFG_RST_PIN_MASK  |
 6fc:	e0 e4       	ldi	r30, 0x40	; 64
 6fe:	f6 e0       	ldi	r31, 0x06	; 6
 700:	81 81       	ldd	r24, Z+1	; 0x01
 702:	83 6b       	ori	r24, 0xB3	; 179
 704:	81 83       	std	Z+1, r24	; 0x01
                     CFG_DC_PIN_MASK   |
                     CFG_MOSI_PIN_MASK |
                     CFG_SCK_PIN_MASK  ); 
   
   // Unbuffered mode (simple tx use)
   SPIC.CTRLB = SPI_SSD_bm;      // Slave select disable (master mode) 
 706:	e0 ee       	ldi	r30, 0xE0	; 224
 708:	f8 e0       	ldi	r31, 0x08	; 8
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	84 83       	std	Z+4, r24	; 0x04
   
   // TODO: DMA?
   SPIC.CTRL = ( SPI_CLK2X_bm    |     // Clock Double
 70e:	80 e9       	ldi	r24, 0x90	; 144
 710:	80 83       	st	Z, r24
                 SPI_MASTER_bm   );    // Master mode               
   
   SPIC.INTCTRL = CFG_PRIO_SPI;        // Interrupt level from boardCfg.h              
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	81 83       	std	Z+1, r24	; 0x01
                                
   LOG_TXT ( ">>init<<   SPI initialized\n", 28 );
 716:	6c e1       	ldi	r22, 0x1C	; 28
 718:	88 e9       	ldi	r24, 0x98	; 152
 71a:	92 e2       	ldi	r25, 0x22	; 34
 71c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <serialSendC>
 720:	08 95       	ret

00000722 <spiSend>:

//****************************************************************************************
void spiSend ( const uint8_t* data, uint16_t len )
{
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUFF_LEN)-txHead) > len )  // If there's a place to copy data
 722:	e0 91 06 20 	lds	r30, 0x2006
 726:	f0 91 07 20 	lds	r31, 0x2007
 72a:	23 e1       	ldi	r18, 0x13	; 19
 72c:	36 e2       	ldi	r19, 0x26	; 38
 72e:	2e 1b       	sub	r18, r30
 730:	3f 0b       	sbc	r19, r31
 732:	62 17       	cp	r22, r18
 734:	73 07       	cpc	r23, r19
 736:	50 f5       	brcc	.+84     	; 0x78c <spiSend+0x6a>
   {
      for ( uint8_t i = 0; i < len; i++ )
 738:	61 15       	cp	r22, r1
 73a:	71 05       	cpc	r23, r1
 73c:	79 f0       	breq	.+30     	; 0x75c <spiSend+0x3a>
 73e:	48 2f       	mov	r20, r24
 740:	a8 2f       	mov	r26, r24
 742:	b9 2f       	mov	r27, r25
      {
         *txHead = *data;
 744:	8d 91       	ld	r24, X+
 746:	81 93       	st	Z+, r24
 748:	8a 2f       	mov	r24, r26
 74a:	84 1b       	sub	r24, r20
void spiSend ( const uint8_t* data, uint16_t len )
{
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUFF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	86 17       	cp	r24, r22
 750:	97 07       	cpc	r25, r23
 752:	c0 f3       	brcs	.-16     	; 0x744 <spiSend+0x22>
 754:	e0 93 06 20 	sts	0x2006, r30
 758:	f0 93 07 20 	sts	0x2007, r31
         *txHead = *data;
         txHead++;
         data++;
      }
      
      if ( txBuff == txTail )    // Initial send
 75c:	80 91 04 20 	lds	r24, 0x2004
 760:	90 91 05 20 	lds	r25, 0x2005
 764:	8b 5b       	subi	r24, 0xBB	; 187
 766:	93 42       	sbci	r25, 0x23	; 35
 768:	a9 f4       	brne	.+42     	; 0x794 <spiSend+0x72>
      {
         SPI_EN();               // Enabling SPI
 76a:	a0 ee       	ldi	r26, 0xE0	; 224
 76c:	b8 e0       	ldi	r27, 0x08	; 8
 76e:	8c 91       	ld	r24, X
 770:	80 64       	ori	r24, 0x40	; 64
 772:	8c 93       	st	X, r24
         SPIC.DATA = *txTail;    // First character sent starts transmission
 774:	e0 91 04 20 	lds	r30, 0x2004
 778:	f0 91 05 20 	lds	r31, 0x2005
 77c:	81 91       	ld	r24, Z+
 77e:	13 96       	adiw	r26, 0x03	; 3
 780:	8c 93       	st	X, r24
         txTail++;
 782:	e0 93 04 20 	sts	0x2004, r30
 786:	f0 93 05 20 	sts	0x2005, r31
 78a:	08 95       	ret
      }
   }
   else
   {
      // Overflow or data too big
      DEB_2_SET();
 78c:	80 e4       	ldi	r24, 0x40	; 64
 78e:	e0 e6       	ldi	r30, 0x60	; 96
 790:	f6 e0       	ldi	r31, 0x06	; 6
 792:	85 83       	std	Z+5, r24	; 0x05
 794:	08 95       	ret

00000796 <spiRegisterTxEndCB>:


//****************************************************************************************
void spiRegisterTxEndCB ( pfnTxEnd cb)
{
   txEndCB = cb;   
 796:	80 93 b9 23 	sts	0x23B9, r24
 79a:	90 93 ba 23 	sts	0x23BA, r25
 79e:	08 95       	ret

000007a0 <__vector_22>:
}


//****************************************************************************************
ISR ( SPIC_INT_vect )
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
   // Is there critical section necessary ?
   if ( txTail < txHead )
 7c2:	80 91 04 20 	lds	r24, 0x2004
 7c6:	90 91 05 20 	lds	r25, 0x2005
 7ca:	20 91 06 20 	lds	r18, 0x2006
 7ce:	30 91 07 20 	lds	r19, 0x2007
 7d2:	82 17       	cp	r24, r18
 7d4:	93 07       	cpc	r25, r19
 7d6:	58 f4       	brcc	.+22     	; 0x7ee <__vector_22+0x4e>
   {
      SPIC.DATA = *txTail;
 7d8:	fc 01       	movw	r30, r24
 7da:	81 91       	ld	r24, Z+
 7dc:	a0 ee       	ldi	r26, 0xE0	; 224
 7de:	b8 e0       	ldi	r27, 0x08	; 8
 7e0:	13 96       	adiw	r26, 0x03	; 3
 7e2:	8c 93       	st	X, r24
      txTail++;
 7e4:	e0 93 04 20 	sts	0x2004, r30
 7e8:	f0 93 05 20 	sts	0x2005, r31
 7ec:	16 c0       	rjmp	.+44     	; 0x81a <__vector_22+0x7a>
   }
   else // All of data from buffer are send
   {
      txTail = txBuff;
 7ee:	8b eb       	ldi	r24, 0xBB	; 187
 7f0:	93 e2       	ldi	r25, 0x23	; 35
 7f2:	80 93 04 20 	sts	0x2004, r24
 7f6:	90 93 05 20 	sts	0x2005, r25
      txHead = txTail;
 7fa:	80 93 06 20 	sts	0x2006, r24
 7fe:	90 93 07 20 	sts	0x2007, r25
      
      if ( NULL != txEndCB )
 802:	e0 91 b9 23 	lds	r30, 0x23B9
 806:	f0 91 ba 23 	lds	r31, 0x23BA
 80a:	30 97       	sbiw	r30, 0x00	; 0
 80c:	09 f0       	breq	.+2      	; 0x810 <__vector_22+0x70>
      {
         txEndCB();         
 80e:	09 95       	icall
      }
      
      SPI_DIS();     // Disabling SPI (only tx is used)
 810:	e0 ee       	ldi	r30, 0xE0	; 224
 812:	f8 e0       	ldi	r31, 0x08	; 8
 814:	80 81       	ld	r24, Z
 816:	8f 7b       	andi	r24, 0xBF	; 191
 818:	80 83       	st	Z, r24
   }
 
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	bf 91       	pop	r27
 820:	af 91       	pop	r26
 822:	9f 91       	pop	r25
 824:	8f 91       	pop	r24
 826:	7f 91       	pop	r23
 828:	6f 91       	pop	r22
 82a:	5f 91       	pop	r21
 82c:	4f 91       	pop	r20
 82e:	3f 91       	pop	r19
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_14>:
   TCC4.CTRLGSET = TC45_CMD_RESTART_gc;
}


ISR ( TCC4_CCA_vect )
{
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
    
}
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <__vector_15>:


ISR ( TCC4_CCB_vect )
{   
 850:	1f 92       	push	r1
 852:	0f 92       	push	r0
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	0f 92       	push	r0
 858:	11 24       	eor	r1, r1
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
   DEB_3_SET();         // only for test
 872:	e0 e6       	ldi	r30, 0x60	; 96
 874:	f6 e0       	ldi	r31, 0x06	; 6
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	85 83       	std	Z+5, r24	; 0x05
   DEB_2_SET();         // only for test
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	85 83       	std	Z+5, r24	; 0x05
   adcStartChToGnd();   // ADC start;   
 87e:	0e 94 96 00 	call	0x12c	; 0x12c <adcStartChToGnd>
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_16>:



ISR ( TCC4_CCC_vect )
{
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	8f 93       	push	r24
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
   DEB_2_CLR();         // only for test
 8b4:	80 e4       	ldi	r24, 0x40	; 64
 8b6:	e0 e6       	ldi	r30, 0x60	; 96
 8b8:	f6 e0       	ldi	r31, 0x06	; 6
 8ba:	86 83       	std	Z+6, r24	; 0x06
    
   
   TCC4.CTRLGSET = TC45_CMD_RESTART_gc;   // Restarting timer - continous
 8bc:	88 e0       	ldi	r24, 0x08	; 8
 8be:	e0 e0       	ldi	r30, 0x00	; 0
 8c0:	f8 e0       	ldi	r31, 0x08	; 8
 8c2:	81 87       	std	Z+9, r24	; 0x09
 8c4:	ff 91       	pop	r31
 8c6:	ef 91       	pop	r30
 8c8:	8f 91       	pop	r24
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <__udivmodsi4>:
 8d4:	a1 e2       	ldi	r26, 0x21	; 33
 8d6:	1a 2e       	mov	r1, r26
 8d8:	aa 1b       	sub	r26, r26
 8da:	bb 1b       	sub	r27, r27
 8dc:	fd 01       	movw	r30, r26
 8de:	0d c0       	rjmp	.+26     	; 0x8fa <__udivmodsi4_ep>

000008e0 <__udivmodsi4_loop>:
 8e0:	aa 1f       	adc	r26, r26
 8e2:	bb 1f       	adc	r27, r27
 8e4:	ee 1f       	adc	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	a2 17       	cp	r26, r18
 8ea:	b3 07       	cpc	r27, r19
 8ec:	e4 07       	cpc	r30, r20
 8ee:	f5 07       	cpc	r31, r21
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__udivmodsi4_ep>
 8f2:	a2 1b       	sub	r26, r18
 8f4:	b3 0b       	sbc	r27, r19
 8f6:	e4 0b       	sbc	r30, r20
 8f8:	f5 0b       	sbc	r31, r21

000008fa <__udivmodsi4_ep>:
 8fa:	66 1f       	adc	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	1a 94       	dec	r1
 904:	69 f7       	brne	.-38     	; 0x8e0 <__udivmodsi4_loop>
 906:	60 95       	com	r22
 908:	70 95       	com	r23
 90a:	80 95       	com	r24
 90c:	90 95       	com	r25
 90e:	9b 01       	movw	r18, r22
 910:	ac 01       	movw	r20, r24
 912:	bd 01       	movw	r22, r26
 914:	cf 01       	movw	r24, r30
 916:	08 95       	ret

00000918 <__umulhisi3>:
 918:	a2 9f       	mul	r26, r18
 91a:	b0 01       	movw	r22, r0
 91c:	b3 9f       	mul	r27, r19
 91e:	c0 01       	movw	r24, r0
 920:	a3 9f       	mul	r26, r19
 922:	70 0d       	add	r23, r0
 924:	81 1d       	adc	r24, r1
 926:	11 24       	eor	r1, r1
 928:	91 1d       	adc	r25, r1
 92a:	b2 9f       	mul	r27, r18
 92c:	70 0d       	add	r23, r0
 92e:	81 1d       	adc	r24, r1
 930:	11 24       	eor	r1, r1
 932:	91 1d       	adc	r25, r1
 934:	08 95       	ret

00000936 <__utoa_ncheck>:
 936:	bb 27       	eor	r27, r27

00000938 <__utoa_common>:
 938:	fb 01       	movw	r30, r22
 93a:	55 27       	eor	r21, r21
 93c:	aa 27       	eor	r26, r26
 93e:	88 0f       	add	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	aa 1f       	adc	r26, r26
 944:	a4 17       	cp	r26, r20
 946:	10 f0       	brcs	.+4      	; 0x94c <__utoa_common+0x14>
 948:	a4 1b       	sub	r26, r20
 94a:	83 95       	inc	r24
 94c:	50 51       	subi	r21, 0x10	; 16
 94e:	b9 f7       	brne	.-18     	; 0x93e <__utoa_common+0x6>
 950:	a0 5d       	subi	r26, 0xD0	; 208
 952:	aa 33       	cpi	r26, 0x3A	; 58
 954:	08 f0       	brcs	.+2      	; 0x958 <__utoa_common+0x20>
 956:	a9 5d       	subi	r26, 0xD9	; 217
 958:	a1 93       	st	Z+, r26
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	79 f7       	brne	.-34     	; 0x93c <__utoa_common+0x4>
 95e:	b1 11       	cpse	r27, r1
 960:	b1 93       	st	Z+, r27
 962:	11 92       	st	Z+, r1
 964:	cb 01       	movw	r24, r22
 966:	0c 94 b5 04 	jmp	0x96a	; 0x96a <strrev>

0000096a <strrev>:
 96a:	dc 01       	movw	r26, r24
 96c:	fc 01       	movw	r30, r24
 96e:	67 2f       	mov	r22, r23
 970:	71 91       	ld	r23, Z+
 972:	77 23       	and	r23, r23
 974:	e1 f7       	brne	.-8      	; 0x96e <strrev+0x4>
 976:	32 97       	sbiw	r30, 0x02	; 2
 978:	04 c0       	rjmp	.+8      	; 0x982 <strrev+0x18>
 97a:	7c 91       	ld	r23, X
 97c:	6d 93       	st	X+, r22
 97e:	70 83       	st	Z, r23
 980:	62 91       	ld	r22, -Z
 982:	ae 17       	cp	r26, r30
 984:	bf 07       	cpc	r27, r31
 986:	c8 f3       	brcs	.-14     	; 0x97a <strrev+0x10>
 988:	08 95       	ret

0000098a <_exit>:
 98a:	f8 94       	cli

0000098c <__stop_program>:
 98c:	ff cf       	rjmp	.-2      	; 0x98c <__stop_program>
