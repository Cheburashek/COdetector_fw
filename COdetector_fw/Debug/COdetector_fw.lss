
COdetector_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00802000  000008a4  00000938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000362  008020b4  008020b4  000009ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000305a  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b2b  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001de3  00000000  00000000  00004741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00006524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001c245  00000000  00000000  00006a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012dd  00000000  00000000  00022c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00023f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000084a4  00000000  00000000  000240ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	9f c3       	rjmp	.+1854   	; 0x778 <__vector_14>
  3a:	00 00       	nop
  3c:	b1 c3       	rjmp	.+1890   	; 0x7a0 <__vector_15>
  3e:	00 00       	nop
  40:	d8 c3       	rjmp	.+1968   	; 0x7f2 <__vector_16>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c3       	rjmp	.+1610   	; 0x6a4 <__vector_22>
  5a:	00 00       	nop
  5c:	c5 c2       	rjmp	.+1418   	; 0x5e8 <__vector_23>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	8d c2       	rjmp	.+1306   	; 0x580 <__vector_25>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	5d c0       	rjmp	.+186    	; 0x144 <__vector_34>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e4 ea       	ldi	r30, 0xA4	; 164
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 3b       	cpi	r26, 0xB4	; 180
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	24 e2       	ldi	r18, 0x24	; 36
  d0:	a4 eb       	ldi	r26, 0xB4	; 180
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 31       	cpi	r26, 0x16	; 22
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	27 d1       	rcall	.+590    	; 0x32e <main>
  e0:	df c3       	rjmp	.+1982   	; 0x8a0 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <adcInit>:
      - interrupt on complete conversion

   */
   
   
   PORTA.DIRCLR = CFG_ADC_PIN_MASK;   
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	e0 e0       	ldi	r30, 0x00	; 0
  e8:	f6 e0       	ldi	r31, 0x06	; 6
  ea:	82 83       	std	Z+2, r24	; 0x02
   
          
               // Enabling ADC block
   ADCA.INTFLAGS = 0x00;
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f2 e0       	ldi	r31, 0x02	; 2
  f0:	16 82       	std	Z+6, r1	; 0x06
   ADCA.REFCTRL = ADC_REFSEL_INT1V_gc;
  f2:	12 82       	std	Z+2, r1	; 0x02
   ADCA.EVCTRL = 0x00;  // No events
  f4:	13 82       	std	Z+3, r1	; 0x03
   ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc ;
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	94 83       	std	Z+4, r25	; 0x04
   
   ADCA.CH0.AVGCTRL = ADC_SAMPNUM_1X_gc;   // Number of samples (averaging) - 16bit
  fa:	14 a6       	std	Z+44, r1	; 0x2c
   ADCA.CTRLB = ADC_RESOLUTION_MT12BIT_gc;
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	91 83       	std	Z+1, r25	; 0x01
 
        
   ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;   // Single ended input             
 100:	80 a3       	std	Z+32, r24	; 0x20
   
   ADCA.CTRLB &= ~(1<<4);   // Unsigned mode
 102:	21 81       	ldd	r18, Z+1	; 0x01
 104:	2f 7e       	andi	r18, 0xEF	; 239
 106:	21 83       	std	Z+1, r18	; 0x01
   ADCA.CH0.INTCTRL = CFG_PRIO_ADC;                   // From boardCfg.h
 108:	92 a3       	std	Z+34, r25	; 0x22

   // Calibration:
  
   ADCA.CH0.OFFSETCORR0 = ADC_OFFSET_RAW_VAL & 0xFF;
 10a:	9a ea       	ldi	r25, 0xAA	; 170
 10c:	90 a7       	std	Z+40, r25	; 0x28
   ADCA.CH0.OFFSETCORR1 = ADC_OFFSET_RAW_VAL >> 8;  
 10e:	11 a6       	std	Z+41, r1	; 0x29

   ADCA.CH0.GAINCORR0 = 0x00;
 110:	12 a6       	std	Z+42, r1	; 0x2a
   ADCA.CH0.GAINCORR1 = 0x08;          // Gain correction x1
 112:	98 e0       	ldi	r25, 0x08	; 8
 114:	93 a7       	std	Z+43, r25	; 0x2b
   ADCA.CH0.CORRCTRL = ADC_CH_CORREN_bm;     // Correction enabled
 116:	87 a3       	std	Z+39, r24	; 0x27
   
   ADC_EN();
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
   
   //TODO: store in NV
   LOG_TXT ( ">>init<<   ADC initialized\n", 28 );
 11e:	6c e1       	ldi	r22, 0x1C	; 28
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	90 e2       	ldi	r25, 0x20	; 32
 124:	0f c1       	rjmp	.+542    	; 0x344 <serialSendC>
 126:	08 95       	ret

00000128 <adcStartChToGnd>:


//****************************************************************************************
void adcStartChToGnd ( void )
{
   ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f2 e0       	ldi	r31, 0x02	; 2
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 a3       	std	Z+32, r24	; 0x20
   ADCA.CH0.MUXCTRL = CFG_ADC_MUXPOS;  
 130:	11 a2       	std	Z+33, r1	; 0x21
   ADC_START();
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <adcRegisterEndCb>:


//****************************************************************************************
void adcRegisterEndCb ( pfnAdcEnd_t cb )
{
   convEndCB = cb; 
 13a:	80 93 b4 20 	sts	0x20B4, r24
 13e:	90 93 b5 20 	sts	0x20B5, r25
 142:	08 95       	ret

00000144 <__vector_34>:
}


//****************************************************************************************
ISR ( ADCA_CH0_vect )
{  
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
   DEB_3_CLR();
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	e0 e6       	ldi	r30, 0x60	; 96
 16a:	f6 e0       	ldi	r31, 0x06	; 6
 16c:	86 83       	std	Z+6, r24	; 0x06

   if ( NULL != convEndCB )   
 16e:	e0 91 b4 20 	lds	r30, 0x20B4
 172:	f0 91 b5 20 	lds	r31, 0x20B5
 176:	30 97       	sbiw	r30, 0x00	; 0
 178:	09 f0       	breq	.+2      	; 0x17c <__vector_34+0x38>
   {
      convEndCB ();      
 17a:	09 95       	icall
   }   
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <boardInit>:
      // page 117 in manual (power reduction)!!!
   
   
   
   // Debug LEDs***********************:
   PORTD.DIRSET = PIN5_bm;
 19e:	e0 e6       	ldi	r30, 0x60	; 96
 1a0:	f6 e0       	ldi	r31, 0x06	; 6
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN6_bm;
 1a6:	80 e4       	ldi	r24, 0x40	; 64
 1a8:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN7_bm;   
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	81 83       	std	Z+1, r24	; 0x01
   #elif ( F_CPU == F_CPU_2MHZ )
      LOG_TXT ( ">>clock<<   Clock 2MHZ\n", 24 );
      // Default after restart
      
   #elif ( F_CPU == F_CPU_8MHZ )   
      CCP=CCP_IOREG_gc;                          // Protected register
 1ae:	88 ed       	ldi	r24, 0xD8	; 216
 1b0:	84 bf       	out	0x34, r24	; 52
      CLK.CTRL = CLK_SCLKSEL_RC8M_gc;            // 32khz internal
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	80 93 40 00 	sts	0x0040, r24
      LOG_TXT ( ">>clock<<  Clock 8MHZ\n", 23 );
 1b8:	67 e1       	ldi	r22, 0x17	; 23
 1ba:	84 e2       	ldi	r24, 0x24	; 36
 1bc:	90 e2       	ldi	r25, 0x20	; 32
 1be:	c2 d0       	rcall	.+388    	; 0x344 <serialSendC>
   
   // Initializations*******************:
   

   #ifdef LOG_USARTC0
      serialInitC();
 1c0:	07 d1       	rcall	.+526    	; 0x3d0 <serialInitC>
   #endif

   spiInit();
 1c2:	1c d2       	rcall	.+1080   	; 0x5fc <spiInit>
   pdcInit();
 1c4:	32 d0       	rcall	.+100    	; 0x22a <pdcInit>
   adcInit();
 1c6:	8e df       	rcall	.-228    	; 0xe4 <adcInit>
   timerInit();
 1c8:	bb d2       	rcall	.+1398   	; 0x740 <timerInit>
  
   CFG_GLOBAL_INT_ENABLE();
 1ca:	8f b7       	in	r24, 0x3f	; 63
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	8f bf       	out	0x3f, r24	; 63
   PRIO_ALL_LEVELS_ENABLE();
 1d0:	e2 ea       	ldi	r30, 0xA2	; 162
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	87 60       	ori	r24, 0x07	; 7
 1d8:	80 83       	st	Z, r24
   
   LOG_TXT ( ">>init<<   Board initialized\n", 30 );
 1da:	6e e1       	ldi	r22, 0x1E	; 30
 1dc:	8b e3       	ldi	r24, 0x3B	; 59
 1de:	90 e2       	ldi	r25, 0x20	; 32
 1e0:	b1 c0       	rjmp	.+354    	; 0x344 <serialSendC>
 1e2:	08 95       	ret

000001e4 <pdcChipDisable>:

// *************************************************************************
// Function to set callback in SPI.c (end of transmission)
static void pdcChipDisable ( void )
{
   SCE_HI();
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	e0 e4       	ldi	r30, 0x40	; 64
 1e8:	f6 e0       	ldi	r31, 0x06	; 6
 1ea:	85 83       	std	Z+5, r24	; 0x05
 1ec:	08 95       	ret

000001ee <pdcSend>:
}

// *************************************************************************
// Function to send data
static void pdcSend( uint8_t DC, uint8_t data )
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	1f 92       	push	r1
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	69 83       	std	Y+1, r22	; 0x01
   SCE_LO();
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	e0 e4       	ldi	r30, 0x40	; 64
 1fe:	f6 e0       	ldi	r31, 0x06	; 6
 200:	96 83       	std	Z+6, r25	; 0x06
   
   switch(DC)
 202:	88 23       	and	r24, r24
 204:	29 f0       	breq	.+10     	; 0x210 <pdcSend+0x22>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	39 f4       	brne	.+14     	; 0x218 <pdcSend+0x2a>
   {
      case DC_DATA:
         DC_HI();
 20a:	80 e1       	ldi	r24, 0x10	; 16
 20c:	85 83       	std	Z+5, r24	; 0x05
      break;
 20e:	04 c0       	rjmp	.+8      	; 0x218 <pdcSend+0x2a>
      
      case DC_CMD:
         DC_LO();
 210:	80 e1       	ldi	r24, 0x10	; 16
 212:	e0 e4       	ldi	r30, 0x40	; 64
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	86 83       	std	Z+6, r24	; 0x06
      break;
   }
   
   spiSend( &data, 1 );
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	02 d2       	rcall	.+1028   	; 0x626 <spiSend>
   
   //_delay_us(100);	  
     
}
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <pdcInit>:

// *************************************************************************
// Function to configure PDC8544
void pdcInit( void )
{
   spiRegisterTxEndCB ( pdcChipDisable );
 22a:	82 ef       	ldi	r24, 0xF2	; 242
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	35 d2       	rcall	.+1130   	; 0x69a <spiRegisterTxEndCB>

// *************************************************************************
// Function to reset PDC8544
static void pdcReset( void )
{   
   RST_LO();
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	e0 e4       	ldi	r30, 0x40	; 64
 234:	f6 e0       	ldi	r31, 0x06	; 6
 236:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	8f e2       	ldi	r24, 0x2F	; 47
 23a:	95 e7       	ldi	r25, 0x75	; 117
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <pdcInit+0x12>
 240:	00 c0       	rjmp	.+0      	; 0x242 <pdcInit+0x18>
 242:	00 00       	nop
   _delay_ms(15);
   RST_HI();
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	9d e0       	ldi	r25, 0x0D	; 13
 24a:	9a 95       	dec	r25
 24c:	f1 f7       	brne	.-4      	; 0x24a <pdcInit+0x20>
 24e:	00 00       	nop
   spiRegisterTxEndCB ( pdcChipDisable );

   pdcReset(); 
   
   
   pdcSend( DC_CMD, 0x21 );	// Extended cmd
 250:	61 e2       	ldi	r22, 0x21	; 33
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	cc df       	rcall	.-104    	; 0x1ee <pdcSend>
   pdcSend( DC_CMD, 0xE0 );	// Bias
 256:	60 ee       	ldi	r22, 0xE0	; 224
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	c9 df       	rcall	.-110    	; 0x1ee <pdcSend>
   pdcSend( DC_CMD, 0x04 );	// Temp. control
 25c:	64 e0       	ldi	r22, 0x04	; 4
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	c6 df       	rcall	.-116    	; 0x1ee <pdcSend>
   pdcSend( DC_CMD, 0xCB );	// Set V
 262:	6b ec       	ldi	r22, 0xCB	; 203
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	c3 df       	rcall	.-122    	; 0x1ee <pdcSend>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
 268:	60 e2       	ldi	r22, 0x20	; 32
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	c0 df       	rcall	.-128    	; 0x1ee <pdcSend>
   pdcSend( DC_CMD, 0x0C );	// Normal mode
 26e:	6c e0       	ldi	r22, 0x0C	; 12
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	bd df       	rcall	.-134    	; 0x1ee <pdcSend>

   LOG_TXT ( ">>init<<   PDC8544 initialized\n", 32 );   
 274:	60 e2       	ldi	r22, 0x20	; 32
 276:	89 e5       	ldi	r24, 0x59	; 89
 278:	90 e2       	ldi	r25, 0x20	; 32
 27a:	64 c0       	rjmp	.+200    	; 0x344 <serialSendC>
 27c:	08 95       	ret

0000027e <endOfMeas>:



//****************************************************************************************
static void endOfMeas ( void )
{
 27e:	0f 93       	push	r16
   
   //LOG_UINT ( "", 0, ADCA.CH0RES );
   static uint8_t measNum;     // Number of sample
   static uint32_t measSum;    // For averaging
   
   measSum += ADCA.CH0RES;
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f2 e0       	ldi	r31, 0x02	; 2
 284:	20 89       	ldd	r18, Z+16	; 0x10
 286:	31 89       	ldd	r19, Z+17	; 0x11
 288:	80 91 b7 20 	lds	r24, 0x20B7
 28c:	90 91 b8 20 	lds	r25, 0x20B8
 290:	a0 91 b9 20 	lds	r26, 0x20B9
 294:	b0 91 ba 20 	lds	r27, 0x20BA
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	62 0f       	add	r22, r18
 29e:	73 1f       	adc	r23, r19
 2a0:	81 1d       	adc	r24, r1
 2a2:	91 1d       	adc	r25, r1
 2a4:	60 93 b7 20 	sts	0x20B7, r22
 2a8:	70 93 b8 20 	sts	0x20B8, r23
 2ac:	80 93 b9 20 	sts	0x20B9, r24
 2b0:	90 93 ba 20 	sts	0x20BA, r25
   measNum ++;
 2b4:	20 91 b6 20 	lds	r18, 0x20B6
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	20 93 b6 20 	sts	0x20B6, r18
   
   if ( NUMBER_OF_MEAS == measNum )
 2be:	25 30       	cpi	r18, 0x05	; 5
 2c0:	a1 f5       	brne	.+104    	; 0x32a <endOfMeas+0xac>
   {
      measSum = (((measSum / NUMBER_OF_MEAS)*DIVIDER)/65535);   // For 16b res
 2c2:	25 e0       	ldi	r18, 0x05	; 5
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	af d2       	rcall	.+1374   	; 0x82a <__udivmodsi4>
 2cc:	a8 ee       	ldi	r26, 0xE8	; 232
 2ce:	b3 e0       	ldi	r27, 0x03	; 3
 2d0:	ce d2       	rcall	.+1436   	; 0x86e <__muluhisi3>
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	3f ef       	ldi	r19, 0xFF	; 255
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	a7 d2       	rcall	.+1358   	; 0x82a <__udivmodsi4>
 2dc:	20 93 b7 20 	sts	0x20B7, r18
 2e0:	30 93 b8 20 	sts	0x20B8, r19
 2e4:	40 93 b9 20 	sts	0x20B9, r20
 2e8:	50 93 ba 20 	sts	0x20BA, r21
     

      LOG_UINT ( "", 0, measSum );      
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	8a e3       	ldi	r24, 0x3A	; 58
 2f0:	90 e2       	ldi	r25, 0x20	; 32
 2f2:	91 d0       	rcall	.+290    	; 0x416 <serialLogUintC>
      LOG_BIN ( "", 0, measSum, 16 ); 
 2f4:	20 91 b7 20 	lds	r18, 0x20B7
 2f8:	30 91 b8 20 	lds	r19, 0x20B8
 2fc:	40 91 b9 20 	lds	r20, 0x20B9
 300:	50 91 ba 20 	lds	r21, 0x20BA
 304:	00 e1       	ldi	r16, 0x10	; 16
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8a e3       	ldi	r24, 0x3A	; 58
 30a:	90 e2       	ldi	r25, 0x20	; 32
 30c:	f8 d0       	rcall	.+496    	; 0x4fe <serialLogBinaryC>
      
      DEB_1_TGL();
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	e0 e6       	ldi	r30, 0x60	; 96
 312:	f6 e0       	ldi	r31, 0x06	; 6
 314:	87 83       	std	Z+7, r24	; 0x07
      measSum = 0;
 316:	10 92 b7 20 	sts	0x20B7, r1
 31a:	10 92 b8 20 	sts	0x20B8, r1
 31e:	10 92 b9 20 	sts	0x20B9, r1
 322:	10 92 ba 20 	sts	0x20BA, r1
      measNum = 0;
 326:	10 92 b6 20 	sts	0x20B6, r1
      
   }   
   

}
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <main>:


//****************************************************************************************
int main(void)
{     
   PORTA.DIRSET = CFG_PULSE_PIN_MASK;  // Pulse pin as output
 32e:	e0 e0       	ldi	r30, 0x00	; 0
 330:	f6 e0       	ldi	r31, 0x06	; 6
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	81 83       	std	Z+1, r24	; 0x01
   PULSE_CLR();                        // Cleared - inverted logic
 336:	86 83       	std	Z+6, r24	; 0x06
   boardInit();                        // Board peripherals initialization 
 338:	32 df       	rcall	.-412    	; 0x19e <boardInit>
     
   adcRegisterEndCb( endOfMeas );      // Registering CB
 33a:	8f e3       	ldi	r24, 0x3F	; 63
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	fd de       	rcall	.-518    	; 0x13a <adcRegisterEndCb>
   timerSHARP();                       // Starting measuring loop
 340:	08 d2       	rcall	.+1040   	; 0x752 <timerSHARP>
 342:	ff cf       	rjmp	.-2      	; 0x342 <main+0x14>

00000344 <serialSendC>:

void serialSendC ( const uint8_t* data, uint8_t len )
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
 344:	20 91 02 20 	lds	r18, 0x2002
 348:	30 91 03 20 	lds	r19, 0x2003
 34c:	ec eb       	ldi	r30, 0xBC	; 188
 34e:	f1 e2       	ldi	r31, 0x21	; 33
 350:	e2 1b       	sub	r30, r18
 352:	f3 0b       	sbc	r31, r19
 354:	46 2f       	mov	r20, r22
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	4e 17       	cp	r20, r30
 35a:	5f 07       	cpc	r21, r31
 35c:	a4 f5       	brge	.+104    	; 0x3c6 <serialSendC+0x82>
   {
      for ( uint8_t i = 0; i < len; i++ )
 35e:	66 23       	and	r22, r22
 360:	c9 f0       	breq	.+50     	; 0x394 <serialSendC+0x50>
 362:	a8 2f       	mov	r26, r24
 364:	b9 2f       	mov	r27, r25
 366:	52 2f       	mov	r21, r18
 368:	43 2f       	mov	r20, r19
      {
         *txHead = *data;
 36a:	9d 91       	ld	r25, X+
 36c:	e5 2f       	mov	r30, r21
 36e:	f4 2f       	mov	r31, r20
 370:	91 93       	st	Z+, r25
 372:	9e 2f       	mov	r25, r30
 374:	92 1b       	sub	r25, r18
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 376:	96 17       	cp	r25, r22
 378:	18 f4       	brcc	.+6      	; 0x380 <serialSendC+0x3c>
      {
         *txHead = *data;
         txHead++;
 37a:	5e 2f       	mov	r21, r30
 37c:	4f 2f       	mov	r20, r31
 37e:	f5 cf       	rjmp	.-22     	; 0x36a <serialSendC+0x26>
 380:	61 50       	subi	r22, 0x01	; 1
 382:	86 2f       	mov	r24, r22
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	28 0f       	add	r18, r24
 38a:	39 1f       	adc	r19, r25
 38c:	20 93 02 20 	sts	0x2002, r18
 390:	30 93 03 20 	sts	0x2003, r19
         data++;                 
      }
      
      if ( (txBuff == txTail) && (TRUE == initFlag) )       // Initial send
 394:	80 91 00 20 	lds	r24, 0x2000
 398:	90 91 01 20 	lds	r25, 0x2001
 39c:	8c 5b       	subi	r24, 0xBC	; 188
 39e:	90 42       	sbci	r25, 0x20	; 32
 3a0:	b1 f4       	brne	.+44     	; 0x3ce <serialSendC+0x8a>
 3a2:	80 91 bb 20 	lds	r24, 0x20BB
 3a6:	88 23       	and	r24, r24
 3a8:	91 f0       	breq	.+36     	; 0x3ce <serialSendC+0x8a>
      {        
         USARTC0.DATA = *txTail;    // First character sent starts transmission
 3aa:	80 91 bc 20 	lds	r24, 0x20BC
 3ae:	80 93 c0 08 	sts	0x08C0, r24
         txTail++;
 3b2:	80 91 00 20 	lds	r24, 0x2000
 3b6:	90 91 01 20 	lds	r25, 0x2001
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	80 93 00 20 	sts	0x2000, r24
 3c0:	90 93 01 20 	sts	0x2001, r25
 3c4:	08 95       	ret
      }                
   }
   else
   {
      // Overflow or data too big  
      DEB_3_SET();    
 3c6:	80 e8       	ldi	r24, 0x80	; 128
 3c8:	e0 e6       	ldi	r30, 0x60	; 96
 3ca:	f6 e0       	ldi	r31, 0x06	; 6
 3cc:	85 83       	std	Z+5, r24	; 0x05
 3ce:	08 95       	ret

000003d0 <serialInitC>:
// Serial on PORTC initialization:
void serialInitC ( void )
{
   // PORTC configuration:
   
   PORTC.REMAP &= ~PORT_USART0_bm;       // Don't remap ports from 0-3 to 4-7   
 3d0:	e0 e4       	ldi	r30, 0x40	; 64
 3d2:	f6 e0       	ldi	r31, 0x06	; 6
 3d4:	86 85       	ldd	r24, Z+14	; 0x0e
 3d6:	8f 7e       	andi	r24, 0xEF	; 239
 3d8:	86 87       	std	Z+14, r24	; 0x0e
   PORTC.DIRSET = CFG_TXC0_PIN_MASK;     // Output for Tx (pin must be manually set to output)
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	81 83       	std	Z+1, r24	; 0x01
   PORTC.DIRCLR = CFG_RXC0_PIN_MASK;     // Input for Rx
 3de:	94 e0       	ldi	r25, 0x04	; 4
 3e0:	92 83       	std	Z+2, r25	; 0x02
   
   // CTRLC:
   USARTC0.CTRLC =  ( USART_CMODE_ASYNCHRONOUS_gc |    // Asynchronous transfer mode
 3e2:	e0 ec       	ldi	r30, 0xC0	; 192
 3e4:	f8 e0       	ldi	r31, 0x08	; 8
 3e6:	93 e0       	ldi	r25, 0x03	; 3
 3e8:	94 83       	std	Z+4, r25	; 0x04
                      USART_PMODE_DISABLED_gc     |    // Parity mode disabled
                      USART_CHSIZE_8BIT_gc        );   // 8b per frame                   
                      
   USARTC0.CTRLC &= ~USART_SBMODE_bm;  // Stop bit disabled
 3ea:	94 81       	ldd	r25, Z+4	; 0x04
 3ec:	97 7f       	andi	r25, 0xF7	; 247
 3ee:	94 83       	std	Z+4, r25	; 0x04
   
   // Baud rate
       
   USARTC0.BAUDCTRLA =  BSEL_BAUD_VAL;           // 8 LSB of BSEL
 3f0:	9e e6       	ldi	r25, 0x6E	; 110
 3f2:	96 83       	std	Z+6, r25	; 0x06
   USARTC0.BAUDCTRLB =  BSCALE_BAUD_VAL | ((BSEL_BAUD_VAL >> 8) & 0x0F) ;           // 4 MSB of BSEL and BSCALE    
 3f4:	90 eb       	ldi	r25, 0xB0	; 176
 3f6:	97 83       	std	Z+7, r25	; 0x07
       
        
   // Priorities from common.h:
   USARTC0.CTRLA = CFG_PRIO_USARTC0;  
 3f8:	82 83       	std	Z+2, r24	; 0x02
         
   USARTC0.CTRLB |= ( USART_TXEN_bm |    // Transmitter enabled
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	8c 60       	ori	r24, 0x0C	; 12
 3fe:	83 83       	std	Z+3, r24	; 0x03
                      //USART_RXEN_bm |    // Receiver enabled
                      USART_CLK2X_bm );  // Enabling 2x clock    
                       
   USARTC0.STATUS &= ~USART_TXCIF_bm;    // Clearing tx interrupt flag
 400:	81 81       	ldd	r24, Z+1	; 0x01
 402:	8f 7b       	andi	r24, 0xBF	; 191
 404:	81 83       	std	Z+1, r24	; 0x01
   
   LOG_TXT ( ">>init<<   Serial initialized\n", 31 );
 406:	6f e1       	ldi	r22, 0x1F	; 31
 408:	89 e7       	ldi	r24, 0x79	; 121
 40a:	90 e2       	ldi	r25, 0x20	; 32
 40c:	9b df       	rcall	.-202    	; 0x344 <serialSendC>
   
   initFlag = TRUE;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 bb 20 	sts	0x20BB, r24
 414:	08 95       	ret

00000416 <serialLogUintC>:


//****************************************************************************************
// TODO: modify this
void serialLogUintC ( uint8_t* txt, uint8_t len, uint32_t val )
{
 416:	3f 92       	push	r3
 418:	4f 92       	push	r4
 41a:	5f 92       	push	r5
 41c:	6f 92       	push	r6
 41e:	7f 92       	push	r7
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2a 97       	sbiw	r28, 0x0a	; 10
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	de bf       	out	0x3e, r29	; 62
 442:	8c 01       	movw	r16, r24
 444:	86 2e       	mov	r8, r22
 446:	69 01       	movw	r12, r18
 448:	7a 01       	movw	r14, r20
   char temp[10];
     
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
 44a:	21 15       	cp	r18, r1
 44c:	31 05       	cpc	r19, r1
 44e:	41 05       	cpc	r20, r1
 450:	51 05       	cpc	r21, r1
 452:	29 f4       	brne	.+10     	; 0x45e <serialLogUintC+0x48>
   {
      numLen = 1;
      temp[0] = 0x30;   // 0
 454:	80 e3       	ldi	r24, 0x30	; 48
 456:	89 83       	std	Y+1, r24	; 0x01
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
   {
      numLen = 1;
 458:	99 24       	eor	r9, r9
 45a:	93 94       	inc	r9
 45c:	30 c0       	rjmp	.+96     	; 0x4be <serialLogUintC+0xa8>
   char temp[10];
     
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
 45e:	ca 01       	movw	r24, r20
 460:	b9 01       	movw	r22, r18
 462:	91 2c       	mov	r9, r1
   else
   {
      while ( tempVal )
      {
         numLen++;
         tempVal /= 10;
 464:	0f 2e       	mov	r0, r31
 466:	fa e0       	ldi	r31, 0x0A	; 10
 468:	4f 2e       	mov	r4, r31
 46a:	51 2c       	mov	r5, r1
 46c:	61 2c       	mov	r6, r1
 46e:	71 2c       	mov	r7, r1
 470:	f0 2d       	mov	r31, r0
   }
   else
   {
      while ( tempVal )
      {
         numLen++;
 472:	93 94       	inc	r9
         tempVal /= 10;
 474:	a3 01       	movw	r20, r6
 476:	92 01       	movw	r18, r4
 478:	d8 d1       	rcall	.+944    	; 0x82a <__udivmodsi4>
 47a:	ca 01       	movw	r24, r20
 47c:	b9 01       	movw	r22, r18
      numLen = 1;
      temp[0] = 0x30;   // 0
   }
   else
   {
      while ( tempVal )
 47e:	21 15       	cp	r18, r1
 480:	31 05       	cpc	r19, r1
 482:	41 05       	cpc	r20, r1
 484:	51 05       	cpc	r21, r1
 486:	a9 f7       	brne	.-22     	; 0x472 <serialLogUintC+0x5c>
      {
         numLen++;
         tempVal /= 10;
      }
      
      for ( uint8_t i = numLen; i >> 0; i-- )
 488:	99 20       	and	r9, r9
 48a:	c9 f0       	breq	.+50     	; 0x4be <serialLogUintC+0xa8>
   }
   else
   {
      while ( tempVal )
      {
         numLen++;
 48c:	39 2c       	mov	r3, r9
         tempVal /= 10;
      }
      
      for ( uint8_t i = numLen; i >> 0; i-- )
      {       
         temp[i-1] = (val % 10) + 0x30;  // ASCII
 48e:	0f 2e       	mov	r0, r31
 490:	fa e0       	ldi	r31, 0x0A	; 10
 492:	4f 2e       	mov	r4, r31
 494:	51 2c       	mov	r5, r1
 496:	61 2c       	mov	r6, r1
 498:	71 2c       	mov	r7, r1
 49a:	f0 2d       	mov	r31, r0
 49c:	5e 01       	movw	r10, r28
 49e:	a3 0c       	add	r10, r3
 4a0:	b1 1c       	adc	r11, r1
 4a2:	c7 01       	movw	r24, r14
 4a4:	b6 01       	movw	r22, r12
 4a6:	a3 01       	movw	r20, r6
 4a8:	92 01       	movw	r18, r4
 4aa:	bf d1       	rcall	.+894    	; 0x82a <__udivmodsi4>
 4ac:	60 5d       	subi	r22, 0xD0	; 208
 4ae:	f5 01       	movw	r30, r10
 4b0:	60 83       	st	Z, r22
         val /= 10;
 4b2:	c2 2e       	mov	r12, r18
 4b4:	d3 2e       	mov	r13, r19
 4b6:	e4 2e       	mov	r14, r20
 4b8:	f5 2e       	mov	r15, r21
      {
         numLen++;
         tempVal /= 10;
      }
      
      for ( uint8_t i = numLen; i >> 0; i-- )
 4ba:	3a 94       	dec	r3
 4bc:	79 f7       	brne	.-34     	; 0x49c <serialLogUintC+0x86>
   }
   
      
   //(void) utoa ( (unsigned int)val, temp, 10 );
   
   serialSendC ( (const uint8_t*) txt, len );
 4be:	68 2d       	mov	r22, r8
 4c0:	c8 01       	movw	r24, r16
 4c2:	40 df       	rcall	.-384    	; 0x344 <serialSendC>
   serialSendC ( (const uint8_t*) temp, numLen );
 4c4:	69 2d       	mov	r22, r9
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	3c df       	rcall	.-392    	; 0x344 <serialSendC>
   serialSendC ( (const uint8_t*) "\n", 2 );
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	89 e3       	ldi	r24, 0x39	; 57
 4d0:	90 e2       	ldi	r25, 0x20	; 32
 4d2:	38 df       	rcall	.-400    	; 0x344 <serialSendC>
   
}
 4d4:	2a 96       	adiw	r28, 0x0a	; 10
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	ef 90       	pop	r14
 4e6:	df 90       	pop	r13
 4e8:	cf 90       	pop	r12
 4ea:	bf 90       	pop	r11
 4ec:	af 90       	pop	r10
 4ee:	9f 90       	pop	r9
 4f0:	8f 90       	pop	r8
 4f2:	7f 90       	pop	r7
 4f4:	6f 90       	pop	r6
 4f6:	5f 90       	pop	r5
 4f8:	4f 90       	pop	r4
 4fa:	3f 90       	pop	r3
 4fc:	08 95       	ret

000004fe <serialLogBinaryC>:


//****************************************************************************************
// 
void serialLogBinaryC ( uint8_t* txt, uint8_t len, uint32_t val, uint8_t bitsNum )
{
 4fe:	af 92       	push	r10
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
   
   
   serialSendC ( (const uint8_t*) txt, len );
   serialSendC ( (const uint8_t*) temp, bitsNum );
   serialSendC ( (const uint8_t*) "\n", 2 );
}
 516:	cd b6       	in	r12, 0x3d	; 61
 518:	de b6       	in	r13, 0x3e	; 62
//****************************************************************************************
// 
void serialLogBinaryC ( uint8_t* txt, uint8_t len, uint32_t val, uint8_t bitsNum )
{
   uint32_t tempVal = val;   
   char temp[bitsNum];   
 51a:	ed b7       	in	r30, 0x3d	; 61
 51c:	fe b7       	in	r31, 0x3e	; 62
 51e:	e0 1b       	sub	r30, r16
 520:	f1 09       	sbc	r31, r1
 522:	ed bf       	out	0x3d, r30	; 61
 524:	fe bf       	out	0x3e, r31	; 62
 526:	31 96       	adiw	r30, 0x01	; 1
 528:	7f 01       	movw	r14, r30
 52a:	df 01       	movw	r26, r30
   
   for ( uint8_t i = 1; i <= bitsNum; i++ ) 
 52c:	00 23       	and	r16, r16
 52e:	99 f0       	breq	.+38     	; 0x556 <serialLogBinaryC+0x58>
 530:	71 e0       	ldi	r23, 0x01	; 1
   {
      temp[bitsNum-i] = (val & 0x01) + 0x30;
 532:	a0 2e       	mov	r10, r16
 534:	b1 2c       	mov	r11, r1
 536:	f5 01       	movw	r30, r10
 538:	e7 1b       	sub	r30, r23
 53a:	f1 09       	sbc	r31, r1
 53c:	ea 0f       	add	r30, r26
 53e:	fb 1f       	adc	r31, r27
 540:	12 2f       	mov	r17, r18
 542:	11 70       	andi	r17, 0x01	; 1
 544:	10 5d       	subi	r17, 0xD0	; 208
 546:	10 83       	st	Z, r17
      val >>= 1;     
 548:	56 95       	lsr	r21
 54a:	47 95       	ror	r20
 54c:	37 95       	ror	r19
 54e:	27 95       	ror	r18
void serialLogBinaryC ( uint8_t* txt, uint8_t len, uint32_t val, uint8_t bitsNum )
{
   uint32_t tempVal = val;   
   char temp[bitsNum];   
   
   for ( uint8_t i = 1; i <= bitsNum; i++ ) 
 550:	7f 5f       	subi	r23, 0xFF	; 255
 552:	07 17       	cp	r16, r23
 554:	80 f7       	brcc	.-32     	; 0x536 <serialLogBinaryC+0x38>
      temp[bitsNum-i] = (val & 0x01) + 0x30;
      val >>= 1;     
   }
   
   
   serialSendC ( (const uint8_t*) txt, len );
 556:	f6 de       	rcall	.-532    	; 0x344 <serialSendC>
   serialSendC ( (const uint8_t*) temp, bitsNum );
 558:	60 2f       	mov	r22, r16
 55a:	c7 01       	movw	r24, r14
 55c:	f3 de       	rcall	.-538    	; 0x344 <serialSendC>
   serialSendC ( (const uint8_t*) "\n", 2 );
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	89 e3       	ldi	r24, 0x39	; 57
 562:	90 e2       	ldi	r25, 0x20	; 32
 564:	ef de       	rcall	.-546    	; 0x344 <serialSendC>
}
 566:	cd be       	out	0x3d, r12	; 61
 568:	de be       	out	0x3e, r13	; 62
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	df 90       	pop	r13
 578:	cf 90       	pop	r12
 57a:	bf 90       	pop	r11
 57c:	af 90       	pop	r10
 57e:	08 95       	ret

00000580 <__vector_25>:

//****************************************************************************************
// Serial Tx complete ISR ( tx flag is cleared automatically):

ISR ( USARTC0_TXC_vect )
{             
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	8f 93       	push	r24
 58c:	9f 93       	push	r25
 58e:	ef 93       	push	r30
 590:	ff 93       	push	r31
   if ( txTail < txHead )
 592:	e0 91 00 20 	lds	r30, 0x2000
 596:	f0 91 01 20 	lds	r31, 0x2001
 59a:	80 91 02 20 	lds	r24, 0x2002
 59e:	90 91 03 20 	lds	r25, 0x2003
 5a2:	e8 17       	cp	r30, r24
 5a4:	f9 07       	cpc	r31, r25
 5a6:	68 f4       	brcc	.+26     	; 0x5c2 <__vector_25+0x42>
   {
      USARTC0.DATA = *txTail;
 5a8:	80 81       	ld	r24, Z
 5aa:	80 93 c0 08 	sts	0x08C0, r24
      txTail++;      
 5ae:	80 91 00 20 	lds	r24, 0x2000
 5b2:	90 91 01 20 	lds	r25, 0x2001
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	80 93 00 20 	sts	0x2000, r24
 5bc:	90 93 01 20 	sts	0x2001, r25
 5c0:	0a c0       	rjmp	.+20     	; 0x5d6 <__vector_25+0x56>

   }
   else // All of data from buffer is send
   {
      txTail = txBuff;
 5c2:	8c eb       	ldi	r24, 0xBC	; 188
 5c4:	90 e2       	ldi	r25, 0x20	; 32
 5c6:	80 93 00 20 	sts	0x2000, r24
 5ca:	90 93 01 20 	sts	0x2001, r25
      txHead = txTail;    
 5ce:	80 93 02 20 	sts	0x2002, r24
 5d2:	90 93 03 20 	sts	0x2003, r25
   } 
}
 5d6:	ff 91       	pop	r31
 5d8:	ef 91       	pop	r30
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_23>:


 
//****************************************************************************************
ISR ( USARTC0_RXC_vect )
{   
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <spiInit>:
//****************************************************************************************
void spiInit ( void )
{
   
   // Pins as output: 
   PORTC.DIRSET |= ( CFG_RST_PIN_MASK  |
 5fc:	e0 e4       	ldi	r30, 0x40	; 64
 5fe:	f6 e0       	ldi	r31, 0x06	; 6
 600:	81 81       	ldd	r24, Z+1	; 0x01
 602:	83 6b       	ori	r24, 0xB3	; 179
 604:	81 83       	std	Z+1, r24	; 0x01
                     CFG_DC_PIN_MASK   |
                     CFG_MOSI_PIN_MASK |
                     CFG_SCK_PIN_MASK  ); 
   
   // Unbuffered mode (simple tx use)
   SPIC.CTRLB = SPI_SSD_bm;      // Slave select disable (master mode) 
 606:	e0 ee       	ldi	r30, 0xE0	; 224
 608:	f8 e0       	ldi	r31, 0x08	; 8
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	84 83       	std	Z+4, r24	; 0x04
   
   // TODO: DMA?
   
   SPIC.CTRL =  SPI_MASTER_bm;    // Master mode  
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	80 83       	st	Z, r24
   #if ( F_CPU == F_CPU_32MHZ )   
      SPIC.CTRL |= SPI_PRESCALER_DIV16_gc; // Max 4MHz at PDC8544
   #else
      SPIC.CTRL |=  SPI_CLK2X_bm;   // 2x clock
 612:	80 81       	ld	r24, Z
 614:	80 68       	ori	r24, 0x80	; 128
 616:	80 83       	st	Z, r24
   #endif             
   
   SPIC.INTCTRL = CFG_PRIO_SPI;        // Interrupt level from boardCfg.h              
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	81 83       	std	Z+1, r24	; 0x01
                 
                 
                 
   //SPI_EN();   // SPI enable
   LOG_TXT ( ">>init<<   SPI initialized\n", 28 );
 61c:	6c e1       	ldi	r22, 0x1C	; 28
 61e:	88 e9       	ldi	r24, 0x98	; 152
 620:	90 e2       	ldi	r25, 0x20	; 32
 622:	90 ce       	rjmp	.-736    	; 0x344 <serialSendC>
 624:	08 95       	ret

00000626 <spiSend>:
}

//****************************************************************************************
void spiSend ( const uint8_t* data, uint16_t len )
{
   if ( ((txBuff + TX_BUFF_LEN)-txHead) > len )  // If there's a place to copy data
 626:	e0 91 06 20 	lds	r30, 0x2006
 62a:	f0 91 07 20 	lds	r31, 0x2007
 62e:	26 e1       	ldi	r18, 0x16	; 22
 630:	34 e2       	ldi	r19, 0x24	; 36
 632:	2e 1b       	sub	r18, r30
 634:	3f 0b       	sbc	r19, r31
 636:	62 17       	cp	r22, r18
 638:	73 07       	cpc	r23, r19
 63a:	50 f5       	brcc	.+84     	; 0x690 <spiSend+0x6a>
   {
      for ( uint8_t i = 0; i < len; i++ )
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	79 f0       	breq	.+30     	; 0x660 <spiSend+0x3a>
 642:	48 2f       	mov	r20, r24
 644:	a8 2f       	mov	r26, r24
 646:	b9 2f       	mov	r27, r25
      {
         *txHead = *data;
 648:	8d 91       	ld	r24, X+
 64a:	81 93       	st	Z+, r24
 64c:	8a 2f       	mov	r24, r26
 64e:	84 1b       	sub	r24, r20
//****************************************************************************************
void spiSend ( const uint8_t* data, uint16_t len )
{
   if ( ((txBuff + TX_BUFF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	86 17       	cp	r24, r22
 654:	97 07       	cpc	r25, r23
 656:	c0 f3       	brcs	.-16     	; 0x648 <spiSend+0x22>
 658:	e0 93 06 20 	sts	0x2006, r30
 65c:	f0 93 07 20 	sts	0x2007, r31
         *txHead = *data;
         txHead++;
         data++;
      }
      
      if ( txBuff == txTail )    // Initial send
 660:	80 91 04 20 	lds	r24, 0x2004
 664:	90 91 05 20 	lds	r25, 0x2005
 668:	8e 5b       	subi	r24, 0xBE	; 190
 66a:	91 42       	sbci	r25, 0x21	; 33
 66c:	a9 f4       	brne	.+42     	; 0x698 <spiSend+0x72>
      {
         SPI_EN();               // Enabling SPI
 66e:	a0 ee       	ldi	r26, 0xE0	; 224
 670:	b8 e0       	ldi	r27, 0x08	; 8
 672:	8c 91       	ld	r24, X
 674:	80 64       	ori	r24, 0x40	; 64
 676:	8c 93       	st	X, r24
         SPIC.DATA = *txTail;    // First character sent starts transmission
 678:	e0 91 04 20 	lds	r30, 0x2004
 67c:	f0 91 05 20 	lds	r31, 0x2005
 680:	81 91       	ld	r24, Z+
 682:	13 96       	adiw	r26, 0x03	; 3
 684:	8c 93       	st	X, r24
         txTail++;
 686:	e0 93 04 20 	sts	0x2004, r30
 68a:	f0 93 05 20 	sts	0x2005, r31
 68e:	08 95       	ret
      }
   }
   else
   {
      // Overflow or data too big
      DEB_2_SET();
 690:	80 e4       	ldi	r24, 0x40	; 64
 692:	e0 e6       	ldi	r30, 0x60	; 96
 694:	f6 e0       	ldi	r31, 0x06	; 6
 696:	85 83       	std	Z+5, r24	; 0x05
 698:	08 95       	ret

0000069a <spiRegisterTxEndCB>:


//****************************************************************************************
void spiRegisterTxEndCB ( pfnTxEnd cb)
{
   txEndCB = cb;   
 69a:	80 93 bc 21 	sts	0x21BC, r24
 69e:	90 93 bd 21 	sts	0x21BD, r25
 6a2:	08 95       	ret

000006a4 <__vector_22>:
}


//****************************************************************************************
ISR ( SPIC_INT_vect )
{
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
   // Is there critical section necessary ?
   if ( txTail < txHead )
 6c6:	80 91 04 20 	lds	r24, 0x2004
 6ca:	90 91 05 20 	lds	r25, 0x2005
 6ce:	20 91 06 20 	lds	r18, 0x2006
 6d2:	30 91 07 20 	lds	r19, 0x2007
 6d6:	82 17       	cp	r24, r18
 6d8:	93 07       	cpc	r25, r19
 6da:	58 f4       	brcc	.+22     	; 0x6f2 <__vector_22+0x4e>
   {
      SPIC.DATA = *txTail;
 6dc:	fc 01       	movw	r30, r24
 6de:	81 91       	ld	r24, Z+
 6e0:	a0 ee       	ldi	r26, 0xE0	; 224
 6e2:	b8 e0       	ldi	r27, 0x08	; 8
 6e4:	13 96       	adiw	r26, 0x03	; 3
 6e6:	8c 93       	st	X, r24
      txTail++;
 6e8:	e0 93 04 20 	sts	0x2004, r30
 6ec:	f0 93 05 20 	sts	0x2005, r31
 6f0:	16 c0       	rjmp	.+44     	; 0x71e <__vector_22+0x7a>
   }
   else // All of data from buffer are send
   {
      txTail = txBuff;
 6f2:	8e eb       	ldi	r24, 0xBE	; 190
 6f4:	91 e2       	ldi	r25, 0x21	; 33
 6f6:	80 93 04 20 	sts	0x2004, r24
 6fa:	90 93 05 20 	sts	0x2005, r25
      txHead = txTail;
 6fe:	80 93 06 20 	sts	0x2006, r24
 702:	90 93 07 20 	sts	0x2007, r25
      
      if ( NULL != txEndCB )
 706:	e0 91 bc 21 	lds	r30, 0x21BC
 70a:	f0 91 bd 21 	lds	r31, 0x21BD
 70e:	30 97       	sbiw	r30, 0x00	; 0
 710:	09 f0       	breq	.+2      	; 0x714 <__vector_22+0x70>
      {
         txEndCB();         
 712:	09 95       	icall
      }
      
      SPI_DIS();     // Disabling SPI (only tx is used)
 714:	e0 ee       	ldi	r30, 0xE0	; 224
 716:	f8 e0       	ldi	r31, 0x08	; 8
 718:	80 81       	ld	r24, Z
 71a:	8f 7b       	andi	r24, 0xBF	; 191
 71c:	80 83       	st	Z, r24
   }
 
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <timerInit>:
// TODO: channel as enum
void timerSingleUs( uint16_t us )
{
   TCC4.CCABUF = us;   

   TCC4.CTRLGSET = TC45_CMD_RESTART_gc;
 740:	e0 e0       	ldi	r30, 0x00	; 0
 742:	f8 e0       	ldi	r31, 0x08	; 8
 744:	84 e0       	ldi	r24, 0x04	; 4
 746:	80 83       	st	Z, r24
 748:	8f e3       	ldi	r24, 0x3F	; 63
 74a:	87 83       	std	Z+7, r24	; 0x07
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	81 87       	std	Z+9, r24	; 0x09
 750:	08 95       	ret

00000752 <timerSHARP>:

void timerSHARP ( void )
{
   // Measuring init:
      
   TCC4.CCABUF = (uint16_t)CYCLE_PERIOD_US*4;
 752:	e0 e0       	ldi	r30, 0x00	; 0
 754:	f8 e0       	ldi	r31, 0x08	; 8
 756:	80 e4       	ldi	r24, 0x40	; 64
 758:	9c e9       	ldi	r25, 0x9C	; 156
 75a:	80 af       	std	Z+56, r24	; 0x38
 75c:	91 af       	std	Z+57, r25	; 0x39
   TCC4.CCBBUF = (uint16_t)MEAS_DELAY_US*4;
 75e:	80 ea       	ldi	r24, 0xA0	; 160
 760:	90 ea       	ldi	r25, 0xA0	; 160
 762:	82 af       	std	Z+58, r24	; 0x3a
 764:	93 af       	std	Z+59, r25	; 0x3b
   TCC4.CCCBUF = (uint16_t)PULSE_TIME_US*4;
 766:	80 e4       	ldi	r24, 0x40	; 64
 768:	91 ea       	ldi	r25, 0xA1	; 161
 76a:	84 af       	std	Z+60, r24	; 0x3c
 76c:	95 af       	std	Z+61, r25	; 0x3d
      
   TCC4.CTRLGCLR = TC4_STOP_bm;     // START
 76e:	80 e2       	ldi	r24, 0x20	; 32
 770:	80 87       	std	Z+8, r24	; 0x08
   TCC4.CTRLGSET = TC45_CMD_RESTART_gc;
 772:	88 e0       	ldi	r24, 0x08	; 8
 774:	81 87       	std	Z+9, r24	; 0x09
 776:	08 95       	ret

00000778 <__vector_14>:
}


ISR ( TCC4_CCA_vect )
{
 778:	1f 92       	push	r1
 77a:	0f 92       	push	r0
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	0f 92       	push	r0
 780:	11 24       	eor	r1, r1
 782:	8f 93       	push	r24
 784:	ef 93       	push	r30
 786:	ff 93       	push	r31
   PULSE_SET();          // PULSE up    
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	e0 e0       	ldi	r30, 0x00	; 0
 78c:	f6 e0       	ldi	r31, 0x06	; 6
 78e:	85 83       	std	Z+5, r24	; 0x05
}
 790:	ff 91       	pop	r31
 792:	ef 91       	pop	r30
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_15>:


ISR ( TCC4_CCB_vect )
{   
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
   DEB_3_SET();         // only for test
 7c2:	e0 e6       	ldi	r30, 0x60	; 96
 7c4:	f6 e0       	ldi	r31, 0x06	; 6
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	85 83       	std	Z+5, r24	; 0x05
   DEB_2_SET();         // only for test
 7ca:	80 e4       	ldi	r24, 0x40	; 64
 7cc:	85 83       	std	Z+5, r24	; 0x05
   adcStartChToGnd();   // ADC start;   
 7ce:	ac dc       	rcall	.-1704   	; 0x128 <adcStartChToGnd>
}
 7d0:	ff 91       	pop	r31
 7d2:	ef 91       	pop	r30
 7d4:	bf 91       	pop	r27
 7d6:	af 91       	pop	r26
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	7f 91       	pop	r23
 7de:	6f 91       	pop	r22
 7e0:	5f 91       	pop	r21
 7e2:	4f 91       	pop	r20
 7e4:	3f 91       	pop	r19
 7e6:	2f 91       	pop	r18
 7e8:	0f 90       	pop	r0
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	0f 90       	pop	r0
 7ee:	1f 90       	pop	r1
 7f0:	18 95       	reti

000007f2 <__vector_16>:



ISR ( TCC4_CCC_vect )
{
 7f2:	1f 92       	push	r1
 7f4:	0f 92       	push	r0
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	0f 92       	push	r0
 7fa:	11 24       	eor	r1, r1
 7fc:	8f 93       	push	r24
 7fe:	ef 93       	push	r30
 800:	ff 93       	push	r31
   DEB_2_CLR();         // only for test
 802:	80 e4       	ldi	r24, 0x40	; 64
 804:	e0 e6       	ldi	r30, 0x60	; 96
 806:	f6 e0       	ldi	r31, 0x06	; 6
 808:	86 83       	std	Z+6, r24	; 0x06
   PULSE_CLR();         // PULSE down   
 80a:	82 e0       	ldi	r24, 0x02	; 2
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	f6 e0       	ldi	r31, 0x06	; 6
 810:	86 83       	std	Z+6, r24	; 0x06
   
   TCC4.CTRLGSET = TC45_CMD_RESTART_gc;   // Restarting timer - continuous
 812:	88 e0       	ldi	r24, 0x08	; 8
 814:	e0 e0       	ldi	r30, 0x00	; 0
 816:	f8 e0       	ldi	r31, 0x08	; 8
 818:	81 87       	std	Z+9, r24	; 0x09
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	8f 91       	pop	r24
 820:	0f 90       	pop	r0
 822:	0f be       	out	0x3f, r0	; 63
 824:	0f 90       	pop	r0
 826:	1f 90       	pop	r1
 828:	18 95       	reti

0000082a <__udivmodsi4>:
 82a:	a1 e2       	ldi	r26, 0x21	; 33
 82c:	1a 2e       	mov	r1, r26
 82e:	aa 1b       	sub	r26, r26
 830:	bb 1b       	sub	r27, r27
 832:	fd 01       	movw	r30, r26
 834:	0d c0       	rjmp	.+26     	; 0x850 <__udivmodsi4_ep>

00000836 <__udivmodsi4_loop>:
 836:	aa 1f       	adc	r26, r26
 838:	bb 1f       	adc	r27, r27
 83a:	ee 1f       	adc	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	a2 17       	cp	r26, r18
 840:	b3 07       	cpc	r27, r19
 842:	e4 07       	cpc	r30, r20
 844:	f5 07       	cpc	r31, r21
 846:	20 f0       	brcs	.+8      	; 0x850 <__udivmodsi4_ep>
 848:	a2 1b       	sub	r26, r18
 84a:	b3 0b       	sbc	r27, r19
 84c:	e4 0b       	sbc	r30, r20
 84e:	f5 0b       	sbc	r31, r21

00000850 <__udivmodsi4_ep>:
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	1a 94       	dec	r1
 85a:	69 f7       	brne	.-38     	; 0x836 <__udivmodsi4_loop>
 85c:	60 95       	com	r22
 85e:	70 95       	com	r23
 860:	80 95       	com	r24
 862:	90 95       	com	r25
 864:	9b 01       	movw	r18, r22
 866:	ac 01       	movw	r20, r24
 868:	bd 01       	movw	r22, r26
 86a:	cf 01       	movw	r24, r30
 86c:	08 95       	ret

0000086e <__muluhisi3>:
 86e:	09 d0       	rcall	.+18     	; 0x882 <__umulhisi3>
 870:	a5 9f       	mul	r26, r21
 872:	90 0d       	add	r25, r0
 874:	b4 9f       	mul	r27, r20
 876:	90 0d       	add	r25, r0
 878:	a4 9f       	mul	r26, r20
 87a:	80 0d       	add	r24, r0
 87c:	91 1d       	adc	r25, r1
 87e:	11 24       	eor	r1, r1
 880:	08 95       	ret

00000882 <__umulhisi3>:
 882:	a2 9f       	mul	r26, r18
 884:	b0 01       	movw	r22, r0
 886:	b3 9f       	mul	r27, r19
 888:	c0 01       	movw	r24, r0
 88a:	a3 9f       	mul	r26, r19
 88c:	70 0d       	add	r23, r0
 88e:	81 1d       	adc	r24, r1
 890:	11 24       	eor	r1, r1
 892:	91 1d       	adc	r25, r1
 894:	b2 9f       	mul	r27, r18
 896:	70 0d       	add	r23, r0
 898:	81 1d       	adc	r24, r1
 89a:	11 24       	eor	r1, r1
 89c:	91 1d       	adc	r25, r1
 89e:	08 95       	ret

000008a0 <_exit>:
 8a0:	f8 94       	cli

000008a2 <__stop_program>:
 8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <__stop_program>
