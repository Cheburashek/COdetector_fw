
COdetector_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ee  00802000  0000099e  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000363  008022ee  008022ee  00000d20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a2d  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c36  00000000  00000000  0000391d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c50  00000000  00000000  00004553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000488  00000000  00000000  000051a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011da  00000000  00000000  0000562c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001026  00000000  00000000  00006806  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000782c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_22>
  5c:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_23>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_34>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	df e2       	ldi	r29, 0x2F	; 47
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	12 e2       	ldi	r17, 0x22	; 34
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	ee e9       	ldi	r30, 0x9E	; 158
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	ae 3e       	cpi	r26, 0xEE	; 238
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	26 e2       	ldi	r18, 0x26	; 38
  d0:	ae ee       	ldi	r26, 0xEE	; 238
  d2:	b2 e2       	ldi	r27, 0x22	; 34
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 35       	cpi	r26, 0x51	; 81
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  e2:	0c 94 cd 04 	jmp	0x99a	; 0x99a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adcInit>:
      - interrupt on complete conversion

   */

   // PORT:
   PORTA.DIRCLR = CFG_ADC_PIN_MASK;             // Input
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f6 e0       	ldi	r31, 0x06	; 6
  f0:	82 83       	std	Z+2, r24	; 0x02
   
   ADCA.CTRLB = ADC_CURRLIMIT_HIGH_gc  |        // High current limit, max. sampling rate 75kSPS
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f2 e0       	ldi	r31, 0x02	; 2
  f6:	92 e6       	ldi	r25, 0x62	; 98
  f8:	91 83       	std	Z+1, r25	; 0x01
                ADC_RESOLUTION_MT12BIT_gc;      // More than 12-bit right adjusted result, when (SAPNUM>0)
                  
   ADCA.CH0.AVGCTRL = ADC_SAMPNUM_32X_gc ;       // Number of samples (averaging) - 16bit
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	94 a7       	std	Z+44, r25	; 0x2c

   ADCA.SAMPCTRL = 0x08;   // For 8Mhz clock only!
  fe:	98 e0       	ldi	r25, 0x08	; 8
 100:	90 87       	std	Z+8, r25	; 0x08
   
   ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
 102:	27 e0       	ldi	r18, 0x07	; 7
 104:	24 83       	std	Z+4, r18	; 0x04
   
   ADC_EN();                                    // Enabling ADC block
 106:	20 81       	ld	r18, Z
 108:	21 60       	ori	r18, 0x01	; 1
 10a:	20 83       	st	Z, r18
   //adcOffCalibration ();
   
   ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;   // Single ended input
 10c:	80 a3       	std	Z+32, r24	; 0x20
   ADCA.CH0.INTCTRL = CFG_PRIO_ADC;                   // From boardCfg.h
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	22 a3       	std	Z+34, r18	; 0x22
   
   
   ADCA.CH0.OFFSETCORR0 = ADC_OFF_MAN_CORR & 0xFF;
 112:	2f ea       	ldi	r18, 0xAF	; 175
 114:	20 a7       	std	Z+40, r18	; 0x28
   ADCA.CH0.OFFSETCORR1 = ADC_OFF_MAN_CORR >> 8;
 116:	11 a6       	std	Z+41, r1	; 0x29
   
   ADCA.CH0.GAINCORR0 = 0x00;
 118:	12 a6       	std	Z+42, r1	; 0x2a
   ADCA.CH0.GAINCORR1 = 0x08;          // Gain correction x1  
 11a:	93 a7       	std	Z+43, r25	; 0x2b
       
   ADCA.CH0.CORRCTRL = 0x01;     // Correction enabled
 11c:	87 a3       	std	Z+39, r24	; 0x27
                               
   ADC_EN();
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
   
   LOG_TXT ( ">>init<<   ADC initialized\n", 28 );
 124:	6c e1       	ldi	r22, 0x1C	; 28
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	90 e2       	ldi	r25, 0x20	; 32
 12a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 12e:	08 95       	ret

00000130 <adcStartChToGnd>:


//****************************************************************************************
void adcStartChToGnd ( void )
{
   ADCA.CH0.MUXCTRL = CFG_ADC_MUXPOS; 
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	f2 e0       	ldi	r31, 0x02	; 2
 134:	11 a2       	std	Z+33, r1	; 0x21
   DEB_1_SET(); 
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	a0 e6       	ldi	r26, 0x60	; 96
 13a:	b6 e0       	ldi	r27, 0x06	; 6
 13c:	15 96       	adiw	r26, 0x05	; 5
 13e:	8c 93       	st	X, r24
   ADC_START();
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <adcRegisterEndCb>:


//****************************************************************************************
void adcRegisterEndCb ( pfnAdcEnd cb )
{
   convEndCB = cb; 
 148:	80 93 ee 22 	sts	0x22EE, r24
 14c:	90 93 ef 22 	sts	0x22EF, r25
 150:	08 95       	ret

00000152 <__vector_34>:
}


//****************************************************************************************
ISR ( ADCA_CH0_vect )
{  
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
   DEB_1_CLR();
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	e0 e6       	ldi	r30, 0x60	; 96
 178:	f6 e0       	ldi	r31, 0x06	; 6
 17a:	86 83       	std	Z+6, r24	; 0x06
   if ( NULL != convEndCB )
 17c:	e0 91 ee 22 	lds	r30, 0x22EE
 180:	f0 91 ef 22 	lds	r31, 0x22EF
 184:	30 97       	sbiw	r30, 0x00	; 0
 186:	39 f0       	breq	.+14     	; 0x196 <__vector_34+0x44>
   {       
      convEndCB (  (uint16_t)ADCA.CH0RES );      
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b2 e0       	ldi	r27, 0x02	; 2
 18c:	50 96       	adiw	r26, 0x10	; 16
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	51 97       	sbiw	r26, 0x11	; 17
 194:	09 95       	icall
   }  
   
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	bf 91       	pop	r27
 19c:	af 91       	pop	r26
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	7f 91       	pop	r23
 1a4:	6f 91       	pop	r22
 1a6:	5f 91       	pop	r21
 1a8:	4f 91       	pop	r20
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <boardInit>:
      // page 117 in manual (power reduction)!!!
   
   
   
   // Debug LEDs:
   PORTD.DIRSET = PIN5_bm;
 1b8:	e0 e6       	ldi	r30, 0x60	; 96
 1ba:	f6 e0       	ldi	r31, 0x06	; 6
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN6_bm;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	81 83       	std	Z+1, r24	; 0x01
   PORTD.DIRSET = PIN7_bm;   
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	81 83       	std	Z+1, r24	; 0x01
   #elif ( F_CPU == F_CPU_2MHZ )
      LOG_TXT ( ">>clock<<   Clock 2MHZ\n", 24 );
      // Default after restart
      
   #elif ( F_CPU == F_CPU_8MHZ )   
      OSC.CTRL |= OSC_RC8MEN_bm;               // Enabling 32MHz clock
 1c8:	e0 e5       	ldi	r30, 0x50	; 80
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	80 83       	st	Z, r24
      while (!(OSC.STATUS & OSC_RC8MRDY_bm));  // Waiting for clock
 1d2:	81 81       	ldd	r24, Z+1	; 0x01
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <boardInit+0x1a>
      CCP=CCP_IOREG_gc;                          // Protected register
 1d8:	88 ed       	ldi	r24, 0xD8	; 216
 1da:	84 bf       	out	0x34, r24	; 52
      CLK.CTRL = CLK_SCLKSEL_RC8M_gc;            // 8Mhz internal
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	80 93 40 00 	sts	0x0040, r24
      LOG_TXT ( ">>clock<<  Clock 8MHZ\n", 23 );
 1e2:	67 e1       	ldi	r22, 0x17	; 23
 1e4:	84 e2       	ldi	r24, 0x24	; 36
 1e6:	90 e2       	ldi	r25, 0x20	; 32
 1e8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>


   
   // Initializations:
   #ifdef LOG_USARTC0
      serialInitC();
 1ec:	0e 94 a4 02 	call	0x548	; 0x548 <serialInitC>
   #endif  
      
   CFG_GLOBAL_INT_ENABLE();
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
   PRIO_ALL_LEVELS_ENABLE();
 1f6:	e2 ea       	ldi	r30, 0xA2	; 162
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	80 83       	st	Z, r24
   
   spiInit();
 200:	0e 94 62 03 	call	0x6c4	; 0x6c4 <spiInit>
   pdcInit();
 204:	0e 94 2a 01 	call	0x254	; 0x254 <pdcInit>
   adcInit();
 208:	0e 94 75 00 	call	0xea	; 0xea <adcInit>
   timerInit();
 20c:	0e 94 17 04 	call	0x82e	; 0x82e <timerInit>
   systemInit();
 210:	0e 94 04 04 	call	0x808	; 0x808 <systemInit>

   
   LOG_TXT ( ">>init<<   Board initialized\n", 30 );
 214:	6e e1       	ldi	r22, 0x1E	; 30
 216:	8b e3       	ldi	r24, 0x3B	; 59
 218:	90 e2       	ldi	r25, 0x20	; 32
 21a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 21e:	08 95       	ret

00000220 <pdcChipDisable>:

// *************************************************************************
// Function to set callback in SPI.c (end of transmission)
inline static void pdcChipDisable ( void )
{
   SCE_HI();
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	e0 e4       	ldi	r30, 0x40	; 64
 224:	f6 e0       	ldi	r31, 0x06	; 6
 226:	85 83       	std	Z+5, r24	; 0x05
 228:	08 95       	ret

0000022a <pdcSend>:

// *************************************************************************
// Function to send data
static void pdcSend( uint8_t DC, uint8_t data )
{
   SCE_LO();
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	e0 e4       	ldi	r30, 0x40	; 64
 22e:	f6 e0       	ldi	r31, 0x06	; 6
 230:	96 83       	std	Z+6, r25	; 0x06
   
   switch(DC)
 232:	88 23       	and	r24, r24
 234:	29 f0       	breq	.+10     	; 0x240 <pdcSend+0x16>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	39 f4       	brne	.+14     	; 0x248 <pdcSend+0x1e>
   {
      case DC_DATA:
         DC_HI();
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	85 83       	std	Z+5, r24	; 0x05
      break;
 23e:	04 c0       	rjmp	.+8      	; 0x248 <pdcSend+0x1e>
      
      case DC_CMD:
         DC_LO();
 240:	80 e1       	ldi	r24, 0x10	; 16
 242:	e0 e4       	ldi	r30, 0x40	; 64
 244:	f6 e0       	ldi	r31, 0x06	; 6
 246:	86 83       	std	Z+6, r24	; 0x06
   }
   
   //spiSend( &data, 1 );
   
   // Very, very temporary and bad: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
   SPIC.DATA = data;
 248:	e0 ee       	ldi	r30, 0xE0	; 224
 24a:	f8 e0       	ldi	r31, 0x08	; 8
 24c:	63 83       	std	Z+3, r22	; 0x03
   while ( !SPIC.STATUS & SPI_IF_bm ){}
 24e:	82 81       	ldd	r24, Z+2	; 0x02
   (void)SPIC.DATA; 
 250:	83 81       	ldd	r24, Z+3	; 0x03
 252:	08 95       	ret

00000254 <pdcInit>:
}

// *************************************************************************
// Function to configure PDC8544
void pdcInit( void )
{
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
   spiRegisterTxEndCB ( pdcChipDisable );
 25a:	80 e1       	ldi	r24, 0x10	; 16
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <spiRegisterTxEndCB>

// *************************************************************************
// Function to reset PDC8544
static void pdcReset( void )
{   
   RST_LO();
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	e0 e4       	ldi	r30, 0x40	; 64
 266:	f6 e0       	ldi	r31, 0x06	; 6
 268:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	97 e2       	ldi	r25, 0x27	; 39
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <pdcInit+0x1a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <pdcInit+0x20>
 274:	00 00       	nop
   _delay_ms(5);  // TODO: delay not ok
   RST_HI();   
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	97 e2       	ldi	r25, 0x27	; 39
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <pdcInit+0x2a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <pdcInit+0x30>
 284:	00 00       	nop

   pdcReset(); 
   
 
   
   pdcSend( DC_CMD, 0x21 );	// Extended cmd
 286:	61 e2       	ldi	r22, 0x21	; 33
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0xE0 );	// Bias
 28e:	60 ee       	ldi	r22, 0xE0	; 224
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x04 );	// Temp. control
 296:	64 e0       	ldi	r22, 0x04	; 4
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0xCB );	// Set V
 29e:	6b ec       	ldi	r22, 0xCB	; 203
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
 2a6:	60 e2       	ldi	r22, 0x20	; 32
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSend( DC_CMD, 0x0C );	// Normal mode
 2ae:	6c e0       	ldi	r22, 0x0C	; 12
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
   pdcSend( DC_CMD, addr_X );
 2b6:	60 e8       	ldi	r22, 0x80	; 128
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2be:	d0 e4       	ldi	r29, 0x40	; 64
 2c0:	14 e5       	ldi	r17, 0x54	; 84
static void pdcSetRow( uint8_t addr_Y )
{
   if( addr_Y > 5 ){ /*ERROR!!!!!!*/ }
   
   addr_Y += 0x40;	// Adding Set Y address of RAM command
   pdcSend( DC_CMD, addr_Y );
 2c2:	6d 2f       	mov	r22, r29
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
   pdcSend( DC_CMD, addr_X );
 2ca:	60 e8       	ldi	r22, 0x80	; 128
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2d2:	c1 2f       	mov	r28, r17
      pdcSetRow( Y );
      pdcSetCol( 0x00 );
      
      for( X = 0; X < 84; X++)
      {         
         pdcSend( DC_DATA, 0x00 );         
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
 2dc:	c1 50       	subi	r28, 0x01	; 1
   for( Y = 0; Y < 6; Y++ )
   {      
      pdcSetRow( Y );
      pdcSetCol( 0x00 );
      
      for( X = 0; X < 84; X++)
 2de:	d1 f7       	brne	.-12     	; 0x2d4 <pdcInit+0x80>
 2e0:	df 5f       	subi	r29, 0xFF	; 255
   uint8_t X = 0,
           Y = 0;
   
   pdcSetCol( 0x00 );
   
   for( Y = 0; Y < 6; Y++ )
 2e2:	d6 34       	cpi	r29, 0x46	; 70
 2e4:	71 f7       	brne	.-36     	; 0x2c2 <pdcInit+0x6e>
   pdcSend( DC_CMD, 0x20 );	// Basic cmd   / horizontal addressing
   pdcSend( DC_CMD, 0x0C );	// Normal mode

   pdcClearRAM();

   LOG_TXT ( ">>init<<   PDC8544 initialized\n", 32 );   
 2e6:	60 e2       	ldi	r22, 0x20	; 32
 2e8:	89 e5       	ldi	r24, 0x59	; 89
 2ea:	90 e2       	ldi	r25, 0x20	; 32
 2ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	08 95       	ret

000002f8 <pdcChar>:
// *************************************************************************

// *************************************************************************
// Function to write a single char from a table
void pdcChar( char ch, uint8_t pos_Y, uint8_t pos_X )
{
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	c8 2f       	mov	r28, r24
 300:	d4 2f       	mov	r29, r20
// Function to set Y -> row
static void pdcSetRow( uint8_t addr_Y )
{
   if( addr_Y > 5 ){ /*ERROR!!!!!!*/ }
   
   addr_Y += 0x40;	// Adding Set Y address of RAM command
 302:	60 5c       	subi	r22, 0xC0	; 192
   pdcSend( DC_CMD, addr_Y );
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   //if( ch < 0x20 || ch > 0x7F ){ /*ERROR!!!!!!*/ }
   //if( pos_X > 13 ){ /*ERROR!!!!!!*/ }
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 
 30a:	6d 2f       	mov	r22, r29
 30c:	66 0f       	add	r22, r22
 30e:	6d 0f       	add	r22, r29
 310:	66 0f       	add	r22, r22
// Function to set X -> Column x5
static void pdcSetCol( uint8_t addr_X )
{
   if( addr_X > 83 ){ /*ERROR!!!!!!*/ }
   
   addr_X += 0x80;	// Adding Set X address of RAM command
 312:	60 58       	subi	r22, 0x80	; 128
   pdcSend( DC_CMD, addr_X );
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 31a:	d0 e0       	ldi	r29, 0x00	; 0
 31c:	a0 97       	sbiw	r28, 0x20	; 32
 31e:	ce 01       	movw	r24, r28
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	c8 0f       	add	r28, r24
 32a:	d9 1f       	adc	r29, r25
 32c:	c7 58       	subi	r28, 0x87	; 135
 32e:	df 4d       	sbci	r29, 0xDF	; 223
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
 330:	10 e0       	ldi	r17, 0x00	; 0
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
 332:	69 91       	ld	r22, Y+
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
   //if( pos_Y > 5  ){ /*ERROR!!!!!!*/ }
   
   pdcSetRow( pos_Y   );				// Setting active row
   pdcSetCol( pos_X*6 ); 

   for( X = 0; X < 5; X++ )
 33a:	1f 5f       	subi	r17, 0xFF	; 255
 33c:	15 30       	cpi	r17, 0x05	; 5
 33e:	c9 f7       	brne	.-14     	; 0x332 <pdcChar+0x3a>
   {            
      pdcSend( DC_DATA, charTab[ ((ch-0x20)*5) + X ] );	// Finding index of char in table
   }
   
   pdcSend( DC_DATA, 0x00 );			// One pixel spacing after char   
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 15 01 	call	0x22a	; 0x22a <pdcSend>
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	08 95       	ret

00000350 <pdcLine>:


// *************************************************************************
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	06 2f       	mov	r16, r22
 35a:	ec 01       	movw	r28, r24
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 35c:	10 e0       	ldi	r17, 0x00	; 0
   {      
      if( ch[i] < 0x20 || ch[i] > 0x7F)
 35e:	89 91       	ld	r24, Y+
 360:	90 ee       	ldi	r25, 0xE0	; 224
 362:	98 0f       	add	r25, r24
 364:	90 36       	cpi	r25, 0x60	; 96
 366:	30 f0       	brcs	.+12     	; 0x374 <pdcLine+0x24>
      {
         pdcChar( ' ', pos_Y, i );
 368:	41 2f       	mov	r20, r17
 36a:	60 2f       	mov	r22, r16
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
 372:	04 c0       	rjmp	.+8      	; 0x37c <pdcLine+0x2c>
      }
      else
      {
         pdcChar( ch[i], pos_Y, i );
 374:	41 2f       	mov	r20, r17
 376:	60 2f       	mov	r22, r16
 378:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
// Function to display one line char by char from 'pseudo-string' -> must be PADDED with zeros
void pdcLine( char ch[14], uint8_t pos_Y )
{    
   //pdcClearLine( pos_Y );
   
   for( uint8_t i = 0; i < 14; i++ )
 37c:	1f 5f       	subi	r17, 0xFF	; 255
 37e:	1e 30       	cpi	r17, 0x0E	; 14
 380:	71 f7       	brne	.-36     	; 0x35e <pdcLine+0xe>
      else
      {
         pdcChar( ch[i], pos_Y, i );
      }
   }
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <pdcUint>:


// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
 38c:	2f 92       	push	r2
 38e:	3f 92       	push	r3
 390:	4f 92       	push	r4
 392:	5f 92       	push	r5
 394:	6f 92       	push	r6
 396:	7f 92       	push	r7
 398:	8f 92       	push	r8
 39a:	9f 92       	push	r9
 39c:	af 92       	push	r10
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <pdcUint+0x26>
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	56 2e       	mov	r5, r22
 3ba:	49 83       	std	Y+1, r20	; 0x01
 3bc:	22 2e       	mov	r2, r18
   uint32_t temp_val = val;
 3be:	6c 01       	movw	r12, r24
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 3c4:	c1 14       	cp	r12, r1
 3c6:	d1 04       	cpc	r13, r1
 3c8:	e1 04       	cpc	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <pdcUint+0x44>
 3ce:	42 c0       	rjmp	.+132    	; 0x454 <pdcUint+0xc8>

// *************************************************************************
// Function to display uint value in chosen part of LCD (max 2^16)
void pdcUint( uint16_t val, uint8_t pos_Y, uint8_t pos_X, uint8_t length )
{   
   uint32_t temp_val = val;
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 3d4:	1b 82       	std	Y+3, r1	; 0x03
   {	// Length of input "string"
      temp_val /= 10;
 3d6:	0f 2e       	mov	r0, r31
 3d8:	fa e0       	ldi	r31, 0x0A	; 10
 3da:	8f 2e       	mov	r8, r31
 3dc:	91 2c       	mov	r9, r1
 3de:	a1 2c       	mov	r10, r1
 3e0:	b1 2c       	mov	r11, r1
 3e2:	f0 2d       	mov	r31, r0
 3e4:	a5 01       	movw	r20, r10
 3e6:	94 01       	movw	r18, r8
 3e8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 3ec:	ca 01       	movw	r24, r20
 3ee:	b9 01       	movw	r22, r18
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 3f0:	2b 81       	ldd	r18, Y+3	; 0x03
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	2b 83       	std	Y+3, r18	; 0x03
 3f6:	61 15       	cp	r22, r1
 3f8:	71 05       	cpc	r23, r1
 3fa:	81 05       	cpc	r24, r1
 3fc:	91 05       	cpc	r25, r1
 3fe:	91 f7       	brne	.-28     	; 0x3e4 <pdcUint+0x58>
 400:	42 2e       	mov	r4, r18
   
   temp_val = val;
   
     
    
   for( k = 1; k <= len; k++ )
 402:	22 23       	and	r18, r18
 404:	41 f1       	breq	.+80     	; 0x456 <pdcUint+0xca>
 406:	31 e0       	ldi	r19, 0x01	; 1
 408:	3a 83       	std	Y+2, r19	; 0x02
   {      
      temp_ch = temp_val % 10;
 40a:	0f 2e       	mov	r0, r31
 40c:	fa e0       	ldi	r31, 0x0A	; 10
 40e:	8f 2e       	mov	r8, r31
 410:	91 2c       	mov	r9, r1
 412:	a1 2c       	mov	r10, r1
 414:	b1 2c       	mov	r11, r1
 416:	f0 2d       	mov	r31, r0
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
 418:	39 80       	ldd	r3, Y+1	; 0x01
 41a:	32 0e       	add	r3, r18
   
     
    
   for( k = 1; k <= len; k++ )
   {      
      temp_ch = temp_val % 10;
 41c:	c7 01       	movw	r24, r14
 41e:	b6 01       	movw	r22, r12
 420:	a5 01       	movw	r20, r10
 422:	94 01       	movw	r18, r8
 424:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 428:	62 2e       	mov	r6, r18
 42a:	73 2e       	mov	r7, r19
 42c:	04 2f       	mov	r16, r20
 42e:	15 2f       	mov	r17, r21
 430:	86 2f       	mov	r24, r22
 432:	43 2d       	mov	r20, r3
 434:	9a 81       	ldd	r25, Y+2	; 0x02
 436:	49 1b       	sub	r20, r25
      temp_ch += 0x30;			// Number -> ASCII
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
 438:	65 2d       	mov	r22, r5
 43a:	80 5d       	subi	r24, 0xD0	; 208
 43c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
      temp_val /= 10;
 440:	c6 2c       	mov	r12, r6
 442:	d7 2c       	mov	r13, r7
 444:	e0 2e       	mov	r14, r16
 446:	f1 2e       	mov	r15, r17
   
   temp_val = val;
   
     
    
   for( k = 1; k <= len; k++ )
 448:	ea 81       	ldd	r30, Y+2	; 0x02
 44a:	ef 5f       	subi	r30, 0xFF	; 255
 44c:	ea 83       	std	Y+2, r30	; 0x02
 44e:	4e 16       	cp	r4, r30
 450:	28 f7       	brcc	.-54     	; 0x41c <pdcUint+0x90>
 452:	01 c0       	rjmp	.+2      	; 0x456 <pdcUint+0xca>
   k = 0;
   char temp_ch;
   
   if( temp_val > 65535 ){ /*ERROR!!!!*/ }
   
   for( len = 0; temp_val != 0; len++ )
 454:	1b 82       	std	Y+3, r1	; 0x03
      
      pdcChar( temp_ch, pos_Y, (pos_X+len-k) );	
      temp_val /= 10;
   }

   if( len != length )
 456:	fb 81       	ldd	r31, Y+3	; 0x03
 458:	f2 15       	cp	r31, r2
 45a:	b9 f0       	breq	.+46     	; 0x48a <pdcUint+0xfe>
   {      
      for( k = 1; k <= (length - len); k++ )
 45c:	82 2d       	mov	r24, r2
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	7c 01       	movw	r14, r24
 462:	ef 1a       	sub	r14, r31
 464:	f1 08       	sbc	r15, r1
 466:	1e 14       	cp	r1, r14
 468:	1f 04       	cpc	r1, r15
 46a:	7c f4       	brge	.+30     	; 0x48a <pdcUint+0xfe>
 46c:	11 e0       	ldi	r17, 0x01	; 1
      {
         pdcChar( ' ', pos_Y, (pos_X+length-k) );         
 46e:	39 81       	ldd	r19, Y+1	; 0x01
 470:	23 0e       	add	r2, r19
 472:	42 2d       	mov	r20, r2
 474:	41 1b       	sub	r20, r17
 476:	65 2d       	mov	r22, r5
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <pdcChar>
      temp_val /= 10;
   }

   if( len != length )
   {      
      for( k = 1; k <= (length - len); k++ )
 47e:	1f 5f       	subi	r17, 0xFF	; 255
 480:	81 2f       	mov	r24, r17
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	e8 16       	cp	r14, r24
 486:	f9 06       	cpc	r15, r25
 488:	a4 f7       	brge	.-24     	; 0x472 <pdcUint+0xe6>
         pdcChar( ' ', pos_Y, (pos_X+length-k) );         
      }
   }
   else{	/*ERROR!!!!!! */ }
   
}
 48a:	23 96       	adiw	r28, 0x03	; 3
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	de bf       	out	0x3e, r29	; 62
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	9f 90       	pop	r9
 4a6:	8f 90       	pop	r8
 4a8:	7f 90       	pop	r7
 4aa:	6f 90       	pop	r6
 4ac:	5f 90       	pop	r5
 4ae:	4f 90       	pop	r4
 4b0:	3f 90       	pop	r3
 4b2:	2f 90       	pop	r2
 4b4:	08 95       	ret

000004b6 <main>:

//****************************************************************************************
int main(void)
{     
   
   boardInit();                        // Board peripherals initialization       
 4b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <boardInit>
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <main+0x4>

000004bc <serialSendC>:

void serialSendC ( const uint8_t* data, uint8_t len )
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
 4bc:	20 91 02 20 	lds	r18, 0x2002
 4c0:	30 91 03 20 	lds	r19, 0x2003
 4c4:	e1 ef       	ldi	r30, 0xF1	; 241
 4c6:	f3 e2       	ldi	r31, 0x23	; 35
 4c8:	e2 1b       	sub	r30, r18
 4ca:	f3 0b       	sbc	r31, r19
 4cc:	46 2f       	mov	r20, r22
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	4e 17       	cp	r20, r30
 4d2:	5f 07       	cpc	r21, r31
 4d4:	a4 f5       	brge	.+104    	; 0x53e <serialSendC+0x82>
   {
      for ( uint8_t i = 0; i < len; i++ )
 4d6:	66 23       	and	r22, r22
 4d8:	c9 f0       	breq	.+50     	; 0x50c <serialSendC+0x50>
 4da:	a8 2f       	mov	r26, r24
 4dc:	b9 2f       	mov	r27, r25
 4de:	52 2f       	mov	r21, r18
 4e0:	43 2f       	mov	r20, r19
      {
         *txHead = *data;
 4e2:	9d 91       	ld	r25, X+
 4e4:	e5 2f       	mov	r30, r21
 4e6:	f4 2f       	mov	r31, r20
 4e8:	91 93       	st	Z+, r25
 4ea:	9e 2f       	mov	r25, r30
 4ec:	92 1b       	sub	r25, r18
{
   
   // TODO: Critical section  here
   if ( ((txBuff + TX_BUF_LEN)-txHead) > len )  // If there's a place to copy data
   {
      for ( uint8_t i = 0; i < len; i++ )
 4ee:	96 17       	cp	r25, r22
 4f0:	18 f4       	brcc	.+6      	; 0x4f8 <serialSendC+0x3c>
      {
         *txHead = *data;
         txHead++;
 4f2:	5e 2f       	mov	r21, r30
 4f4:	4f 2f       	mov	r20, r31
 4f6:	f5 cf       	rjmp	.-22     	; 0x4e2 <serialSendC+0x26>
 4f8:	61 50       	subi	r22, 0x01	; 1
 4fa:	86 2f       	mov	r24, r22
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	28 0f       	add	r18, r24
 502:	39 1f       	adc	r19, r25
 504:	20 93 02 20 	sts	0x2002, r18
 508:	30 93 03 20 	sts	0x2003, r19
         data++;                 
      }
      
      if ( (txBuff == txTail) && (TRUE == initFlag) )       // Initial send
 50c:	80 91 00 20 	lds	r24, 0x2000
 510:	90 91 01 20 	lds	r25, 0x2001
 514:	81 5f       	subi	r24, 0xF1	; 241
 516:	92 42       	sbci	r25, 0x22	; 34
 518:	b1 f4       	brne	.+44     	; 0x546 <serialSendC+0x8a>
 51a:	80 91 f0 22 	lds	r24, 0x22F0
 51e:	88 23       	and	r24, r24
 520:	91 f0       	breq	.+36     	; 0x546 <serialSendC+0x8a>
      {        
         USARTC0.DATA = *txTail;    // First character sent starts transmission
 522:	80 91 f1 22 	lds	r24, 0x22F1
 526:	80 93 c0 08 	sts	0x08C0, r24
         txTail++;
 52a:	80 91 00 20 	lds	r24, 0x2000
 52e:	90 91 01 20 	lds	r25, 0x2001
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	80 93 00 20 	sts	0x2000, r24
 538:	90 93 01 20 	sts	0x2001, r25
 53c:	08 95       	ret
      }                
   }
   else
   {
      // Overflow or data too big  
      DEB_3_SET();    
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	e0 e6       	ldi	r30, 0x60	; 96
 542:	f6 e0       	ldi	r31, 0x06	; 6
 544:	85 83       	std	Z+5, r24	; 0x05
 546:	08 95       	ret

00000548 <serialInitC>:
// Serial on PORTC initialization:
void serialInitC ( void )
{
   // PORTC configuration:
   
   PORTC.REMAP &= ~PORT_USART0_bm;       // Don't remap ports from 0-3 to 4-7   
 548:	e0 e4       	ldi	r30, 0x40	; 64
 54a:	f6 e0       	ldi	r31, 0x06	; 6
 54c:	86 85       	ldd	r24, Z+14	; 0x0e
 54e:	8f 7e       	andi	r24, 0xEF	; 239
 550:	86 87       	std	Z+14, r24	; 0x0e
   PORTC.DIRSET = CFG_TXC0_PIN_MASK;     // Output for Tx (pin must be manually set to output)
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	81 83       	std	Z+1, r24	; 0x01
   PORTC.DIRCLR = CFG_RXC0_PIN_MASK;     // Input for Rx
 556:	94 e0       	ldi	r25, 0x04	; 4
 558:	92 83       	std	Z+2, r25	; 0x02
   
   // CTRLC:
   USARTC0.CTRLC =  ( USART_CMODE_ASYNCHRONOUS_gc |    // Asynchronous transfer mode
 55a:	e0 ec       	ldi	r30, 0xC0	; 192
 55c:	f8 e0       	ldi	r31, 0x08	; 8
 55e:	93 e0       	ldi	r25, 0x03	; 3
 560:	94 83       	std	Z+4, r25	; 0x04
                      USART_PMODE_DISABLED_gc     |    // Parity mode disabled
                      USART_CHSIZE_8BIT_gc        );   // 8b per frame                   
                      
   USARTC0.CTRLC &= ~USART_SBMODE_bm;  // Stop bit disabled
 562:	94 81       	ldd	r25, Z+4	; 0x04
 564:	97 7f       	andi	r25, 0xF7	; 247
 566:	94 83       	std	Z+4, r25	; 0x04
   
   // Baud rate
       
   USARTC0.BAUDCTRLA =  BSEL_BAUD_VAL;           // 8 LSB of BSEL
 568:	9e e6       	ldi	r25, 0x6E	; 110
 56a:	96 83       	std	Z+6, r25	; 0x06
   USARTC0.BAUDCTRLB =  BSCALE_BAUD_VAL | ((BSEL_BAUD_VAL >> 8) & 0x0F) ;           // 4 MSB of BSEL and BSCALE    
 56c:	90 eb       	ldi	r25, 0xB0	; 176
 56e:	97 83       	std	Z+7, r25	; 0x07
       
        
   // Priorities from common.h:
   USARTC0.CTRLA = CFG_PRIO_USARTC0;  
 570:	82 83       	std	Z+2, r24	; 0x02
         
   USARTC0.CTRLB |= ( USART_TXEN_bm |    // Transmitter enabled
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	8c 60       	ori	r24, 0x0C	; 12
 576:	83 83       	std	Z+3, r24	; 0x03
                      //USART_RXEN_bm |    // Receiver enabled
                      USART_CLK2X_bm );  // Enabling 2x clock    
                       
   USARTC0.STATUS &= ~USART_TXCIF_bm;    // Clearing tx interrupt flag
 578:	81 81       	ldd	r24, Z+1	; 0x01
 57a:	8f 7b       	andi	r24, 0xBF	; 191
 57c:	81 83       	std	Z+1, r24	; 0x01
   
   LOG_TXT ( ">>init<<   Serial initialized\n", 31 );
 57e:	6f e1       	ldi	r22, 0x1F	; 31
 580:	89 e5       	ldi	r24, 0x59	; 89
 582:	92 e2       	ldi	r25, 0x22	; 34
 584:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   
   initFlag = TRUE;
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 f0 22 	sts	0x22F0, r24
 58e:	08 95       	ret

00000590 <serialLogUintC>:


//****************************************************************************************
// TODO: modify this
void serialLogUintC ( uint8_t* txt, uint8_t len, uint32_t val )
{
 590:	6f 92       	push	r6
 592:	7f 92       	push	r7
 594:	8f 92       	push	r8
 596:	9f 92       	push	r9
 598:	af 92       	push	r10
 59a:	bf 92       	push	r11
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	2a 97       	sbiw	r28, 0x0a	; 10
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	de bf       	out	0x3e, r29	; 62
 5b6:	8c 01       	movw	r16, r24
 5b8:	66 2e       	mov	r6, r22
 5ba:	49 01       	movw	r8, r18
 5bc:	5a 01       	movw	r10, r20
   char temp[10];
      
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
 5be:	21 15       	cp	r18, r1
 5c0:	31 05       	cpc	r19, r1
 5c2:	41 05       	cpc	r20, r1
 5c4:	51 05       	cpc	r21, r1
 5c6:	b9 f0       	breq	.+46     	; 0x5f6 <serialLogUintC+0x66>
 5c8:	ca 01       	movw	r24, r20
 5ca:	b9 01       	movw	r22, r18
 5cc:	71 2c       	mov	r7, r1
   }
   else
   {     
      while ( tempVal ) 
      {
         tempVal /= 10;
 5ce:	0f 2e       	mov	r0, r31
 5d0:	fa e0       	ldi	r31, 0x0A	; 10
 5d2:	cf 2e       	mov	r12, r31
 5d4:	d1 2c       	mov	r13, r1
 5d6:	e1 2c       	mov	r14, r1
 5d8:	f1 2c       	mov	r15, r1
 5da:	f0 2d       	mov	r31, r0
 5dc:	a7 01       	movw	r20, r14
 5de:	96 01       	movw	r18, r12
 5e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 5e4:	ca 01       	movw	r24, r20
 5e6:	b9 01       	movw	r22, r18
         numLen++;      
 5e8:	73 94       	inc	r7
   {
      numLen = 1;
   }
   else
   {     
      while ( tempVal ) 
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	41 05       	cpc	r20, r1
 5f0:	51 05       	cpc	r21, r1
 5f2:	a1 f7       	brne	.-24     	; 0x5dc <serialLogUintC+0x4c>
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <serialLogUintC+0x6a>
   uint8_t numLen = 0;
   uint32_t tempVal = val;
   
   if ( 0 == val )
   {
      numLen = 1;
 5f6:	77 24       	eor	r7, r7
 5f8:	73 94       	inc	r7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 5fa:	4a e0       	ldi	r20, 0x0A	; 10
 5fc:	be 01       	movw	r22, r28
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	c4 01       	movw	r24, r8
 604:	0e 94 a3 04 	call	0x946	; 0x946 <__utoa_ncheck>
   }
   
      
   (void) utoa ( (unsigned int)val, temp, 10 );
   
   serialSendC ( (const uint8_t*) txt, len );
 608:	66 2d       	mov	r22, r6
 60a:	c8 01       	movw	r24, r16
 60c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   serialSendC ( (const uint8_t*) temp, numLen );
 610:	67 2d       	mov	r22, r7
 612:	ce 01       	movw	r24, r28
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   serialSendC ( (const uint8_t*) "\n", 2 );
 61a:	62 e0       	ldi	r22, 0x02	; 2
 61c:	89 e3       	ldi	r24, 0x39	; 57
 61e:	90 e2       	ldi	r25, 0x20	; 32
 620:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   
}
 624:	2a 96       	adiw	r28, 0x0a	; 10
 626:	cd bf       	out	0x3d, r28	; 61
 628:	de bf       	out	0x3e, r29	; 62
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	ef 90       	pop	r14
 636:	df 90       	pop	r13
 638:	cf 90       	pop	r12
 63a:	bf 90       	pop	r11
 63c:	af 90       	pop	r10
 63e:	9f 90       	pop	r9
 640:	8f 90       	pop	r8
 642:	7f 90       	pop	r7
 644:	6f 90       	pop	r6
 646:	08 95       	ret

00000648 <__vector_25>:

//****************************************************************************************
// Serial Tx complete ISR ( tx flag is cleared automatically):

ISR ( USARTC0_TXC_vect )
{             
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	8f 93       	push	r24
 654:	9f 93       	push	r25
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
   if ( txTail < txHead )
 65a:	e0 91 00 20 	lds	r30, 0x2000
 65e:	f0 91 01 20 	lds	r31, 0x2001
 662:	80 91 02 20 	lds	r24, 0x2002
 666:	90 91 03 20 	lds	r25, 0x2003
 66a:	e8 17       	cp	r30, r24
 66c:	f9 07       	cpc	r31, r25
 66e:	68 f4       	brcc	.+26     	; 0x68a <__vector_25+0x42>
   {
      USARTC0.DATA = *txTail;
 670:	80 81       	ld	r24, Z
 672:	80 93 c0 08 	sts	0x08C0, r24
      txTail++;      
 676:	80 91 00 20 	lds	r24, 0x2000
 67a:	90 91 01 20 	lds	r25, 0x2001
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	80 93 00 20 	sts	0x2000, r24
 684:	90 93 01 20 	sts	0x2001, r25
 688:	0a c0       	rjmp	.+20     	; 0x69e <__vector_25+0x56>
   }
   else // All of data from buffer is send
   {
      txTail = txBuff;
 68a:	81 ef       	ldi	r24, 0xF1	; 241
 68c:	92 e2       	ldi	r25, 0x22	; 34
 68e:	80 93 00 20 	sts	0x2000, r24
 692:	90 93 01 20 	sts	0x2001, r25
      txHead = txTail;    
 696:	80 93 02 20 	sts	0x2002, r24
 69a:	90 93 03 20 	sts	0x2003, r25
   } 
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_23>:



//****************************************************************************************
ISR ( USARTC0_RXC_vect )
{   
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <spiInit>:
*/


//****************************************************************************************
void spiInit ( void )
{
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
   
   // Pins as output: 
   PORTC.DIRSET |= ( CFG_RST_PIN_MASK  |
 6c8:	e0 e4       	ldi	r30, 0x40	; 64
 6ca:	f6 e0       	ldi	r31, 0x06	; 6
 6cc:	81 81       	ldd	r24, Z+1	; 0x01
 6ce:	83 6b       	ori	r24, 0xB3	; 179
 6d0:	81 83       	std	Z+1, r24	; 0x01
                     CFG_DC_PIN_MASK   |
                     CFG_MOSI_PIN_MASK |
                     CFG_SCK_PIN_MASK  ); 
   
   // Unbuffered mode (simple tx use)
   SPIC.CTRLB = SPI_SSD_bm;      // Slave select disable (master mode) 
 6d2:	c0 ee       	ldi	r28, 0xE0	; 224
 6d4:	d8 e0       	ldi	r29, 0x08	; 8
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	8c 83       	std	Y+4, r24	; 0x04
   
   // TODO: DMA?
   SPIC.CTRL = ( SPI_CLK2X_bm    |     // Clock Double
 6da:	80 e9       	ldi	r24, 0x90	; 144
 6dc:	88 83       	st	Y, r24
                 SPI_MASTER_bm   );    // Master mode               
   
  // SPIC.INTCTRL = CFG_PRIO_SPI;        // Interrupt level from boardCfg.h     

                                
   LOG_TXT ( ">>init<<   SPI initialized\n", 28 );
 6de:	6c e1       	ldi	r22, 0x1C	; 28
 6e0:	88 e7       	ldi	r24, 0x78	; 120
 6e2:	92 e2       	ldi	r25, 0x22	; 34
 6e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
   SPI_EN(); // wywalic
 6e8:	88 81       	ld	r24, Y
 6ea:	80 64       	ori	r24, 0x40	; 64
 6ec:	88 83       	st	Y, r24
}
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	08 95       	ret

000006f4 <spiRegisterTxEndCB>:


//****************************************************************************************
void spiRegisterTxEndCB ( pfnTxEnd cb)
{
   txEndCB = cb;   
 6f4:	80 93 f1 23 	sts	0x23F1, r24
 6f8:	90 93 f2 23 	sts	0x23F2, r25
 6fc:	08 95       	ret

000006fe <__vector_22>:
}


//****************************************************************************************
ISR ( SPIC_INT_vect )
{
 6fe:	1f 92       	push	r1
 700:	0f 92       	push	r0
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	0f 92       	push	r0
 706:	11 24       	eor	r1, r1
 708:	2f 93       	push	r18
 70a:	3f 93       	push	r19
 70c:	4f 93       	push	r20
 70e:	5f 93       	push	r21
 710:	6f 93       	push	r22
 712:	7f 93       	push	r23
 714:	8f 93       	push	r24
 716:	9f 93       	push	r25
 718:	af 93       	push	r26
 71a:	bf 93       	push	r27
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
   // Is there critical section necessary ?
   if ( txTail < txHead )
 720:	80 91 04 20 	lds	r24, 0x2004
 724:	90 91 05 20 	lds	r25, 0x2005
 728:	20 91 06 20 	lds	r18, 0x2006
 72c:	30 91 07 20 	lds	r19, 0x2007
 730:	82 17       	cp	r24, r18
 732:	93 07       	cpc	r25, r19
 734:	58 f4       	brcc	.+22     	; 0x74c <__vector_22+0x4e>
   {
      SPIC.DATA = *txTail;
 736:	fc 01       	movw	r30, r24
 738:	81 91       	ld	r24, Z+
 73a:	a0 ee       	ldi	r26, 0xE0	; 224
 73c:	b8 e0       	ldi	r27, 0x08	; 8
 73e:	13 96       	adiw	r26, 0x03	; 3
 740:	8c 93       	st	X, r24
      txTail++;
 742:	e0 93 04 20 	sts	0x2004, r30
 746:	f0 93 05 20 	sts	0x2005, r31
 74a:	16 c0       	rjmp	.+44     	; 0x778 <__vector_22+0x7a>
   }
   else // All of data from buffer are send
   {
      txTail = txBuff;
 74c:	83 ef       	ldi	r24, 0xF3	; 243
 74e:	93 e2       	ldi	r25, 0x23	; 35
 750:	80 93 04 20 	sts	0x2004, r24
 754:	90 93 05 20 	sts	0x2005, r25
      txHead = txTail;
 758:	80 93 06 20 	sts	0x2006, r24
 75c:	90 93 07 20 	sts	0x2007, r25
      
      if ( NULL != txEndCB )
 760:	e0 91 f1 23 	lds	r30, 0x23F1
 764:	f0 91 f2 23 	lds	r31, 0x23F2
 768:	30 97       	sbiw	r30, 0x00	; 0
 76a:	09 f0       	breq	.+2      	; 0x76e <__vector_22+0x70>
      {
         txEndCB();         
 76c:	09 95       	icall
      }
      
      SPI_DIS();     // Disabling SPI (only tx is used)
 76e:	e0 ee       	ldi	r30, 0xE0	; 224
 770:	f8 e0       	ldi	r31, 0x08	; 8
 772:	80 81       	ld	r24, Z
 774:	8f 7b       	andi	r24, 0xBF	; 191
 776:	80 83       	st	Z, r24
   }
 
 778:	ff 91       	pop	r31
 77a:	ef 91       	pop	r30
 77c:	bf 91       	pop	r27
 77e:	af 91       	pop	r26
 780:	9f 91       	pop	r25
 782:	8f 91       	pop	r24
 784:	7f 91       	pop	r23
 786:	6f 91       	pop	r22
 788:	5f 91       	pop	r21
 78a:	4f 91       	pop	r20
 78c:	3f 91       	pop	r19
 78e:	2f 91       	pop	r18
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <systemMeasEnd>:


//****************************************************************************************
void systemMeasEnd ( uint16_t val )
{
   actMeas = ((((uint32_t)val)*ADC_DIVIDER)/65535);   // For 16b res
 79a:	9c 01       	movw	r18, r24
 79c:	a8 ee       	ldi	r26, 0xE8	; 232
 79e:	b3 e0       	ldi	r27, 0x03	; 3
 7a0:	0e 94 94 04 	call	0x928	; 0x928 <__umulhisi3>
 7a4:	2f ef       	ldi	r18, 0xFF	; 255
 7a6:	3f ef       	ldi	r19, 0xFF	; 255
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__udivmodsi4>
 7b0:	20 93 4d 26 	sts	0x264D, r18
 7b4:	30 93 4e 26 	sts	0x264E, r19

static void systemPeriodicRefresh ( void )
{   
   static uint16_t actMeasOld;
   
   if ( actMeasOld != actMeas )
 7b8:	80 91 4d 26 	lds	r24, 0x264D
 7bc:	90 91 4e 26 	lds	r25, 0x264E
 7c0:	20 91 4b 26 	lds	r18, 0x264B
 7c4:	30 91 4c 26 	lds	r19, 0x264C
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	89 f0       	breq	.+34     	; 0x7f0 <systemMeasEnd+0x56>
   {
      actMeasOld = actMeas;
 7ce:	80 91 4d 26 	lds	r24, 0x264D
 7d2:	90 91 4e 26 	lds	r25, 0x264E
 7d6:	80 93 4b 26 	sts	0x264B, r24
 7da:	90 93 4c 26 	sts	0x264C, r25
      pdcUint( actMeas, 1, 5, 7 );
 7de:	80 91 4d 26 	lds	r24, 0x264D
 7e2:	90 91 4e 26 	lds	r25, 0x264E
 7e6:	27 e0       	ldi	r18, 0x07	; 7
 7e8:	45 e0       	ldi	r20, 0x05	; 5
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	0e 94 c6 01 	call	0x38c	; 0x38c <pdcUint>

   }
   
   LOG_UINT ( "Result [mV]: ", 13, actMeas );
 7f0:	20 91 4d 26 	lds	r18, 0x264D
 7f4:	30 91 4e 26 	lds	r19, 0x264E
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	6d e0       	ldi	r22, 0x0D	; 13
 7fe:	84 e9       	ldi	r24, 0x94	; 148
 800:	92 e2       	ldi	r25, 0x22	; 34
 802:	0e 94 c8 02 	call	0x590	; 0x590 <serialLogUintC>
 806:	08 95       	ret

00000808 <systemInit>:


//****************************************************************************************
void systemInit ( void ) 
{
   adcRegisterEndCb( systemMeasEnd );      // Registering CB
 808:	8d ec       	ldi	r24, 0xCD	; 205
 80a:	93 e0       	ldi	r25, 0x03	; 3
 80c:	0e 94 a4 00 	call	0x148	; 0x148 <adcRegisterEndCb>
   timerRegisterRtcCB ( adcStartChToGnd );
 810:	88 e9       	ldi	r24, 0x98	; 152
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 40 04 	call	0x880	; 0x880 <timerRegisterRtcCB>
}

//****************************************************************************************
static void systemDisplayBackground ( void )
{
   pdcLine ( "Act:        mV", 1 );
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	82 ea       	ldi	r24, 0xA2	; 162
 81c:	92 e2       	ldi	r25, 0x22	; 34
 81e:	0e 94 a8 01 	call	0x350	; 0x350 <pdcLine>
   adcRegisterEndCb( systemMeasEnd );      // Registering CB
   timerRegisterRtcCB ( adcStartChToGnd );
   
   systemDisplayBackground();
   
   LOG_TXT ( ">>init<<   System initialized\n", 31 );
 822:	6f e1       	ldi	r22, 0x1F	; 31
 824:	81 eb       	ldi	r24, 0xB1	; 177
 826:	92 e2       	ldi	r25, 0x22	; 34
 828:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 82c:	08 95       	ret

0000082e <timerInit>:

void timerInit (void )
{
   // RTC:
   
   if ( !(OSC.CTRL & OSC_RC32KEN_bm) )          // If disabled
 82e:	80 91 50 00 	lds	r24, 0x0050
 832:	82 fd       	sbrc	r24, 2
 834:	08 c0       	rjmp	.+16     	; 0x846 <timerInit+0x18>
   {
      OSC.CTRL |= OSC_RC32KEN_bm;               // Enabling 32kHz clock
 836:	e0 e5       	ldi	r30, 0x50	; 80
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	84 60       	ori	r24, 0x04	; 4
 83e:	80 83       	st	Z, r24
      while (!(OSC.STATUS & OSC_RC32KRDY_bm));  // Waiting for clock   
 840:	81 81       	ldd	r24, Z+1	; 0x01
 842:	82 ff       	sbrs	r24, 2
 844:	fd cf       	rjmp	.-6      	; 0x840 <timerInit+0x12>
   }   
   
   while ( RTC.STATUS & RTC_SYNCBUSY_bm ){}      // Wait until SYNCBUSY is cleared
 846:	e0 e0       	ldi	r30, 0x00	; 0
 848:	f4 e0       	ldi	r31, 0x04	; 4
 84a:	81 81       	ldd	r24, Z+1	; 0x01
 84c:	80 fd       	sbrc	r24, 0
 84e:	fd cf       	rjmp	.-6      	; 0x84a <timerInit+0x1c>
   RTC.PER = RTC_PERIOD_S * 31,25;                // 32ms period
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f4 e0       	ldi	r31, 0x04	; 4
 854:	8f e1       	ldi	r24, 0x1F	; 31
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	82 87       	std	Z+10, r24	; 0x0a
 85a:	93 87       	std	Z+11, r25	; 0x0b
   
   RTC.INTCTRL = CFG_PRIO_RTC_OVFL;     // from boardCfg.h
 85c:	83 e0       	ldi	r24, 0x03	; 3
 85e:	82 83       	std	Z+2, r24	; 0x02
   
   while ( RTC.STATUS & RTC_SYNCBUSY_bm ){}  // Wait until SYNCBUSY is cleared 
 860:	81 81       	ldd	r24, Z+1	; 0x01
 862:	80 fd       	sbrc	r24, 0
 864:	fd cf       	rjmp	.-6      	; 0x860 <timerInit+0x32>
   RTC.CTRL = RTC_PRESCALER_DIV1024_gc;      // For 1s resolution
 866:	87 e0       	ldi	r24, 0x07	; 7
 868:	80 93 00 04 	sts	0x0400, r24

   
   CLK.RTCCTRL = CLK_RTCEN_bm           // RTC source enabled
 86c:	8d e0       	ldi	r24, 0x0D	; 13
 86e:	e0 e4       	ldi	r30, 0x40	; 64
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	83 83       	std	Z+3, r24	; 0x03
               | CLK_RTCSRC_RCOSC32_gc;     // 32k ULP for RTC
   


   LOG_TXT ( ">>init<<   Timer initialized\n", 30 );
 874:	6e e1       	ldi	r22, 0x1E	; 30
 876:	80 ed       	ldi	r24, 0xD0	; 208
 878:	92 e2       	ldi	r25, 0x22	; 34
 87a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <serialSendC>
 87e:	08 95       	ret

00000880 <timerRegisterRtcCB>:


//****************************************************************************************
void timerRegisterRtcCB ( pfnRTC cb )
{
   rtcCB = cb;   
 880:	80 93 4f 26 	sts	0x264F, r24
 884:	90 93 50 26 	sts	0x2650, r25
 888:	08 95       	ret

0000088a <__vector_7>:
}


//****************************************************************************************
ISR ( RTC_OVF_vect )
{
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	11 24       	eor	r1, r1
 894:	2f 93       	push	r18
 896:	3f 93       	push	r19
 898:	4f 93       	push	r20
 89a:	5f 93       	push	r21
 89c:	6f 93       	push	r22
 89e:	7f 93       	push	r23
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	af 93       	push	r26
 8a6:	bf 93       	push	r27
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
   DEB_2_TGL();
 8ac:	80 e4       	ldi	r24, 0x40	; 64
 8ae:	e0 e6       	ldi	r30, 0x60	; 96
 8b0:	f6 e0       	ldi	r31, 0x06	; 6
 8b2:	87 83       	std	Z+7, r24	; 0x07
   
   if ( NULL != rtcCB )
 8b4:	e0 91 4f 26 	lds	r30, 0x264F
 8b8:	f0 91 50 26 	lds	r31, 0x2650
 8bc:	30 97       	sbiw	r30, 0x00	; 0
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__vector_7+0x38>
   {
      rtcCB();
 8c0:	09 95       	icall
   }
}
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <__udivmodsi4>:
 8e4:	a1 e2       	ldi	r26, 0x21	; 33
 8e6:	1a 2e       	mov	r1, r26
 8e8:	aa 1b       	sub	r26, r26
 8ea:	bb 1b       	sub	r27, r27
 8ec:	fd 01       	movw	r30, r26
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__udivmodsi4_ep>

000008f0 <__udivmodsi4_loop>:
 8f0:	aa 1f       	adc	r26, r26
 8f2:	bb 1f       	adc	r27, r27
 8f4:	ee 1f       	adc	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	a2 17       	cp	r26, r18
 8fa:	b3 07       	cpc	r27, r19
 8fc:	e4 07       	cpc	r30, r20
 8fe:	f5 07       	cpc	r31, r21
 900:	20 f0       	brcs	.+8      	; 0x90a <__udivmodsi4_ep>
 902:	a2 1b       	sub	r26, r18
 904:	b3 0b       	sbc	r27, r19
 906:	e4 0b       	sbc	r30, r20
 908:	f5 0b       	sbc	r31, r21

0000090a <__udivmodsi4_ep>:
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a 94       	dec	r1
 914:	69 f7       	brne	.-38     	; 0x8f0 <__udivmodsi4_loop>
 916:	60 95       	com	r22
 918:	70 95       	com	r23
 91a:	80 95       	com	r24
 91c:	90 95       	com	r25
 91e:	9b 01       	movw	r18, r22
 920:	ac 01       	movw	r20, r24
 922:	bd 01       	movw	r22, r26
 924:	cf 01       	movw	r24, r30
 926:	08 95       	ret

00000928 <__umulhisi3>:
 928:	a2 9f       	mul	r26, r18
 92a:	b0 01       	movw	r22, r0
 92c:	b3 9f       	mul	r27, r19
 92e:	c0 01       	movw	r24, r0
 930:	a3 9f       	mul	r26, r19
 932:	70 0d       	add	r23, r0
 934:	81 1d       	adc	r24, r1
 936:	11 24       	eor	r1, r1
 938:	91 1d       	adc	r25, r1
 93a:	b2 9f       	mul	r27, r18
 93c:	70 0d       	add	r23, r0
 93e:	81 1d       	adc	r24, r1
 940:	11 24       	eor	r1, r1
 942:	91 1d       	adc	r25, r1
 944:	08 95       	ret

00000946 <__utoa_ncheck>:
 946:	bb 27       	eor	r27, r27

00000948 <__utoa_common>:
 948:	fb 01       	movw	r30, r22
 94a:	55 27       	eor	r21, r21
 94c:	aa 27       	eor	r26, r26
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	aa 1f       	adc	r26, r26
 954:	a4 17       	cp	r26, r20
 956:	10 f0       	brcs	.+4      	; 0x95c <__utoa_common+0x14>
 958:	a4 1b       	sub	r26, r20
 95a:	83 95       	inc	r24
 95c:	50 51       	subi	r21, 0x10	; 16
 95e:	b9 f7       	brne	.-18     	; 0x94e <__utoa_common+0x6>
 960:	a0 5d       	subi	r26, 0xD0	; 208
 962:	aa 33       	cpi	r26, 0x3A	; 58
 964:	08 f0       	brcs	.+2      	; 0x968 <__utoa_common+0x20>
 966:	a9 5d       	subi	r26, 0xD9	; 217
 968:	a1 93       	st	Z+, r26
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	79 f7       	brne	.-34     	; 0x94c <__utoa_common+0x4>
 96e:	b1 11       	cpse	r27, r1
 970:	b1 93       	st	Z+, r27
 972:	11 92       	st	Z+, r1
 974:	cb 01       	movw	r24, r22
 976:	0c 94 bd 04 	jmp	0x97a	; 0x97a <strrev>

0000097a <strrev>:
 97a:	dc 01       	movw	r26, r24
 97c:	fc 01       	movw	r30, r24
 97e:	67 2f       	mov	r22, r23
 980:	71 91       	ld	r23, Z+
 982:	77 23       	and	r23, r23
 984:	e1 f7       	brne	.-8      	; 0x97e <strrev+0x4>
 986:	32 97       	sbiw	r30, 0x02	; 2
 988:	04 c0       	rjmp	.+8      	; 0x992 <strrev+0x18>
 98a:	7c 91       	ld	r23, X
 98c:	6d 93       	st	X+, r22
 98e:	70 83       	st	Z, r23
 990:	62 91       	ld	r22, -Z
 992:	ae 17       	cp	r26, r30
 994:	bf 07       	cpc	r27, r31
 996:	c8 f3       	brcs	.-14     	; 0x98a <strrev+0x10>
 998:	08 95       	ret

0000099a <_exit>:
 99a:	f8 94       	cli

0000099c <__stop_program>:
 99c:	ff cf       	rjmp	.-2      	; 0x99c <__stop_program>
